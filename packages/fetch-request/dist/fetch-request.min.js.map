{"version":3,"file":"fetch-request.min.js","mappings":"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","sources":["webpack://@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/fetch-request/webpack/startup","webpack://@easylibs/fetch-request/./src/fetch-request.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[505](0, __webpack_exports__);\n","declare type FetchRequestType = {\r\n    uri: string,\r\n    data?: Object|FormData|null,\r\n    submiter?: HTMLElement|null,\r\n    options?: {\r\n        method?: 'GET' | 'POST',\r\n        headers?: Object,\r\n        body?: any,\r\n        credentials?: \"omit\" | \"same-origin\",\r\n        mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n        cache?: \"default\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\",\r\n        timeOut?: number,\r\n        fetchOptions?: RequestInit,\r\n        isBinaryFileDownload?: boolean,\r\n        contentType?: string,\r\n        acceptDataFormat?: \"form-data\" | \"classic-object\" | \"array\",\r\n    }\r\n    onPostFetch?: (response?:any) => any,\r\n    onPreFetch?: (that?:any) => any,\r\n    onSuccess?: (response:any) => any,\r\n    onError?: (error: unknown, status:number) => any\r\n}\r\n/**\r\n * Cette classe est une classe utilitaire conçue pour faciliter l'envoi de requêtes Fetch dans une application web. \r\n * Elle offre une interface simple pour effectuer des requêtes HTTP \r\n * et gérer les actions avant et après l'envoi de la requête.\r\n */\r\nexport default class FetchRequest{\r\n    private options: FetchRequestType;\r\n    private _response: any;\r\n    constructor(options: FetchRequestType) {\r\n        this.options = options;\r\n        if(options.submiter){\r\n            options.submiter.addEventListener('click', this.submitForm);\r\n        }else{\r\n            this.submitForm()\r\n        }\r\n    }\r\n    private fetchData = async () => {\r\n        try {\r\n            if(!this.options){\r\n                throw new Error(`Missing Options for the request`)\r\n            }\r\n            if(!this.options.uri){\r\n                throw new Error(\"URI is required\");\r\n            }\r\n            if(!this.options.options || !this.options.options.method){\r\n                throw new Error(\"The calling method is required\");\r\n            }\r\n            const response = await fetch(this.options.uri, {\r\n                method: this.options.options.method ,\r\n                body: this._formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                }\r\n            });\r\n            const dataResponse = await response.json();\r\n            this._response = dataResponse;\r\n            if(this.options.onPostFetch)\r\n            {this.options.onPostFetch(dataResponse);}\r\n            if(this.options.onSuccess && response.status === 200){\r\n                return this.options.onSuccess(dataResponse);\r\n            }\r\n            \r\n        } catch (error) {\r\n            if(this.options.onError && this._response.status !== 200){\r\n                return this.options.onError(error, this._response.status);\r\n            }\r\n            console.error(error);\r\n        }\r\n    }\r\n    private preFetch = async () => {\r\n        if(typeof this.options.onPreFetch === 'function') {\r\n            let data = await this.options.onPreFetch(this.options.data);\r\n            if(data){\r\n                this.options.data = data.data;\r\n            }\r\n        }\r\n    }\r\n    private postFetch = async () => {\r\n        if(this.options.submiter instanceof HTMLButtonElement)\r\n        {this.options.submiter.removeAttribute('disabled');}\r\n        return this.options.onPostFetch ? this.options.onPostFetch() : undefined;\r\n    }\r\n    private submitForm = async () => {\r\n        try{\r\n            if(this.options.onPreFetch){await this.preFetch();}\r\n            await this.fetchData();\r\n            if(this.options.onPostFetch){await this.postFetch();}\r\n        }catch(error){\r\n            console.error('Error executing query : ', error);\r\n        }\r\n    };\r\n    private createFormData = (data: object) => {\r\n        const formData = new FormData();\r\n        for (const [key, value] of Object.entries(data)) {\r\n            formData.append(key, value ?? \"\");\r\n        }\r\n        return formData;\r\n    }\r\n    private createJSON = (data: any[]|Object) => {\r\n        return JSON.stringify({ data: data });\r\n    }\r\n    private get _formData() {\r\n        const isFormData = (data: any): data is FormData => data instanceof FormData;\r\n        const isArray = (data: any): data is any[] => Array.isArray(data);\r\n        const isObject = (data: any): data is object => typeof data === 'object' && Object.keys(data).length > 0;\r\n\r\n        if(this.options.options){\r\n            const acceptDataFormat = this.options.options.acceptDataFormat;\r\n            if(acceptDataFormat){\r\n                switch (acceptDataFormat) {\r\n                    case \"form-data\":\r\n                        if (isFormData(this.options.data)) {\r\n                            return this.options.data;\r\n                        } else if (isArray(this.options.data)) {\r\n                            return this.createJSON(this.options.data);\r\n                        } else if (isObject(this.options.data)) {\r\n                            return this.createFormData(this.options.data);\r\n                        }\r\n                        break;\r\n                    case \"classic-object\":\r\n                        if (isFormData(this.options.data) || isArray(this.options.data) || isObject(this.options.data)) {\r\n                            return this.createJSON(isArray(this.options.data) ? this.options.data : this.options.data);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw Error(`The ${acceptDataFormat} format is not supported`);\r\n                }\r\n            }\r\n            }\r\n    }\r\n    public get response():any\r\n    {\r\n        return this._response;\r\n    }\r\n}\r\n\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_exports__","constructor","options","fetchData","this","Error","uri","method","response","fetch","body","_formData","headers","dataResponse","json","_response","onPostFetch","onSuccess","status","error","onError","console","preFetch","onPreFetch","data","postFetch","submiter","HTMLButtonElement","removeAttribute","undefined","submitForm","createFormData","formData","FormData","key","value","Object","entries","append","createJSON","JSON","stringify","addEventListener","isFormData","isArray","Array","isObject","keys","length","acceptDataFormat"],"sourceRoot":""}