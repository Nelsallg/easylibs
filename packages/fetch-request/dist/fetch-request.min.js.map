{"version":3,"file":"fetch-request.min.js","mappings":"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","sources":["webpack://@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/fetch-request/webpack/startup","webpack://@easylibs/fetch-request/./src/fetch-request.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[505](0, __webpack_exports__);\n","declare type FetchRequestType = {\r\n    uri: string,\r\n    data?: Object|FormData|null,\r\n    submiter?: HTMLElement|null,\r\n    options?: {\r\n        method?: 'GET' | 'POST',\r\n        headers?: Object,\r\n        body?: any,\r\n        credentials?: \"omit\" | \"same-origin\",\r\n        mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n        cache?: \"default\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\",\r\n        timeout?: number,\r\n        fetchOptions?: RequestInit,\r\n        isBinaryFileDownload?: boolean,\r\n        contentType?: string,\r\n        acceptDataFormat?: \"form-data\" | \"classic-object\" | \"array\",\r\n    }\r\n    onPostFetch?: (data?:any) => any,\r\n    onPreFetch?: () => any,\r\n    onSuccess?: (response:any) => any,\r\n    onError?: (error: unknown) => any,\r\n    onProgressUpdate?: (progressEvent: ProgressEvent) => void,\r\n}\r\n/**\r\n * Cette classe est une classe utilitaire conçue pour faciliter l'envoi de requêtes Fetch dans une application web. \r\n * Elle offre une interface simple pour effectuer des requêtes HTTP \r\n * et gérer les actions avant et après l'envoi de la requête.\r\n */\r\nexport default class FetchRequest{\r\n    private options: FetchRequestType;\r\n    private _response: any;\r\n    constructor(options: FetchRequestType) {\r\n        this.options = options;\r\n        if(options.submiter){\r\n            options.submiter.addEventListener('click', this.submitForm);\r\n        }else{\r\n            this.submitForm()\r\n        }\r\n    }\r\n    private preFetch = async () => {\r\n        if(typeof this.options.onPreFetch === 'function') {\r\n            let data = await this.options.onPreFetch();\r\n            if(data){\r\n                this.options.data = data.data;\r\n            }\r\n        }\r\n    }\r\n    private fetchData = async () => {\r\n        try {\r\n            if(!this.options){\r\n                throw new Error(`Missing Options for the request`)\r\n            }\r\n            if(!this.options.uri){\r\n                throw new Error(\"L'URI est obligatoire\");\r\n            }\r\n            if(!this.options.options || !this.options.options.method){\r\n                throw new Error(\"La méthode d'appel est obligatoire\");\r\n            }\r\n            const response = await fetch(this.options.uri, {\r\n                method: this.options.options.method ,\r\n                body: this._formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                }\r\n            });\r\n            const dataResponse = await response.json();\r\n            this._response = dataResponse;\r\n            if(this.options.onPostFetch)\r\n            {this.options.onPostFetch(dataResponse);}\r\n            if(this.options.onSuccess){\r\n                return this.options.onSuccess(dataResponse);\r\n            }\r\n        } catch (error) {\r\n            if(this.options.onError){\r\n                return this.options.onError(error);\r\n            }\r\n            console.error(error);\r\n        }\r\n    }\r\n    private postFetch = async () => {\r\n        if(this.options.submiter instanceof HTMLButtonElement)\r\n        {this.options.submiter.removeAttribute('disabled');}\r\n        return this.options.onPostFetch ? this.options.onPostFetch() : undefined;\r\n    }\r\n    private submitForm = async () => {\r\n        try{\r\n            if(this.options.onPreFetch){await this.preFetch();}\r\n            await this.fetchData();\r\n            if(this.options.onPostFetch){await this.postFetch();}\r\n        }catch(error){\r\n            console.error('Erreur lors de l\\'envoi du formulaire : ', error);\r\n        }\r\n    };\r\n    private createFormData = (data: object) => {\r\n        const formData = new FormData();\r\n        for (const [key, value] of Object.entries(data)) {\r\n            formData.append(key, value ?? \"\");\r\n        }\r\n        return formData;\r\n    }\r\n    private createJSON = (data: any[]|Object) => {\r\n        return JSON.stringify({ data: data });\r\n    }\r\n    private get _formData() {\r\n        const isFormData = (data: any): data is FormData => data instanceof FormData;\r\n        const isArray = (data: any): data is any[] => Array.isArray(data);\r\n        const isObject = (data: any): data is object => typeof data === 'object' && Object.keys(data).length > 0;\r\n\r\n        if(this.options.options){\r\n            const acceptDataFormat = this.options.options.acceptDataFormat;\r\n            if(acceptDataFormat){\r\n                switch (acceptDataFormat) {\r\n                    case \"form-data\":\r\n                        if (isFormData(this.options.data)) {\r\n                            return this.options.data;\r\n                        } else if (isArray(this.options.data)) {\r\n                            return this.createJSON(this.options.data);\r\n                        } else if (isObject(this.options.data)) {\r\n                            return this.createFormData(this.options.data);\r\n                        }\r\n                        break;\r\n                    case \"classic-object\":\r\n                        if (isFormData(this.options.data) || isArray(this.options.data) || isObject(this.options.data)) {\r\n                            return this.createJSON(isArray(this.options.data) ? this.options.data : this.options.data);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw Error(`Le format ${acceptDataFormat} n'est pas supporté`);\r\n                }\r\n            }\r\n            }\r\n    }\r\n    public get response():any\r\n    {\r\n        return this._response;\r\n    }\r\n}\r\n\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_exports__","constructor","options","preFetch","this","onPreFetch","data","fetchData","Error","uri","method","response","fetch","body","_formData","headers","dataResponse","json","_response","onPostFetch","onSuccess","error","onError","console","postFetch","submiter","HTMLButtonElement","removeAttribute","undefined","submitForm","createFormData","formData","FormData","key","value","Object","entries","append","createJSON","JSON","stringify","addEventListener","isFormData","isArray","Array","isObject","keys","length","acceptDataFormat"],"sourceRoot":""}