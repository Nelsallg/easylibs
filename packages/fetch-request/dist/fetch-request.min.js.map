{"version":3,"file":"fetch-request.min.js","mappings":"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","sources":["webpack://@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/fetch-request/webpack/bootstrap","webpack://@easylibs/fetch-request/webpack/runtime/define property getters","webpack://@easylibs/fetch-request/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/fetch-request/webpack/runtime/make namespace object","webpack://@easylibs/fetch-request/./src/fetch-request.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Type definition for HTTP methods.\r\n */\r\ndeclare type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';\r\n\r\n/**\r\n * Type definition for request headers, represented as a record of string key-value pairs.\r\n */\r\ndeclare type Headers = Record<string, string>;\r\n\r\n/**\r\n * Interface defining the options for a fetch request.\r\n * Includes optional configuration for HTTP method, headers, credentials, mode, cache, integrity, timeout, content type,\r\n * request data type, and response data type.\r\n */\r\ndeclare interface FetchRequestOptions {\r\n    method?: HttpMethod,\r\n    headers?: Headers,\r\n    credentials?: \"omit\" | \"same-origin\" | \"include\",\r\n    mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n    cache?: \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\",\r\n    integrity?: string,\r\n    timeOut?: number,\r\n    contentType?: string,\r\n    requestDataConvert?: \"form-data\" | \"record\",\r\n    responseDataType?: 'json' | 'text',\r\n}\r\n\r\n/**\r\n * Interface for callbacks that can be executed at different stages of the fetch request process.\r\n * Includes optional methods for actions post-fetch, pre-fetch, on success, and on error.\r\n */\r\ndeclare interface FetchRequestCallbacks {\r\n    onPostFetch?: (response?: any, status?:number) => any,\r\n    onPreFetch?: (data?: any) => any,\r\n    onSuccess?: (response: any) => void,\r\n    onError?: (error: Error, status: number) => void\r\n}\r\n\r\n/**\r\n * Type definition for the main fetch request configuration.\r\n * Includes the request URI, optional data, submitter element, fetch options, and callbacks.\r\n */\r\ndeclare type FetchRequestType = {\r\n    uri: string,\r\n    data?: Record<any, any> | FormData | null,\r\n    submitter?: HTMLElement | null,\r\n    options?: FetchRequestOptions,\r\n    callbacks?: FetchRequestCallbacks\r\n}\r\n\r\n/**\r\n * FetchRequest class designed to simplify the process of making HTTP requests within web applications.\r\n * It encapsulates functionality for sending requests and handling callbacks before and after the request.\r\n */\r\nexport default class FetchRequest {\r\n    private response: Record<string,any>|string;\r\n    private status: number;\r\n\r\n    /**\r\n     * @param options Configuration for the fetch request.\r\n     */\r\n    constructor(private options: FetchRequestType) {\r\n        this.attachSubmitterEvent();\r\n    }\r\n\r\n    /**\r\n     * Attaches a click event listener to the submitter element that triggers the form submission.\r\n     * If no submitter is provided, the form submission is triggered immediately.\r\n     */\r\n    private attachSubmitterEvent() {\r\n        this.options.submitter ? this.options.submitter.addEventListener('click', this.submitForm) : this.submitForm();  \r\n    }\r\n\r\n    /**\r\n     * Asynchronous method that handles the form submission process.\r\n     * It optionally executes pre-fetch and post-fetch callbacks and makes the HTTP request.\r\n     */\r\n    private submitForm = async () => {\r\n        try {\r\n            if (this.options.callbacks && this.options.callbacks.onPreFetch) { await this.preFetch(); }\r\n            await this.run();\r\n            if (this.options.callbacks && this.options.callbacks.onPostFetch) { await this.postFetch(this.response, this.status); }\r\n        } catch (error) {\r\n            this.handleError(error, undefined, 'Error executing query : ');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asynchronous method that performs the HTTP request using the Fetch API.\r\n     * It constructs the request based on the provided options and handles the response.\r\n     */\r\n    private run = async () => {\r\n        let response: Response | null = null;\r\n        try {\r\n            const { uri, data, options } = this.options;\r\n            if (!uri) throw new Error(\"URI is required\");\r\n            let finalUri = uri;\r\n            let body = null;\r\n            const method = options?.method || 'GET';\r\n            if (method === \"GET\" && data) {\r\n                finalUri = this.buildGetRequestUrl(uri, data);\r\n            } else if (method !== \"GET\" && method !== \"HEAD\" && method !== \"OPTIONS\" && data) {\r\n                body = this.prepareRequestBody(data);\r\n            }\r\n            const fetchOptions: RequestInit = {\r\n                method: method,\r\n                headers: options?.headers,\r\n                body: body,\r\n                credentials: options?.credentials,\r\n                mode: options?.mode,\r\n                cache: options?.cache,\r\n                integrity: options?.integrity,\r\n            };\r\n            if (method === \"GET\" || method === \"HEAD\" || method === \"OPTIONS\") {\r\n                delete fetchOptions.body;\r\n            }\r\n            response = await fetch(finalUri, fetchOptions);\r\n            this.status = response.status;\r\n            if (options) {\r\n                const responseDataType = options.responseDataType;\r\n                if (responseDataType) {\r\n                    this.response = responseDataType === \"text\" ? await response.text() : await response.json();\r\n                }\r\n            }\r\n\r\n            if (this.options.callbacks?.onSuccess && response.ok) {\r\n                this.options.callbacks.onSuccess(this.response);\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, response ? response.status : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes the pre-fetch callback, allowing for data modification before the request is sent.\r\n     */\r\n    private preFetch = async () => {\r\n        if (typeof this.options.callbacks.onPreFetch === 'function') {\r\n            let data = await this.options.callbacks.onPreFetch(this.options.data);\r\n            if (data) {\r\n                this.options.data = data.hasOwnProperty('data') ? data.data : data;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes the post-fetch callback, allowing for actions to be taken after the request has been processed.\r\n     * @param response The response from the fetch request.\r\n     * @param status The HTTP status code of the response.\r\n     */\r\n    private postFetch = async (response: Record<string,any>|string, status: number) => {\r\n        if (this.options.submitter instanceof HTMLButtonElement) {\r\n            this.options.submitter.removeAttribute('disabled');\r\n        }\r\n        return this.options.callbacks.onPostFetch ? this.options.callbacks.onPostFetch(response, status) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Constructs the URL for a GET request by appending query parameters.\r\n     * @param uri The base URI for the request.\r\n     * @param data The data to be sent as query parameters.\r\n     * @returns The final URI with query parameters.\r\n     */\r\n    private buildGetRequestUrl(uri: string, data: Record<any, any> | FormData): string {\r\n        const url = new URL(uri, window.location.origin);\r\n        const params = new URLSearchParams();\r\n        if (data instanceof FormData) {\r\n            for (let [key, value] of data.entries()) {\r\n                if (typeof value === 'string') {\r\n                    params.append(key, value);\r\n                }\r\n            }\r\n        } else {\r\n            for (let [key, value] of Object.entries(data)) {\r\n                params.append(key, value);\r\n            }\r\n        }\r\n        url.search = params.toString();\r\n        return url.toString();\r\n    }\r\n\r\n    /**\r\n     * Prepares the request body based on the specified data type.\r\n     * @param data The data to be sent in the request body.\r\n     * @returns The prepared request body.\r\n     */\r\n    private prepareRequestBody(data: Record<any, any> | FormData): FormData | Record<any, any> | string {\r\n        if (this.options.options?.requestDataConvert === \"form-data\" && !(data instanceof FormData)) {\r\n            return this.convertObjectToFormData(data);\r\n        } else if (this.options.options?.requestDataConvert === \"record\") {\r\n            return JSON.stringify(data);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Converts an object to FormData.\r\n     * @param data The data object to convert.\r\n     * @returns The FormData representation of the data.\r\n     */\r\n    private convertObjectToFormData(data: Record<any, any>): FormData {\r\n        const formData = new FormData();\r\n        Object.entries(data).forEach(([key, value]) => formData.append(key, value));\r\n        return formData;\r\n    }\r\n\r\n    /**\r\n     * Handles errors that occur during the fetch request process.\r\n     * Logs the error and executes the onError callback if provided.\r\n     * @param error The error that occurred.\r\n     * @param status Optional HTTP status code related to the error.\r\n     * @param message Optional custom error message.\r\n     */\r\n    private handleError(error: any, status?: number, message: string = 'Fetch Request Error: ') {\r\n        console.error(message, error);\r\n        if (this.options.callbacks?.onError) {\r\n            this.options.callbacks.onError(error, status || 0);\r\n        }\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","_regeneratorRuntime","e","t","r","n","i","a","iterator","c","asyncIterator","u","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","undefined","_defineProperties","target","props","descriptor","_toPropertyKey","_defineProperty","toPrimitive","String","Number","_toPrimitive","FetchRequest","options","_this","instance","Constructor","_classCallCheck","_callee","_context","callbacks","onPreFetch","preFetch","run","onPostFetch","postFetch","response","status","t0","handleError","_callee2","_this$options$callbac","_this$options","uri","_data","_options2","finalUri","body","fetchOptions","responseDataType","_context2","data","buildGetRequestUrl","prepareRequestBody","headers","credentials","mode","cache","integrity","fetch","text","json","onSuccess","ok","t1","_callee3","_data2","_context3","_ref4","_callee4","_context4","submitter","HTMLButtonElement","removeAttribute","_x","_x2","this","attachSubmitterEvent","protoProps","staticProps","addEventListener","submitForm","url","URL","window","location","origin","params","URLSearchParams","FormData","_step","_iterator","_createForOfIteratorHelper","entries","_step$value","_slicedToArray","append","_i","_Object$entries","_Object$entries$_i","search","toString","_this$options$options","_this$options$options2","requestDataConvert","JSON","stringify","convertObjectToFormData","formData","_ref5","_ref6","_this$options$callbac2","message","console","onError"],"sourceRoot":""}