{"version":3,"file":"fetch-request.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,gBAAiB,GAAIH,GACF,iBAAZC,QACdA,QAAQ,iBAAmBD,IAE3BD,EAAK,iBAAmBC,GACzB,CATD,CASGK,MAAM,I,uBCNLC,EAAsB,CAAC,E,0YCyB3B,gBAGI,WAAAC,CAAYC,GAQJ,KAAAC,UAAY,IAAY,EAAD,gCAC3B,IACI,IAAIC,KAAKF,QACL,MAAM,IAAIG,MAAM,mCAEpB,IAAID,KAAKF,QAAQI,IACb,MAAM,IAAID,MAAM,mBAEpB,IAAID,KAAKF,QAAQA,UAAYE,KAAKF,QAAQA,QAAQK,OAC9C,MAAM,IAAIF,MAAM,kCAEpB,IAAIG,EAAe,KACnB,GAAGJ,KAAKF,QAAQO,MAAwC,QAAhCL,KAAKF,QAAQA,QAAQK,OAAiB,CAE1D,GADAC,EAAM,IAAIE,IAAIN,KAAKF,QAAQI,KACxBF,KAAKF,QAAQO,gBAAgBE,SAC5B,MAAM,IAAIN,MAAM,gDAEpBG,EAAII,OAAS,IAAIC,gBAAgBT,KAAKF,QAAQO,MAAMK,UACxD,CACA,MAAMC,QAAiBC,MAAMR,QAAAA,EAAOJ,KAAKF,QAAQI,IAAK,CAClDC,OAAQH,KAAKF,QAAQA,QAAQK,OAC7BU,KAAMb,KAAKc,UACXC,QAAS,CACL,mBAAoB,oBAGtBC,QAAqBL,EAASM,OAIpC,GAHAjB,KAAKkB,UAAYF,EACdhB,KAAKF,QAAQqB,aACfnB,KAAKF,QAAQqB,YAAYH,GACvBhB,KAAKF,QAAQsB,WAAiC,MAApBT,EAASU,OAClC,OAAOrB,KAAKF,QAAQsB,UAAUJ,EAGtC,CAAE,MAAOM,GACL,GAAGtB,KAAKF,QAAQyB,SAAqC,MAA1BvB,KAAKkB,UAAUG,OACtC,OAAOrB,KAAKF,QAAQyB,QAAQD,EAAOtB,KAAKkB,UAAUG,QAEtDG,QAAQF,MAAMA,EAClB,CACJ,IACQ,KAAAG,SAAW,IAAY,EAAD,gCAC1B,GAAsC,mBAA5BzB,KAAKF,QAAQ4B,WAA2B,CAC9C,IAAIrB,QAAaL,KAAKF,QAAQ4B,WAAW1B,KAAKF,QAAQO,MACnDA,IACCL,KAAKF,QAAQO,KAAOA,EAAKA,KAEjC,CACJ,IACQ,KAAAsB,UAAY,IAAY,EAAD,gCAG3B,OAFG3B,KAAKF,QAAQ8B,oBAAoBC,mBACnC7B,KAAKF,QAAQ8B,SAASE,gBAAgB,YAChC9B,KAAKF,QAAQqB,YAAcnB,KAAKF,QAAQqB,mBAAgBY,CACnE,IACQ,KAAAC,WAAa,IAAY,EAAD,gCAC5B,IACOhC,KAAKF,QAAQ4B,mBAAkB1B,KAAKyB,kBACjCzB,KAAKD,YACRC,KAAKF,QAAQqB,oBAAmBnB,KAAK2B,YAC5C,CAAC,MAAML,GACHE,QAAQF,MAAM,2BAA4BA,EAC9C,CACJ,IACQ,KAAAW,eAAkB5B,IACtB,MAAM6B,EAAW,IAAI3B,SACrB,IAAK,MAAO4B,EAAKC,KAAUC,OAAOC,QAAQjC,GACtC6B,EAASK,OAAOJ,EAAKC,QAAAA,EAAS,IAElC,OAAOF,CAAQ,EAEX,KAAAM,WAAcnC,GACXoC,KAAKC,UAAU,CAAErC,KAAMA,IA9E9BL,KAAKF,QAAUA,EACZA,EAAQ8B,SACP9B,EAAQ8B,SAASe,iBAAiB,QAAS3C,KAAKgC,YAEhDhC,KAAKgC,YAEb,CA0EA,aAAYlB,GACR,MAAM8B,EAAcvC,GAAgCA,aAAgBE,SAC9DsC,EAAWxC,GAA6ByC,MAAMD,QAAQxC,GACtD0C,EAAY1C,GAA8C,iBAATA,GAAqBgC,OAAOW,KAAK3C,GAAM4C,OAAS,EAEvG,GAAGjD,KAAKF,QAAQA,QAAQ,CACpB,MAAMoD,EAAmBlD,KAAKF,QAAQA,QAAQoD,iBAC9C,GAAGA,EACC,OAAQA,GACJ,IAAK,YACD,GAAIN,EAAW5C,KAAKF,QAAQO,MACxB,OAAOL,KAAKF,QAAQO,KACjB,GAAIwC,EAAQ7C,KAAKF,QAAQO,MAC5B,OAAOL,KAAKwC,WAAWxC,KAAKF,QAAQO,MACjC,GAAI0C,EAAS/C,KAAKF,QAAQO,MAC7B,OAAOL,KAAKiC,eAAejC,KAAKF,QAAQO,MAE5C,MACJ,IAAK,iBACD,GAAIuC,EAAW5C,KAAKF,QAAQO,OAASwC,EAAQ7C,KAAKF,QAAQO,OAAS0C,EAAS/C,KAAKF,QAAQO,MACrF,OAAOL,KAAKwC,YAAWK,EAAQ7C,KAAKF,QAAQO,MAAQL,KAAKF,QAAQO,OAErE,MACJ,QACI,MAAMJ,MAAM,OAAOiD,6BAG/B,CACR,CACA,YAAWvC,GAEP,OAAOX,KAAKkB,SAChB,E,GD5IgB,KAAK,EAAGtB,G","sources":["webpack://@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/fetch-request/webpack/startup","webpack://@easylibs/fetch-request/./src/fetch-request.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[505](0, __webpack_exports__);\n","declare type FetchRequestType = {\r\n    uri: string,\r\n    data?: Record<string, string>|FormData|null,\r\n    submiter?: HTMLElement|null,\r\n    options?: {\r\n        method?: 'GET' | 'POST',\r\n        headers?: any,\r\n        body?: any,\r\n        credentials?: \"omit\" | \"same-origin\" | \"include\",\r\n        mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n        cache?: \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\",\r\n        timeOut?: number,\r\n        fetchOptions?: RequestInit,\r\n        isBinaryFileDownload?: boolean,\r\n        contentType?: string,\r\n        acceptDataFormat?: \"form-data\" | \"classic-object\" | \"array\",\r\n        integrity?: string,\r\n    }\r\n    onPostFetch?: (response?:any) => any,\r\n    onPreFetch?: (that?:any) => any,\r\n    onSuccess?: (response:any) => any,\r\n    onError?: (error: unknown, status:number) => any\r\n}\r\n/**\r\n  * This class is a utility class designed to make it easier to send Fetch requests in a web application.\r\n  * It offers a simple interface for making HTTP requests\r\n  * and manage actions before and after sending the request.\r\n  */\r\nexport default class FetchRequest{\r\n    private options: FetchRequestType;\r\n    private _response: any;\r\n    constructor(options: FetchRequestType) {\r\n        this.options = options;\r\n        if(options.submiter){\r\n            options.submiter.addEventListener('click', this.submitForm);\r\n        }else{\r\n            this.submitForm()\r\n        }\r\n    }\r\n    private fetchData = async () => {\r\n        try {\r\n            if(!this.options){\r\n                throw new Error(`Missing Options for the request`)\r\n            }\r\n            if(!this.options.uri){\r\n                throw new Error(\"URI is required\");\r\n            }\r\n            if(!this.options.options || !this.options.options.method){\r\n                throw new Error(\"The calling method is required\");\r\n            }\r\n            let url:URL|null = null;\r\n            if(this.options.data && this.options.options.method === \"GET\"){\r\n                url = new URL(this.options.uri);\r\n                if(this.options.data instanceof FormData){\r\n                    throw new Error(\"The data format must be an object:key->value\")\r\n                }\r\n                url.search = new URLSearchParams(this.options.data).toString();\r\n            }\r\n            const response = await fetch(url ?? this.options.uri, {\r\n                method: this.options.options.method ,\r\n                body: this._formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                }\r\n            });\r\n            const dataResponse = await response.json();\r\n            this._response = dataResponse;\r\n            if(this.options.onPostFetch)\r\n            {this.options.onPostFetch(dataResponse);}\r\n            if(this.options.onSuccess && response.status === 200){\r\n                return this.options.onSuccess(dataResponse);\r\n            }\r\n            \r\n        } catch (error) {\r\n            if(this.options.onError && this._response.status !== 200){\r\n                return this.options.onError(error, this._response.status);\r\n            }\r\n            console.error(error);\r\n        }\r\n    }\r\n    private preFetch = async () => {\r\n        if(typeof this.options.onPreFetch === 'function') {\r\n            let data = await this.options.onPreFetch(this.options.data);\r\n            if(data){\r\n                this.options.data = data.data;\r\n            }\r\n        }\r\n    }\r\n    private postFetch = async () => {\r\n        if(this.options.submiter instanceof HTMLButtonElement)\r\n        {this.options.submiter.removeAttribute('disabled');}\r\n        return this.options.onPostFetch ? this.options.onPostFetch() : undefined;\r\n    }\r\n    private submitForm = async () => {\r\n        try{\r\n            if(this.options.onPreFetch){await this.preFetch();}\r\n            await this.fetchData();\r\n            if(this.options.onPostFetch){await this.postFetch();}\r\n        }catch(error){\r\n            console.error('Error executing query : ', error);\r\n        }\r\n    };\r\n    private createFormData = (data: object) => {\r\n        const formData = new FormData();\r\n        for (const [key, value] of Object.entries(data)) {\r\n            formData.append(key, value ?? \"\");\r\n        }\r\n        return formData;\r\n    }\r\n    private createJSON = (data: any[]|Object) => {\r\n        return JSON.stringify({ data: data });\r\n    }\r\n    private get _formData() {\r\n        const isFormData = (data: any): data is FormData => data instanceof FormData;\r\n        const isArray = (data: any): data is any[] => Array.isArray(data);\r\n        const isObject = (data: any): data is object => typeof data === 'object' && Object.keys(data).length > 0;\r\n\r\n        if(this.options.options){\r\n            const acceptDataFormat = this.options.options.acceptDataFormat;\r\n            if(acceptDataFormat){\r\n                switch (acceptDataFormat) {\r\n                    case \"form-data\":\r\n                        if (isFormData(this.options.data)) {\r\n                            return this.options.data;\r\n                        } else if (isArray(this.options.data)) {\r\n                            return this.createJSON(this.options.data);\r\n                        } else if (isObject(this.options.data)) {\r\n                            return this.createFormData(this.options.data);\r\n                        }\r\n                        break;\r\n                    case \"classic-object\":\r\n                        if (isFormData(this.options.data) || isArray(this.options.data) || isObject(this.options.data)) {\r\n                            return this.createJSON(isArray(this.options.data) ? this.options.data : this.options.data);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw Error(`The ${acceptDataFormat} format is not supported`);\r\n                }\r\n            }\r\n            }\r\n    }\r\n    public get response():any\r\n    {\r\n        return this._response;\r\n    }\r\n}\r\n\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_exports__","constructor","options","fetchData","this","Error","uri","method","url","data","URL","FormData","search","URLSearchParams","toString","response","fetch","body","_formData","headers","dataResponse","json","_response","onPostFetch","onSuccess","status","error","onError","console","preFetch","onPreFetch","postFetch","submiter","HTMLButtonElement","removeAttribute","undefined","submitForm","createFormData","formData","key","value","Object","entries","append","createJSON","JSON","stringify","addEventListener","isFormData","isArray","Array","isObject","keys","length","acceptDataFormat"],"sourceRoot":""}