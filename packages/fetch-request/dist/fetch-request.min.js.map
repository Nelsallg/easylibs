{"version":3,"file":"fetch-request.min.js","mappings":"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","sources":["webpack://@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/fetch-request/webpack/bootstrap","webpack://@easylibs/fetch-request/webpack/runtime/define property getters","webpack://@easylibs/fetch-request/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/fetch-request/webpack/runtime/make namespace object","webpack://@easylibs/fetch-request/./src/fetch-request.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const SUCCESS_HTTP_CODES = [200, 201, 202, 203, 204, 205, 206]\r\n/**\r\n * Type definition for HTTP methods.\r\n */\r\ndeclare type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';\r\n\r\n/**\r\n * Type definition for request headers, represented as a record of string key-value pairs.\r\n */\r\ndeclare type Headers = Record<string, string>;\r\n\r\n/**\r\n * Interface defining the options for a fetch request.\r\n * Includes optional configuration for HTTP method, headers, credentials, mode, cache, integrity, timeout, content type,\r\n * request data type, and response data type.\r\n */\r\ndeclare interface FetchRequestOptions {\r\n    method?: HttpMethod,\r\n    headers?: Headers,\r\n    credentials?: \"omit\" | \"same-origin\" | \"include\",\r\n    mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n    cache?: \"default\" | \"force-cache\" | \"no-cache\" | \"no-store\" | \"only-if-cached\" | \"reload\",\r\n    integrity?: string,\r\n    timeOut?: number,\r\n    contentType?: string,\r\n    requestDataConvert?: \"form-data\" | \"record\",\r\n    responseDataType?: 'json' | 'text',\r\n}\r\n\r\ndeclare type DataType = Record<string, any> | FormData | Array<any> | string | number | boolean\r\n\r\n/**\r\n * Interface for callbacks that can be executed at different stages of the fetch request process.\r\n * Includes optional methods for actions post-fetch, pre-fetch, on success, and on error.\r\n */\r\ndeclare interface FetchRequestCallbacks {\r\n    onPostFetch?: (response?: any, status?:number) => any,\r\n    onPreFetch?: (data?: any) => any,\r\n    onSuccess?: (response: any) => void,\r\n    onError?: (error: Error, status: number) => void,\r\n}\r\n\r\n/**\r\n * Type definition for the main fetch request configuration.\r\n * Includes the request URI, optional data, submitter element, fetch options, and callbacks.\r\n */\r\ndeclare type FetchRequestType = {\r\n    uri: string,\r\n    data?: DataType,\r\n    submitter?: HTMLElement | null,\r\n    options?: FetchRequestOptions,\r\n    callbacks?: FetchRequestCallbacks,\r\n    iteration?:number\r\n}\r\n\r\n\r\n/**\r\n * FetchRequest class designed to simplify the process of making HTTP requests within web applications.\r\n * It encapsulates functionality for sending requests and handling callbacks before and after the request.\r\n */\r\nexport default class FetchRequest {\r\n    private response: Record<string,any>|string;\r\n    private status: number;\r\n    private uri: string;\r\n    private body: any;\r\n    private data: DataType;\r\n    private count: number = 0;\r\n    public static RECURSION_COUNT: number;\r\n\r\n    /**\r\n     * @param options Configuration for the fetch request.\r\n     */\r\n    constructor(private options: FetchRequestType) {\r\n        this.attachSubmitterEvent();\r\n    }\r\n    /**\r\n     * Attaches a click event listener to the submitter element that triggers the form submission.\r\n     * If no submitter is provided, the form submission is triggered immediately.\r\n     */\r\n    private attachSubmitterEvent() {\r\n        this.options.submitter ? this.options.submitter.addEventListener('click', this.submitForm) : this.submitForm();  \r\n    }\r\n    /**\r\n     * Asynchronous method that handles the form submission process.\r\n     * It optionally executes pre-fetch and post-fetch callbacks and makes the HTTP request.\r\n     */\r\n    private submitForm = async () => {\r\n        try {\r\n            if (this.options.callbacks && this.options.callbacks.onPreFetch) { await this.preFetch(); }\r\n            await this.run();\r\n            if (this.options.callbacks && this.options.callbacks.onPostFetch) { await this.postFetch(this.response, this.status); }\r\n            if (this.options.callbacks && this.options.callbacks.onSuccess) {await this.onSuccess(this.status);}\r\n        } catch (error) {\r\n            this.handleError(error, this.status, 'Error executing query : ');\r\n        }\r\n    }\r\n    /**\r\n     * Asynchronous method that performs the HTTP request using the Fetch API.\r\n     * It constructs the request based on the provided options and handles the response.\r\n     */\r\n    private run = async () => {\r\n        let response: Response | null = null;\r\n        try {\r\n            const { uri, data, options } = this.options;\r\n            if (!uri) throw new Error(\"URI is required\");\r\n            this.uri = uri;\r\n            this.data = data\r\n            let finalUri = uri;\r\n            const method = options?.method || 'GET';\r\n            if (method === \"GET\" && data) {\r\n                finalUri = this.buildGetRequestUrl(uri, data);\r\n            } else if (![\"GET\",\"HEAD\",\"OPTIONS\"].includes(method) && data) {\r\n                this.body = this.prepareRequestBody(data);\r\n            }\r\n            const fetchOptions: RequestInit = {\r\n                method: method,\r\n                headers: options?.headers,\r\n                body: this.body,\r\n                credentials: options?.credentials,\r\n                mode: options?.mode,\r\n                cache: options?.cache,\r\n                integrity: options?.integrity,\r\n            };\r\n            if ([\"GET\",\"HEAD\",\"OPTIONS\"].includes(method)) {\r\n                delete fetchOptions.body;\r\n            }\r\n            await this.lazyFatching(finalUri,fetchOptions);\r\n        } catch (error) {\r\n            this.handleError(error, response ? response.status : 0);\r\n        }\r\n    }\r\n    private async lazyFatching(uri:string, fetchOptions:RequestInit): Promise<Response>\r\n    {\r\n        if(this.options){\r\n            const options = this.options.options;\r\n            if(options && options.timeOut){\r\n                const timeOut = options.timeOut;\r\n                const response = await fetch(uri, fetchOptions);\r\n                setTimeout(async() => {\r\n                    await this.handleResult(response,options)\r\n                }, timeOut);\r\n                return;\r\n            }\r\n            const response = await fetch(uri, fetchOptions);\r\n            await this.handleResult(response,options)\r\n        }\r\n    }\r\n    private async handleResult(response:Response,options:FetchRequestOptions){\r\n        this.status = response.status;\r\n        const EXCLUDE_STATUS = [204]\r\n        if (options) {\r\n            const responseDataType = options.responseDataType;\r\n            if (responseDataType) {\r\n                if(!EXCLUDE_STATUS.includes(this.status))\r\n                    try {\r\n                        this.response = responseDataType === \"text\" ? await response.text() : await response.json();   \r\n                    } catch (error) {\r\n                        try{\r\n                            this.response = await response.json()\r\n                        }catch(error){\r\n                            this.response = await response.text()\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n        if(this.options.callbacks?.onError && !EXCLUDE_STATUS.includes(this.status) && !response.ok){\r\n            this.options.callbacks.onError(new Error(typeof this.response === \"string\" ? this.response : (this.response.message ? this.response.message : \"Fetch Request Error\")), response.status)\r\n        }\r\n    }\r\n    /**\r\n     * Executes the pre-fetch callback, allowing for data modification before the request is sent.\r\n     */\r\n    private preFetch = async () => {\r\n        if (typeof this.options.callbacks.onPreFetch === 'function') {\r\n            let data = await this.options.callbacks.onPreFetch(this.options.data);\r\n            if (data) {\r\n                this.options.data = data.hasOwnProperty('data') ? data.data : data;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Executes the post-fetch callback, allowing for actions to be taken after the request has been processed.\r\n     * @param response The response from the fetch request.\r\n     * @param status The HTTP status code of the response.\r\n     */\r\n    private postFetch = async (response: Record<string,any>|string, status: number) => {\r\n        if (this.options.submitter instanceof HTMLButtonElement) {\r\n            this.options.submitter.removeAttribute('disabled');\r\n        }\r\n        return this.options.callbacks.onPostFetch ? this.options.callbacks.onPostFetch(response, status) : undefined;\r\n    }\r\n    private onSuccess = async (status: number) => {\r\n        if (this.options.callbacks?.onSuccess && SUCCESS_HTTP_CODES.includes(status)) {\r\n            this.options.callbacks.onSuccess(this.response);\r\n        }\r\n    }\r\n    /**\r\n     * Repeats the execution of the current query\r\n     * @experimental This method is experimental. Its API may change without notice\r\n     * @param  data\r\n     */\r\n    public async recursion(data?:Record<string,any>|FormData)\r\n    {\r\n        if(this.options.iteration){\r\n            if(this.count < this.options.iteration){\r\n                if(data)this.options.data = Object.assign(this.data,data);\r\n                await this.run();\r\n                this.count++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Constructs the URL for a GET request by appending query parameters.\r\n     * @param uri The base URI for the request.\r\n     * @param data The data to be sent as query parameters.\r\n     * @returns The final URI with query parameters.\r\n     */\r\n    private buildGetRequestUrl(uri: string, data: DataType): string {\r\n        const url = new URL(uri, window.location.origin);\r\n        const params = new URLSearchParams();\r\n        if (data instanceof FormData) {\r\n            for (let [key, value] of data.entries()) {\r\n                if (typeof value === 'string') {\r\n                    params.append(key, value);\r\n                }\r\n            }\r\n        }else if (typeof data === 'object' && !Array.isArray(data)) {\r\n            for (let [key, value] of Object.entries(data)) {\r\n                params.append(key, value);\r\n            }\r\n        }else if (Array.isArray(data)){\r\n            for (let i = 0; i < data.length; i++) {\r\n                params.append(`${i}`, `${data[i]}`);\r\n            }\r\n        }else{\r\n            params.append(\"data\",`${data}`)\r\n        }\r\n        url.search = params.toString();\r\n        return url.toString();\r\n    }\r\n    /**\r\n     * Prepares the request body based on the specified data type.\r\n     * @param data The data to be sent in the request body.\r\n     * @returns The prepared request body.\r\n     */\r\n    private prepareRequestBody(data: DataType) {\r\n        if (this.options.options?.requestDataConvert === \"form-data\") {\r\n            if(data instanceof FormData)return data;\r\n            if(Array.isArray(data))\r\n                return this.convertArrayToFormData(data);\r\n            if(typeof data === \"number\" || typeof data === \"string\" || typeof data === \"boolean\")\r\n                return this.convertPrimaryDataToFormData(data);\r\n            return this.convertObjectToFormData(data);\r\n        } else if (this.options.options?.requestDataConvert === \"record\") {\r\n            if(Array.isArray(data))\r\n                return this.convertArrayToRecord(data);\r\n            if(typeof data === \"number\" || typeof data === \"string\" || typeof data === \"boolean\")\r\n                return this.convertPrimaryDataToRecord(data);\r\n            return JSON.stringify(data);\r\n        }\r\n        return this.stringify(data)\r\n    }\r\n    private stringify(data:any){\r\n        for (const key in data) {\r\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\r\n                if(typeof data[key] === \"object\")\r\n                {data[key] = JSON.stringify(data[key]);}\r\n            }\r\n        }\r\n        return data\r\n    }\r\n    private convertArrayToFormData(data: any[]) {\r\n        const formData = new FormData()\r\n        for (let i = 0; i < data.length; i++) {\r\n            if(Array.isArray(data[i]) || typeof data[i] === \"object\")\r\n                formData.set(`${i}`,JSON.stringify(data[i]))\r\n            else{formData.set(`${i}`,`${data[i]}`)}\r\n        }\r\n        return formData;\r\n    }\r\n    private convertArrayToRecord(data: any[]) {\r\n        const record = {}\r\n        for (let i = 0; i < data.length; i++) {\r\n            record[i] = data[i]\r\n        }\r\n        return JSON.stringify(record);\r\n    }\r\n    private convertPrimaryDataToFormData(data:number|string|boolean){\r\n        const formData = new FormData()\r\n        formData.set(\"data\",`${data}`)\r\n        return formData\r\n    }\r\n    private convertPrimaryDataToRecord(data: string | number | boolean) {\r\n        return JSON.stringify({data})\r\n    }\r\n    /**\r\n     * Converts an object to FormData.\r\n     * @param data The data object to convert.\r\n     * @returns The FormData representation of the data.\r\n     */\r\n    private convertObjectToFormData(data: Record<any, any>): FormData {\r\n        const formData = new FormData();\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            if(Array.isArray(value) || typeof value === \"object\")\r\n                formData.append(key,JSON.stringify(value))\r\n            else{formData.append(key, value)}\r\n        });\r\n        return formData;\r\n    }\r\n    /**\r\n     * returns the response sent by the server, null if nothing was sent\r\n     */\r\n    public get RESPONSE(){\r\n        return this.response ? this.response : null\r\n    }\r\n    /**\r\n     * Handles errors that occur during the fetch request process.\r\n     * Logs the error and executes the onError callback if provided.\r\n     * @param error The error that occurred.\r\n     * @param status Optional HTTP status code related to the error.\r\n     * @param message Optional custom error message.\r\n     */\r\n    private handleError(error: any, status?: number, message: string = 'Fetch Request Error: ') {\r\n        console.error(message, error);\r\n        if (this.options.callbacks?.onError) {\r\n            this.options.callbacks.onError(error, status || 0);\r\n        }\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","_regeneratorRuntime","e","t","r","n","i","a","iterator","c","asyncIterator","u","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","args","arguments","apply","err","undefined","_defineProperties","target","props","descriptor","_toPropertyKey","_defineProperty","toPrimitive","String","Number","_toPrimitive","SUCCESS_HTTP_CODES","FetchRequest","Constructor","options","_this","instance","_classCallCheck","_callee","_context","callbacks","onPreFetch","preFetch","run","onPostFetch","postFetch","response","status","onSuccess","t0","handleError","_callee2","_this$options","uri","_data","_options2","finalUri","fetchOptions","_context2","data","buildGetRequestUrl","includes","body","prepareRequestBody","headers","credentials","mode","cache","integrity","lazyFatching","_callee3","_data2","_context3","_ref4","_callee4","_context4","submitter","HTMLButtonElement","removeAttribute","_x","_x2","_ref5","_callee5","_this$options$callbac","_context5","_x3","this","attachSubmitterEvent","protoProps","addEventListener","submitForm","_lazyFatching","_callee7","_options3","timeOut","_response","_response2","_this2","_context7","fetch","setTimeout","_callee6","_context6","handleResult","_x4","_x5","_handleResult","_callee8","_this$options$callbac2","EXCLUDE_STATUS","responseDataType","_context8","text","json","t1","t2","onError","ok","message","_x6","_x7","_recursion","_callee9","_context9","iteration","count","assign","_x8","url","URL","window","location","origin","params","URLSearchParams","FormData","_step","_iterator","_createForOfIteratorHelper","entries","_step$value","_slicedToArray","append","Array","isArray","concat","_i","_Object$entries","_Object$entries$_i","search","toString","_this$options$options","_this$options$options2","requestDataConvert","convertArrayToFormData","convertPrimaryDataToFormData","convertObjectToFormData","convertArrayToRecord","convertPrimaryDataToRecord","JSON","stringify","formData","set","record","_ref7","_ref8","_this$options$callbac3","console","staticProps"],"sourceRoot":""}