{"version":3,"file":"tempdata-backend.min.js","mappings":"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","sources":["webpack://@easylibs/tempdata-backend/webpack/universalModuleDefinition","webpack://@easylibs/tempdata-backend/./src/tempdata-backend.ts","webpack://@easylibs/tempdata-backend/../src/fetch-request.ts","webpack://@easylibs/tempdata-backend/@easylibs/transformer/webpack/universalModuleDefinition","webpack://@easylibs/tempdata-backend/@easylibs/transformer/src/transformer.ts","webpack://@easylibs/tempdata-backend/@easylibs/transformer/webpack/startup","webpack://@easylibs/tempdata-backend/webpack/bootstrap","webpack://@easylibs/tempdata-backend/webpack/runtime/node module decorator","webpack://@easylibs/tempdata-backend/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tempdata-backend\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tempdata-backend\"] = factory();\n\telse\n\t\troot[\"tempdata-backend\"] = factory();\n})(self, () => {\nreturn ","import FetchRequest from \"@easylibs/fetch-request\";\r\nimport { Transformer } from \"@easylibs/transformer\";\r\nimport TempData from \"@easylibs/tempdata\";\r\n\r\nexport default class TempDataBackend {\r\n  private _response: any = null;\r\n  /**\r\n   *\r\n   * @param database - base de données\r\n   * @param uri - L'URL de destination où les données du formulaire seront envoyées.\r\n   */\r\n  constructor(private database: TempData, private uri: string) {}\r\n  /**\r\n   * Persists data to the server.\r\n   *\r\n   * @param redirectURL - The URL to redirect to after the data is persisted.\r\n   * @param callback - The callback function to be called after the data is persisted.\r\n   * @returns A promise that resolves when the data is persisted.\r\n   */\r\n  public async persist(\r\n    redirectURL?: string,\r\n    callback: Function = (result: any) => {}\r\n  ): Promise<void> {\r\n    const elements = await this.database.read();\r\n    const promises: any[] | PromiseLike<any[]> = [];\r\n    if (elements instanceof Array && elements.length > 0) {\r\n      for (let i = 0; i < elements.length; i++) {\r\n        ((currentIndex) => {\r\n          promises.push(\r\n            new Promise(async (resolve, reject) => {\r\n              try {\r\n                const data = await this.database.readOne(\r\n                  currentIndex,\r\n                  \"record\"\r\n                );\r\n                if(data){\r\n                  delete data[\"@base64String\"] as any;\r\n                  delete data[\"@id\"] as any;\r\n                }\r\n                resolve(data);\r\n              } catch (error) {\r\n                reject(\"Désolé une probleme est survenu: \" + error);\r\n              }\r\n            })\r\n          );\r\n        })(i);\r\n      }\r\n    }\r\n    const formData = this.normalizeArrayField(await Promise.all(promises));\r\n    new FetchRequest({\r\n      uri: this.uri,\r\n      data: formData,\r\n      options: {\r\n        method: \"POST\",\r\n        responseDataType:\"json\",\r\n        requestDataConvert: \"form-data\",\r\n      },\r\n      callbacks:{\r\n        onSuccess: (response) => {\r\n          this._response = response;\r\n          callback(this._response);\r\n          if (redirectURL) {\r\n            return (window.location.href = redirectURL || \"/\");\r\n          }\r\n        },\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Saves form data to the server.\r\n   *\r\n   * @param data - The data object containing the submiter, callback, redirectUrl, and loader properties.\r\n   * @param data.submiter - The submit button element.\r\n   * @param data.callback - The callback function to be called after the data is saved.\r\n   * @param data.redirectUrl - The URL to redirect to after the data is saved.\r\n   * @param data.loader - The loader HTML content to display while saving the data.\r\n   */\r\n  public save(data: {\r\n    submiter: HTMLElement;\r\n    callback?: Function;\r\n    redirectUrl?: string;\r\n    loader?: string|Function;\r\n    preFetchAction?: Function;\r\n  }) {\r\n    const form =\r\n      (data.submiter.closest(\"form\") as HTMLFormElement) ??\r\n      (document.querySelector(\"form\") as HTMLFormElement);\r\n    data.submiter.addEventListener(\"click\", async (e) => {\r\n      e.preventDefault();\r\n      const isEmpty = await this.database._isEmpty();\r\n      if (true === isEmpty && !form.checkValidity()) {\r\n        return form.reportValidity();\r\n      }\r\n      const innerSubmiter = this.escape(data.submiter.innerHTML);\r\n      if (data.loader) {\r\n        if(typeof data.loader === 'string'){\r\n        data.submiter.innerHTML = data.loader;}\r\n        else{data.loader();}\r\n      }\r\n      if (true === isEmpty && form.checkValidity()) {\r\n        const formData = new FormData(form);\r\n        if(data.preFetchAction){data.preFetchAction(formData);}\r\n        new FetchRequest({\r\n          uri: this.uri,\r\n          data: formData,\r\n          options: {\r\n            method: \"POST\",\r\n            responseDataType:\"json\",\r\n            requestDataConvert: \"form-data\",\r\n          },\r\n          callbacks:{\r\n            onSuccess(response:Record<string,any>) {\r\n              data.submiter.innerHTML = innerSubmiter;\r\n              if(data.callback)data.callback(response);\r\n              if (data.redirectUrl) {\r\n                return (window.location.href = data.redirectUrl);\r\n              }\r\n            },\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      form.setAttribute(\"novalidate\", \"\");\r\n      await this.persist(data.redirectUrl, (response: any) => {\r\n        data.submiter.innerHTML = innerSubmiter;\r\n        data.callback(response);\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * Normalizes an array field into a FormData object.\r\n   * This method takes an array of data objects and normalizes it into a FormData object. It handles files within the data objects by transforming them into Blobs using a BlobTransformer. The resulting FormData object is returned.\r\n   * @param datas - The array of data objects to be normalized.\r\n   * @returns The normalized FormData object.\r\n   */\r\n  protected normalizeArrayField(datas: Array<any>): FormData {\r\n    const transformer = new Transformer.BlobTransformer();\r\n    let index = 0;\r\n    return datas.reduce((result: FormData, data) => {\r\n      const objectsFormData = Object.keys(data).reduce((formData, key) => {\r\n        const files = data[key] as Array<File>;\r\n        if (Array.isArray(files) && files.length > 0) {\r\n          files.forEach((file) => {\r\n            formData.append(key, transformer.fromFile(file), file.name);\r\n          });\r\n        } else {\r\n          formData.set(key, data[key]);\r\n        }\r\n        return formData;\r\n      }, new FormData());\r\n      objectsFormData.forEach((value, key) => {\r\n        result.append(key, value);\r\n      });\r\n      index++;\r\n      return result;\r\n    }, new FormData());\r\n  }\r\n  private escape(str?: string): string {\r\n    if (!str) {\r\n      return \"\";\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.appendChild(document.createTextNode(str));\r\n    return div.innerHTML;\r\n  }\r\n  /**\r\n   * Retourne la réponse du serveur.\r\n   */\r\n  public get response(): any {\r\n    return this._response;\r\n  }\r\n}\r\n",null,"(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"transformer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"transformer\"] = factory();\n\telse\n\t\troot[\"transformer\"] = factory();\n})(self, () => {\nreturn ","function getMimeType(base64String: string, get: string = \"both\"): string {\r\n  const extension = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[1];\r\n  const fileType = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[0];\r\n\r\n  if (\"type\" === get) {\r\n    return fileType;\r\n  }\r\n  if (\"extension\" === get) {\r\n    return extension;\r\n  }\r\n  return fileType + \"/\" + extension;\r\n}\r\n\r\n\r\nexport namespace Transformer {\r\n  export class Base64Transformer {\r\n    protected base64String: string = \"\";\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public toFile(base64String: string, fileName?: string): File {\r\n      this.base64String = base64String;\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteArrays: Array<Uint8Array> = [];\r\n      let _fileName = \"\";\r\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n        const slice = byteCharacters.slice(offset, offset + 512);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n          byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n      }\r\n      const extension = getMimeType(base64String, \"extension\");\r\n      const fileType = getMimeType(base64String, \"type\");\r\n      if (fileName) {\r\n        _fileName = fileName;\r\n      } else {\r\n        _fileName = `tranformed_file.${extension}`;\r\n      }\r\n      return new File(byteArrays, _fileName, {\r\n        type: `${fileType}/${extension}`,\r\n      });\r\n    }\r\n    /**\r\n     * Convertit un objet File en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public fromFile(file: File): Promise<any> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en tableau Uint8Array.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @returns Le tableau Uint8Array résultant.\r\n     */\r\n    public toUint8Array(base64String: string): Uint8Array {\r\n      const binaryString = window.atob(base64String.split(\",\")[1]);\r\n      const { length } = binaryString;\r\n      const bytes = new Uint8Array(length);\r\n      for (let i = 0; i < length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n      }\r\n      return bytes;\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en chaîne base64.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en base64.\r\n     * @returns La chaîne base64 résultante.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array): string {\r\n      let binaryString = \"\";\r\n      for (let i = 0; i < uint8Array.length; i++) {\r\n        binaryString += String.fromCharCode(uint8Array[i]);\r\n      }\r\n      return window.btoa(binaryString);\r\n    }\r\n    /**\r\n     * Convertit un objet Blob en chaîne base64 ou ArrayBuffer.\r\n     * @param blob - Le Blob à convertir.\r\n     * @returns La chaîne base64 ou ArrayBuffer résultante (sous forme de promesse).\r\n     */\r\n    public async fromBlob(blob: Blob): Promise<string | ArrayBuffer> {\r\n      return new Promise<string | ArrayBuffer>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = function () {\r\n          const { result } = reader;\r\n          const base64String = result || \"\";\r\n          resolve(base64String);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    }\r\n  }\r\n  export class BlobTransformer {\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array, contentType?: string): Blob {\r\n      contentType = contentType ?? \"\";\r\n      return new Blob([uint8Array], { type: contentType });\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromFile(file: File): Blob {\r\n      return file.slice(0, file.size, file.type);\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromBase64String(base64String: string, contentType?: string): Blob {\r\n      contentType = contentType || \"\";\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      return new Blob([byteArray], { type: contentType });\r\n    }\r\n  }\r\n\r\n  export class FileTransformer {\r\n    /**\r\n     * Convertit un fichier en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public toBase64(file: File): Promise<unknown> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du fichier.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @param formatString - (Optionnel) Indique si la chaîne base64 est formatée.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromBase64String(\r\n      base64String: string,\r\n      contentType?: string | null,\r\n      fileName?: string | null,\r\n      formatString: boolean = true\r\n    ): File {\r\n      contentType = contentType || \"\";\r\n      const fileInfo = formatString ? base64String.split(\",\")[1] : base64String;\r\n      const byteCharacters = window.atob(fileInfo);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      const blob = new Blob([byteArray], { type: contentType });\r\n      fileName = fileName || \"image\";\r\n      return new File([blob], fileName, { type: contentType });\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet File.\r\n     * @param uint8Array - Le tableau Uint8Array.\r\n     * @param mimeType - Le type MIME du fichier.\r\n     * @param fileName - Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromUint8Array(\r\n      uint8Array: Uint8Array,\r\n      mimeType: string,\r\n      fileName: string\r\n    ): File {\r\n      return new File(uint8Array as any, fileName, { type: mimeType });\r\n    }\r\n  }\r\n  export class FormDataTransformer {\r\n    private _data: object | undefined;\r\n    constructor(data: object | FormData) {\r\n      this._data = data;\r\n    }\r\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\r\n    public transform(): FormData {\r\n      const formData = new FormData();\r\n      if (typeof this._data === \"object\") {\r\n        let data = this._data as any;\r\n        try {\r\n          for (const key in this._data) {\r\n            if (this._data.hasOwnProperty(key)) {\r\n              formData.append(key, data[key]);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return formData;\r\n    }\r\n    /**\r\n     * Revertit un objet FormData en objet JavaScript.\r\n     * @returns L'objet JavaScript résultant.\r\n     */\r\n    public reverse(): object {\r\n      let elementObject: object = {};\r\n      if (this._data instanceof FormData) {\r\n        try {\r\n          const tempObject: any = {};\r\n          this._data.forEach((value, key) => {\r\n            tempObject[key] = value;\r\n          });\r\n          elementObject = { ...tempObject };\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return elementObject;\r\n    }\r\n    /**\r\n     * Option de transformation spécifique.\r\n     * @param option - L'option de transformation ('onlyobject', 'onlyformdata', 'auto').\r\n     * @returns L'objet ou le FormData résultant en fonction de l'option spécifiée.\r\n     */\r\n    public option(option: string) {\r\n      if (option === \"onlyobject\") {\r\n        if (this._data instanceof FormData) {\r\n          return this.reverse();\r\n        }\r\n        return this._data;\r\n      }\r\n      if (option === \"onlyformdata\") {\r\n        if (this._data instanceof FormData) {\r\n          return this._data;\r\n        }\r\n        return this.transform();\r\n      }\r\n      if (option === \"auto\") {\r\n        return this.auto();\r\n      }\r\n    }\r\n    private auto() {\r\n      if (this._data instanceof FormData) {\r\n        return this.reverse();\r\n      } else {\r\n        return this.transform();\r\n      }\r\n    }\r\n  }\r\n}\r\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/transformer.ts\"](0, __webpack_exports__);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(508);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","database","uri","_response","persist","redirectURL","callback","result","elements","this","read","promises","Array","length","i","currentIndex","push","Promise","resolve","reject","data","readOne","error","formData","normalizeArrayField","all","options","method","responseDataType","requestDataConvert","callbacks","onSuccess","response","window","location","href","save","form","submiter","closest","document","querySelector","addEventListener","e","preventDefault","isEmpty","_isEmpty","checkValidity","reportValidity","innerSubmiter","escape","innerHTML","loader","FormData","preFetchAction","redirectUrl","setAttribute","datas","transformer","Transformer","BlobTransformer","reduce","Object","keys","key","files","isArray","forEach","file","append","fromFile","name","set","value","str","div","createElement","appendChild","createTextNode","FetchRequest","_this","_classCallCheck","submitForm","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","onPreFetch","preFetch","run","onPostFetch","postFetch","status","t0","handleError","undefined","stop","_callee2","_a","_this$options","_options","finalUri","body","fetchOptions","_context2","Error","buildGetRequestUrl","prepareRequestBody","headers","credentials","mode","cache","integrity","fetch","sent","text","json","ok","t1","_callee3","_context3","hasOwnProperty","_callee4","_context4","submitter","HTMLButtonElement","removeAttribute","abrupt","attachSubmitterEvent","url","URL","origin","params","URLSearchParams","_step","_iterator","_createForOfIteratorHelper","entries","s","n","done","_step$value","_slicedToArray","err","f","_i","_Object$entries","_Object$entries$_i","search","toString","_b","JSON","stringify","convertObjectToFormData","_ref","_ref2","message","arguments","console","onError","t","r","prototype","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","_sent","dispatchException","TypeError","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","setPrototypeOf","__proto__","awrap","async","reverse","pop","charAt","slice","rval","handle","complete","finish","delegateYield","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","toPrimitive","String","Number","_toPrimitive","getMimeType","base64String","get","extension","split","fileType","Base64Transformer","fileName","byteCharacters","atob","byteArrays","_fileName","offset","byteNumbers","charCodeAt","byteArray","Uint8Array","concat","File","reader","FileReader","onloadend","onerror","readAsDataURL","binaryString","bytes","uint8Array","fromCharCode","btoa","blob","contentType","Blob","size","FileTransformer","fileInfo","mimeType","FormDataTransformer","_data","elementObject","tempObject","assign","option","transform","auto","__webpack_exports__","__webpack_modules__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","nmd","paths","children"],"sourceRoot":""}