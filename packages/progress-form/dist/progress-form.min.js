!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("progress-form",[],t):"object"==typeof exports?exports["progress-form"]=t():e["progress-form"]=t()}(self,(()=>(()=>{"use strict";var e={547:(e,t)=>{function r(e){return Array.from(e.querySelectorAll("button, select, input, a, textarea"))}Object.defineProperty(t,"__esModule",{value:!0}),t.getFocusableElements=t.focusInBlock=void 0,t.focusInBlock=function(e,t){e.preventDefault();const s=r(t);let n=s.findIndex((e=>e===t.querySelector(":focus")));!0===e.shiftKey?n--:n++,console.log({focusables:s,block:t}),n>=s.length&&(n=0),n<0&&(n=s.length-1),s[n].focus()},t.getFocusableElements=r}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,r),o.exports}var s={};return(()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0});const t=r(547);let n=null;e.default=class{constructor(e=!0){this.translateX=-530,this.fieldsetLength=0,this.enableDefaultCssStyle=e,this.translateX=this.translateX}run(e,r){var s;const o=e.form.querySelectorAll("fieldset"),l=null===(s=e.progress)||void 0===s?void 0:s.progressElement;let i=1,d=o.length,a=0;this.fieldsetLength=o.length;const{progress:c}=this;this.isValid(e.form),o&&o.length>1&&o.forEach(((r,s)=>{var o,u;const f=r.querySelector("[next__btn]"),h=r.querySelector("[prev__btn]");let y=null!==(o=e.translateX)&&void 0!==o?o:this.translateX;const g=null!==(u=e.targetMarginWidth)&&void 0!==u?u:0;let p=y*i-g;a=y*i+Math.abs(2*y);const b=c*(s+2),v=s>1?c*s:c;if(n=r,r.classList.add(`fieldset${s}`),0===s){r.querySelectorAll("input:not([type='hidden'],[readonly]), textarea")[s].focus(),this.setFocusInFieldSet(n)}this.next(f,i,p,l,b),i++,0===s&&(0,t.getFocusableElements)(n),this.prev(h,d,a,l,v),d--})),l&&(l.style.width=`${c}%`),this.enableDefaultCssStyle&&this.cssStyle(e,o,r)}next(e,r,s,o,l){this.fieldsetTargetArray;e&&e.addEventListener("click",(e=>{e.preventDefault();const s=document.querySelector(".fieldset"+(r-1));this.isValidFieldset(s)&&(n=document.querySelector(`.fieldset${r}`),n&&(this.setFocusInFieldSet(n),(0,t.getFocusableElements)(n)),o&&(o.style.width=`${null!=l?l:0}%`))}))}prev(e,r,s,o,l){this.fieldsetTargetArray;e&&e.addEventListener("click",(e=>{e.preventDefault(),n=document.querySelector(`.fieldset${r}`),n&&(this.setFocusInFieldSet(n),(0,t.getFocusableElements)(n)),o&&(o.style.width=`${null!=l?l:0}%`)}))}get progress(){return 100/this.fieldsetLength}setFocusInFieldSet(e){window.addEventListener("keydown",(r=>{"Tab"===r.key&&null!==e&&(0,t.focusInBlock)(r,e)}))}isValidFieldset(e){if(e){const t=Array.from(e.querySelectorAll("input, select, textarea"));if(t)for(const e of t)if(!e.checkValidity())return e.reportValidity(),!1}return!0}get fieldsetTargetArray(){let e=[];if(this.fieldsetLength>0)for(let t=0;t<this.fieldsetLength;t++)e.push(`.fieldset${t}`);return e}fieldsetAnimation(e,t){for(let r=0;r<e.length;r++){document.querySelector(`${e[r]}`).style.transform=`translateX(${t})`}}cssStyle(e,t,r){const s=e.form.querySelector("[fieldset__parent]");try{if(!s)throw new Error("The element with the attribute [fieldset__parent] not found in your form");const n=s.querySelector("[fieldset__container]");if(!n)throw new Error("The element with the attribute [fieldset__container] not found in your fieldset__parent");const o={height:"100%",overflow:"hidden",width:"530px"},l={width:"545px",height:"100%",boxSizing:"border-box"},i={width:"1800px",height:"100%",overflow:"hidden",display:"flex",justifyContent:"space-between"},d={width:" 25%",transition:"margin-left 0.4s ease-in-out",backgroundColor:"#FFFFFF",justifyContent:"space-between",alignItems:"center",display:"flex",flexDirection:"column",padding:"30px",border:"none",boxShadow:"0 0 5px rgba(255, 255, 255, 0.7137254902)",borderRadius:"3px"},a=Object.assign({},l,null==r?void 0:r.form),c=Object.assign({},o,null==r?void 0:r.fieldsetParent),u=Object.assign({},i,null==r?void 0:r.fieldsetContainer),f=Object.assign({},d,null==r?void 0:r.fieldset);Object.assign(e.form.style,a),Object.assign(s.style,c),Object.assign(n.style,u),t.forEach(((e,t)=>{Object.assign(e.style,f),e.classList.add(`fieldset${t}`)}));t[0].getBoundingClientRect().width;const h=e.fieldsetMargingWidth||60,y=t[0].offsetWidth,g=this.fieldsetLength*y+h;n.style.width=`${g}px`}catch(e){console.error(e)}}isValid(e){try{if(!e)throw new Error("Le formulaire est invalide");const t=e.querySelectorAll("[next__btn]"),r=e.querySelector("[prev__btn]");if(!e.querySelectorAll("fieldset"))throw new Error("Aucune section de formulaire trouvée.");if(!t)throw new Error('Aucun bouton "suivant" trouvé !');if(!r)throw new Error("Aucun bouton 'précédent' trouvé !")}catch(e){console.error(e)}}}})(),s})()));
//# sourceMappingURL=progress-form.min.js.map