{"version":3,"file":"progress-form.min.js","mappings":"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","sources":["webpack://@easylibs/progress-form/webpack/universalModuleDefinition","webpack://@easylibs/progress-form/./src/scripts/focus-in-block.ts","webpack://@easylibs/progress-form/webpack/bootstrap","webpack://@easylibs/progress-form/./src/progress-form.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"progress-form\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"progress-form\"] = factory();\n\telse\n\t\troot[\"progress-form\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * Gère le focus clavier sur les éléments d'un bloc HTML spécifié.\r\n * @param key - L'événement clavier qui a déclenché la fonction.\r\n * @param block - L'élément HTML qui représente le bloc sur lequel on souhaite gérer le focus.\r\n */\r\nexport function focusInBlock(key:KeyboardEvent, block:HTMLElement):void\r\n{\r\n    key.preventDefault();\r\n    const focusables = getFocusableElements(block);\r\n    let index = focusables.findIndex(f => f === block.querySelector(':focus'));\r\n    (key.shiftKey === true) ? index-- : index++;\r\n    console.log({focusables,block})\r\n    if (index >= focusables.length) { index = 0; }\r\n    if (index < 0) { index = focusables.length - 1; }\r\n    const FIELD = focusables[index] as HTMLElement;\r\n    FIELD.focus();\r\n}\r\n/**\r\n * Récupère tous les éléments focusables dans un bloc HTML spécifié.\r\n * @param block - L'élément HTML qui représente le bloc contenant les éléments focusables.\r\n * @returns Un tableau d'éléments focusables présents dans le bloc.\r\n */\r\nexport function getFocusableElements(block:HTMLElement):Element[]\r\n{\r\n    let focusableSelector = \"button, select, input, a, textarea\";\r\n    return Array.from(block.querySelectorAll(focusableSelector));\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { focusInBlock, getFocusableElements } from \"./scripts/focus-in-block\";\r\n\r\nlet fieldSetElement:HTMLElement|null = null;\r\n// window.addEventListener('keydown', (e) => {\r\n//     if (e.key === 'Tab' && fieldSetElement !== null) {\r\n//         return focusInBlock(e, fieldSetElement);\r\n//     }\r\n// })\r\ndeclare type ProgressFormType = {\r\n    form:HTMLFormElement,\r\n    fieldsetContainer:HTMLElement,\r\n    progress?:{\r\n        progressElement?:HTMLElement,\r\n    }\r\n    translateX?:number,\r\n    targetMarginWidth?:number,\r\n    fieldsetMargingWidth?:number\r\n}\r\ndeclare interface StyleOptions {\r\n    form?: {\r\n        width?:string ,\r\n        height?:string ,\r\n        boxSizing?:string ,\r\n    };\r\n    fieldsetContainer?: {\r\n        width?:string ,\r\n        height?:string ,\r\n        overflow?:string ,\r\n        display?:string ,\r\n        justifyContent?:string ,\r\n        alignItems?:string,\r\n    };\r\n    fieldset?: {\r\n        width?:string ,\r\n        transition?:string ,\r\n        backgroundColor?:string ,\r\n        justifyContent?:string ,\r\n        alignItems?:string ,\r\n        display?:string ,\r\n        flexDirection?:string ,\r\n        padding?:string ,\r\n        border?:string ,\r\n        boxShadow?:string ,\r\n        borderRadius?:string ,\r\n    };\r\n}\r\n\r\nexport default class ProgressForm\r\n{\r\n    protected element:HTMLElement|null = null;\r\n    protected targetWidth:number = -625;\r\n    public fieldsetLength:number = 0;\r\n    enableDefaultCssStyle: boolean;\r\n    constructor(enableDefaultCssStyle:boolean = true){\r\n        this.enableDefaultCssStyle  = enableDefaultCssStyle\r\n    }\r\n    public run<T extends ProgressFormType>(params:T,styleOptions?: StyleOptions)\r\n    {\r\n        const fieldSets = params.form.querySelectorAll('fieldset');\r\n        const progressElement = params.progress?.progressElement;\r\n        let nextIndex = 1;\r\n        let prevIndex = fieldSets.length;\r\n        let prevTranslateX = 0;\r\n        this.fieldsetLength = fieldSets.length;\r\n        const {progress} = this;\r\n        if(fieldSets && fieldSets.length > 1){\r\n            fieldSets.forEach((fieldSet,i) => {\r\n                const nextButton = fieldSet.querySelector(\".next-btn\") as HTMLElement;\r\n                const prevButton = fieldSet.querySelector('.prev-btn') as HTMLElement;\r\n                let translateX = params.translateX as number;\r\n                const targetMarginWidth = params.targetMarginWidth ?? 0;\r\n                let nextTranslateX = (translateX * nextIndex) - targetMarginWidth;\r\n                prevTranslateX  = (translateX * nextIndex) + Math.abs(translateX * 2);\r\n                const nextProgress = progress * (i + 2);\r\n                const prevProgress = i > 1 ? progress * i : progress;\r\n                fieldSetElement = fieldSet;\r\n                fieldSet.classList.add(`fieldset${i}`);\r\n                if(i === 0){\r\n                    const fields = fieldSet.querySelectorAll('input, select, textarea') as NodeListOf<HTMLInputElement>;\r\n                    fields[i].focus();\r\n                    this.setFocusInFieldsest(fieldSetElement);\r\n                }\r\n                this.next(nextButton, nextIndex, nextTranslateX, progressElement, nextProgress);\r\n                nextIndex++;\r\n                if(i === 0){getFocusableElements(fieldSetElement);}\r\n                this.prev(prevButton, prevIndex, prevTranslateX, progressElement, prevProgress);\r\n                prevIndex--;\r\n                \r\n            }); \r\n        }\r\n        if(progressElement){progressElement.style.width = `${progress}%`;}\r\n        if(this.enableDefaultCssStyle)\r\n        {this.cssStyle(params,fieldSets,styleOptions)}\r\n\r\n    }\r\n    protected next(nextButton: HTMLElement, nextIndex: number, nextTranslateX:number, progressElement?:HTMLElement,nextProgress?:number)\r\n    {\r\n        \r\n        const targets = this.fieldsetTargetArray;\r\n        if(nextButton){\r\n            nextButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                const fieldSet = document.querySelector(`.fieldset${nextIndex - 1}`) as HTMLElement;\r\n                const isValid = this.isValidFieldset(fieldSet);\r\n                if(isValid){\r\n                    fieldSetElement = document.querySelector(`.fieldset${nextIndex}`) as HTMLElement;\r\n                    if(fieldSetElement)\r\n                    {\r\n                        this.setFocusInFieldsest(fieldSetElement);\r\n                        getFocusableElements(fieldSetElement);\r\n                    }\r\n                    // anime({\r\n                    //     targets: targets,\r\n                    //     translateX: nextTranslateX,\r\n                    //     easing: 'easeInOutExpo'\r\n                    // });\r\n                    \r\n                    if(progressElement)\r\n                    {progressElement.style.width = `${nextProgress??0}%`;}\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    protected prev(prevButton:HTMLElement, prevIndex:number, prevTranslateX:number ,progressElement?:HTMLElement, prevProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        if(prevButton){\r\n            prevButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                fieldSetElement = document.querySelector(`.fieldset${prevIndex}`);\r\n                if(fieldSetElement)\r\n                {\r\n                    this.setFocusInFieldsest(fieldSetElement);\r\n                    getFocusableElements(fieldSetElement);\r\n                }\r\n                // anime({\r\n                //     targets: targets,\r\n                //     translateX: prevTranslateX,\r\n                //     easing: 'easeInOutExpo'\r\n                // });\r\n                if(progressElement)\r\n                {progressElement.style.width = `${prevProgress??0}%`;}\r\n             });\r\n        }\r\n    }\r\n    public get progress()\r\n    {\r\n        return 100 / this.fieldsetLength;\r\n    }\r\n    private setFocusInFieldsest(fieldSet:HTMLElement)\r\n    {\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Tab' && fieldSet !== null){\r\n                focusInBlock(e, fieldSet);\r\n            }\r\n        },{once : true})\r\n    }\r\n    protected isValidFieldset(fieldSet: HTMLElement): boolean\r\n    {\r\n        if(fieldSet){\r\n            const fields =  Array.from(fieldSet.querySelectorAll('input, select, textarea'));\r\n            if(fields){\r\n                for(const field of fields as HTMLInputElement[]){\r\n                    if(!field.checkValidity()){\r\n                        field.reportValidity();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    protected get fieldsetTargetArray(): string[]\r\n    {\r\n        let fieldsetTargetArray = []\r\n        if(this.fieldsetLength > 0){\r\n            for(let i = 0; i < this.fieldsetLength; i++) {\r\n                fieldsetTargetArray.push(`.fieldset${i}`);\r\n            }\r\n        }\r\n        return fieldsetTargetArray;\r\n    }\r\n    protected fieldsetAnimation(targets: string[], translateX:number)\r\n    {\r\n        for (let i = 0; i < targets.length; i++) {\r\n            const fieldset = document.querySelector(`${targets[i]}`) as HTMLFieldSetElement;\r\n            fieldset.style.transform = `translateX(${translateX})`;\r\n        }\r\n    }\r\n    protected cssStyle<T extends ProgressFormType>(\r\n        params:T,\r\n        fieldSets:NodeListOf<HTMLFieldSetElement>,\r\n        styleOptions?:StyleOptions)\r\n    {\r\n        const defaultFormStyle = {\r\n            width: '545px',\r\n            height: '100%',\r\n            boxSizing: 'border-box',\r\n        };\r\n        \r\n        const defaultFieldsetContainerStyle = {\r\n            width: `1800px`,\r\n            height: '100%',\r\n            overflow: 'hidden',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n        };\r\n\r\n        const defaultFieldsetStyle = {\r\n            width: ' 25%',\r\n            transition: 'margin-left 0.4s ease-in-out',\r\n            backgroundColor: '#FFFFFF',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            padding: '30px',\r\n            border: 'none',\r\n            boxShadow: '0 0 5px rgba(255, 255, 255, 0.7137254902)',\r\n            borderRadius: '3px',\r\n        };\r\n    \r\n        // Fusionnez les styles par défaut avec les styles personnalisés\r\n        const formStyle = Object.assign({}, defaultFormStyle, styleOptions?.form);\r\n        const fieldsetContainerStyle = Object.assign(\r\n            {},\r\n            defaultFieldsetContainerStyle,\r\n            styleOptions?.fieldsetContainer\r\n        );\r\n        const fieldsetStyle = Object.assign({}, defaultFieldsetStyle, styleOptions?.fieldset);\r\n    \r\n        Object.assign(params.form.style, formStyle);\r\n        Object.assign(params.fieldsetContainer.style, fieldsetContainerStyle);\r\n        fieldSets.forEach((fieldSet, index) => {\r\n            Object.assign(fieldSet.style, fieldsetStyle);\r\n            fieldSet.classList.add(`fieldset${index}`);\r\n        });\r\n        const tempSelectWidth = fieldSets[0].getBoundingClientRect().width;\r\n        const fieldsetMargingWidth = params.fieldsetMargingWidth || 60;\r\n        const fieldSetWidth = fieldSets[0].offsetWidth;\r\n        const fieldsetContainerWidth = this.fieldsetLength * fieldSetWidth + fieldsetMargingWidth;\r\n        params.fieldsetContainer.style.width = `${fieldsetContainerWidth}px`;\r\n    }\r\n}"],"names":["root","factory","exports","module","define","amd","self","getFocusableElements","block","Array","from","querySelectorAll","key","preventDefault","focusables","index","findIndex","f","querySelector","shiftKey","console","log","length","focus","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","fieldSetElement","constructor","enableDefaultCssStyle","element","targetWidth","fieldsetLength","this","run","params","styleOptions","fieldSets","form","progressElement","progress","nextIndex","prevIndex","prevTranslateX","forEach","fieldSet","i","nextButton","prevButton","translateX","targetMarginWidth","nextTranslateX","Math","abs","nextProgress","prevProgress","classList","add","setFocusInFieldsest","next","prev","style","width","cssStyle","fieldsetTargetArray","addEventListener","e","document","isValidFieldset","window","focusInBlock","once","fields","field","checkValidity","reportValidity","push","fieldsetAnimation","targets","transform","defaultFieldsetContainerStyle","height","overflow","display","justifyContent","formStyle","Object","assign","boxSizing","fieldsetContainerStyle","fieldsetContainer","fieldsetStyle","transition","backgroundColor","alignItems","flexDirection","padding","border","boxShadow","borderRadius","fieldset","getBoundingClientRect","fieldsetMargingWidth","fieldSetWidth","offsetWidth","fieldsetContainerWidth"],"sourceRoot":""}