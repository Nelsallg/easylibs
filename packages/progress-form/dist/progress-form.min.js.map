{"version":3,"file":"progress-form.min.js","mappings":"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","sources":["webpack://@easylibs/progress-form/webpack/universalModuleDefinition","webpack://@easylibs/progress-form/webpack/bootstrap","webpack://@easylibs/progress-form/webpack/runtime/define property getters","webpack://@easylibs/progress-form/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/progress-form/webpack/runtime/make namespace object","webpack://@easylibs/progress-form/./src/scripts/css-style.ts","webpack://@easylibs/progress-form/./src/scripts/focus-in-block.ts","webpack://@easylibs/progress-form/./src/progress-form.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"progress-form\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"progress-form\"] = factory();\n\telse\n\t\troot[\"progress-form\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { StyleOptions } from \"./interfaces\";\r\n\r\ndeclare type animationType = { targets: (Element | string)[], translateX: number, form:HTMLFormElement,isAnimate?:boolean };\r\n\r\nexport function cssStyle(\r\n  form:HTMLFormElement,\r\n  fieldSets: NodeListOf<HTMLFieldSetElement>,\r\n  translateX: number,\r\n  fieldsetLength: number,\r\n  fieldsetMarginWidth: number,\r\n  styleOptions?: StyleOptions,\r\n) {\r\n  try {\r\n    const fieldSetParent = form.querySelector(\"[fieldset__parent]\") as HTMLElement;\r\n    const fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\") as HTMLElement;\r\n    const fieldsetWidth = Math.abs(translateX);\r\n    const fieldsetContainerWidth =\r\n      fieldsetLength * fieldsetWidth + fieldsetMarginWidth;\r\n    const defaultFieldSetParentStyle = {\r\n      height: \"100%\",\r\n      overflow: \"hidden\",\r\n      width: `${fieldsetWidth}px`,\r\n    };\r\n    const defaultFormStyle = {\r\n      width: `${fieldsetWidth}px`,\r\n      height: \"100%\",\r\n      boxSizing: \"border-box\",\r\n    };\r\n\r\n    const defaultFieldsetContainerStyle = {\r\n      width: `${fieldsetContainerWidth}px`,\r\n      height: \"100%\",\r\n      overflow: \"hidden\",\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n    };\r\n\r\n    const defaultFieldsetStyle = {\r\n      width: `${fieldsetWidth}px`,\r\n      transition: \"margin-left 0.4s ease-in-out\",\r\n      backgroundColor: \"#FFFFFF\",\r\n      justifyContent: \"space-between\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      padding: \"30px\",\r\n      border: \"none\",\r\n      boxShadow: \"0 0 5px rgba(255, 255, 255, 0.7137254902)\",\r\n      borderRadius: \"3px\",\r\n    };\r\n\r\n    // Fusionnez les styles par défaut avec les styles personnalisés\r\n    const formStyle = Object.assign({}, defaultFormStyle, styleOptions?.form);\r\n    const fieldSetParentStyle = Object.assign(\r\n      {},\r\n      defaultFieldSetParentStyle,\r\n      styleOptions?.fieldsetParent\r\n    );\r\n    const fieldsetContainerStyle = Object.assign(\r\n      {},\r\n      defaultFieldsetContainerStyle,\r\n      styleOptions?.fieldsetContainer\r\n    );\r\n    const fieldsetStyle = Object.assign(\r\n      {},\r\n      defaultFieldsetStyle,\r\n      styleOptions?.fieldset\r\n    );\r\n\r\n    Object.assign(form.style, formStyle);\r\n    Object.assign(fieldSetParent.style, fieldSetParentStyle);\r\n    Object.assign(fieldsetContainer.style, fieldsetContainerStyle);\r\n    fieldSets.forEach((fieldSet, index) => {\r\n      Object.assign(fieldSet.style, fieldsetStyle);\r\n      fieldSet.classList.add(`fieldset${index}`);\r\n    });\r\n    return {fieldSetParentStyle,fieldsetContainerStyle,formStyle,fieldsetStyle}\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nconst lastTranslateXMap = new Map<Element, number>();\r\nexport function anime(options: animationType) {\r\n    options.targets.forEach(target => {\r\n        const element = typeof target === 'string' ? options.form.querySelector(target) : target;\r\n        if (element) {\r\n            const lastTranslateX = lastTranslateXMap.get(element) || 0;\r\n            const translateX = options.translateX;\r\n            const keyframes: Keyframe[] = [\r\n                { transform: `translateX(${lastTranslateX}px)` },\r\n                { transform: `translateX(${translateX}px)` }\r\n            ];\r\n            const _animateOptions: KeyframeAnimationOptions = {\r\n                duration: 1000,\r\n                fill: 'forwards', // L'animation reste appliquée à la fin\r\n                easing: 'cubic-bezier(1, 0, 0, 1)' // Approximation de l'effet d'assouplissement easeInOutExpo\r\n            };\r\n            const _unanimateOptions: KeyframeAnimationOptions = {\r\n              fill: 'forwards',\r\n            };\r\n            if (element.animate) {\r\n                if(options.isAnimate != false)element.animate(keyframes, _animateOptions);\r\n                else{element.animate(keyframes,_unanimateOptions)}\r\n                lastTranslateXMap.set(element, translateX);\r\n            }\r\n        }\r\n    });\r\n}\r\n","/**\r\n * Gère le focus clavier sur les éléments d'un bloc HTML spécifié.\r\n * @param key - L'événement clavier qui a déclenché la fonction.\r\n * @param block - L'élément HTML qui représente le bloc sur lequel on souhaite gérer le focus.\r\n */\r\nexport function focusInBlock(key:KeyboardEvent, block:HTMLElement):void\r\n{\r\n    key.preventDefault();\r\n    const focusables = getFocusableElements(block);\r\n    let index = focusables.findIndex(f => f === block.querySelector(':focus'));\r\n    (key.shiftKey === true) ? index-- : index++;\r\n    if (index >= focusables.length) { index = 0; }\r\n    if (index < 0) { index = focusables.length - 1; }\r\n    const FIELD = focusables[index] as HTMLElement;\r\n    FIELD.focus();\r\n}\r\n/**\r\n * Récupère tous les éléments focusables dans un bloc HTML spécifié.\r\n * @param block - L'élément HTML qui représente le bloc contenant les éléments focusables.\r\n * @returns Un tableau d'éléments focusables présents dans le bloc.\r\n */\r\nexport function getFocusableElements(block:HTMLElement):Element[]\r\n{\r\n    let focusableSelector = \"button, select, input, a, textarea\";\r\n    return Array.from(block.querySelectorAll(focusableSelector));\r\n}","import { cssStyle,anime } from \"./scripts/css-style\";\r\nimport { focusInBlock, getFocusableElements } from \"./scripts/focus-in-block\";\r\nimport { StyleOptions } from \"./scripts/interfaces\";\r\nimport { ProgressFormType, PreventType, ProgressingType, RenderedStyle } from \"./scripts/types\";\r\n\r\nlet fieldSetElement:HTMLElement|null = null;\r\n/**\r\n * ProgressForm represents a class for managing a progressive form.\r\n */\r\nexport default class ProgressForm\r\n{\r\n    private translateX:number;\r\n    private fieldsetLength:number = 0;\r\n    private fieldsetMarginWidth: number;\r\n    private progressOptions: ProgressFormType;\r\n    private progressingData:ProgressingType = {};\r\n    private lastIndex: number;\r\n    private isLazyRun: boolean;\r\n    private lazyFieldsetLength: number;\r\n    private renderedStyle:RenderedStyle;\r\n    private animation: boolean;\r\n    /**\r\n     * @param enableDefaultCssStyle Determines whether the default CSS style should be enabled. Default is true.\r\n     */\r\n    constructor(private form:HTMLFormElement,private enableDefaultCssStyle:boolean = true){}\r\n    /**\r\n     * Retrieves and initializes all data and variables for running\r\n     * @param progressOptions The parameters of the form.\r\n     * @returns \r\n     */\r\n    private init(progressOptions:ProgressFormType)\r\n    {\r\n        this.progressOptions = progressOptions;\r\n        this.animation = progressOptions?.animation\r\n        this.hasValidHTMLStructure(this.form);\r\n        const fieldSets = this.form.querySelectorAll('fieldset');\r\n        this.setTranslateX(fieldSets[0],progressOptions);\r\n        const progressElement = document.querySelector('[__progress__]') as HTMLElement;\r\n        this.fieldsetMarginWidth = progressOptions?.fieldsetMargingWidth ?? 60;\r\n        let nextIndex = 1;\r\n        let prevIndex = this.isLazyRun ? this.lazyFieldsetLength : fieldSets.length;\r\n        let prevTranslateX = 0;\r\n        this.fieldsetLength = this.lastIndex = this.isLazyRun ? this.lazyFieldsetLength : fieldSets.length;\r\n        const {PROGRESS} = this;\r\n        return {\r\n            fieldSets,nextIndex,\r\n            prevTranslateX,PROGRESS,\r\n            prevIndex,progressElement\r\n        }\r\n    }\r\n    /**\r\n     * Executes the progressive form.\r\n     * @param params The parameters of the form.\r\n     * @param styleOptions Style options for the form, fieldsets and fieldsets parent elements.\r\n    */\r\n    public run(progressOptions?:ProgressFormType,styleOptions?: StyleOptions, preventProgress:PreventType = false)\r\n    {\r\n        let {fieldSets,nextIndex,prevTranslateX,PROGRESS,prevIndex,progressElement} = this.init(progressOptions);\r\n        if(fieldSets && !this.isLazyRun && fieldSets.length > 1){\r\n            let translateX = this.translateX - this.fieldsetMarginWidth / this.fieldsetLength;\r\n            const targetMarginWidth = progressOptions?.targetMarginWidth ?? 0;\r\n            fieldSets.forEach((fieldSet,i) => {\r\n                const nextButton = fieldSet.querySelector(\"[__next__]\") as HTMLElement;\r\n                const prevButton = fieldSet.querySelector(\"[__prev__]\") as HTMLElement;\r\n                let nextTranslateX = (translateX * nextIndex) - targetMarginWidth;\r\n                prevTranslateX  = (translateX * nextIndex) + Math.abs(translateX * 2);\r\n                const nextProgress = PROGRESS * (i + 2);\r\n                const prevProgress = i > 1 ? PROGRESS * i : PROGRESS;\r\n                fieldSetElement = fieldSet;\r\n                fieldSet.classList.add(`fieldset${i}`);\r\n                if(i === 0){\r\n                    const fields = fieldSet.querySelectorAll(\"input:not([type='hidden'],[readonly]), textarea\") as NodeListOf<HTMLInputElement>;\r\n                    if(fields && fields.length > 0)fields[i].focus();\r\n                    this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                }\r\n                this.progressingData[`fieldset${i}`] = {\r\n                    '@i':i,\r\n                    '@translateX': i === 0 ? 0 : ( i === 1 ? translateX : nextTranslateX - translateX),\r\n                    '@progress': PROGRESS * (i + 1),\r\n                    '@target':fieldSetElement,\r\n                    next:{i:nextIndex,button:nextButton,translateX:nextTranslateX,progress:nextProgress},\r\n                    prev:{i:i-1,button:prevButton,translateX:prevTranslateX,progress:prevProgress},\r\n                }\r\n                if(preventProgress === false || preventProgress === \"prev\")this.next(nextIndex, nextTranslateX, nextButton, progressElement, nextProgress);\r\n                nextIndex++;\r\n                this.formatProgressingData(i);\r\n                if(i === 0){getFocusableElements(fieldSetElement);}\r\n                if(preventProgress === false || preventProgress === \"next\")this.prev(prevIndex, prevTranslateX, prevButton, progressElement, prevProgress);\r\n                prevIndex--;\r\n                \r\n            }); \r\n        }\r\n        if(progressElement){progressElement.style.width = `${PROGRESS}%`;}\r\n        if(this.enableDefaultCssStyle)\r\n        {this.renderedStyle = cssStyle(this.form,fieldSets,this.translateX,this.fieldsetLength, this.fieldsetMarginWidth,styleOptions)}\r\n    }\r\n    /**\r\n     * \r\n     * @param fieldsetLength \r\n     * @param params The parameters of the form.\r\n     * @param styleOptions Style options for the form, fieldsets and fieldsets parent elements.\r\n     */\r\n    public lazyRun(fieldsetLength:number,progressOptions?:ProgressFormType,styleOptions?: StyleOptions)\r\n    {\r\n        this.isLazyRun = true;\r\n        this.lazyFieldsetLength = fieldsetLength;\r\n        let {fieldSets,nextIndex,prevTranslateX,PROGRESS,progressElement} = this.init(progressOptions);\r\n        let translateX = this.translateX - this.fieldsetMarginWidth / this.fieldsetLength;\r\n        const targetMarginWidth = progressOptions ? progressOptions.targetMarginWidth ?? 0 : 0;\r\n        for (let i = 0; i < this.lazyFieldsetLength; i++) {\r\n            const fieldSet = (i === 0 ? document.querySelector(`fieldset`) : null) as HTMLElement;\r\n            const nextButton = fieldSet?.querySelector(\"[__next__]\") as HTMLElement;\r\n            let nextTranslateX = (translateX * nextIndex) - targetMarginWidth;\r\n            prevTranslateX  = (translateX * nextIndex) + Math.abs(translateX * 2);\r\n            const nextProgress = PROGRESS * (i + 2);\r\n            const prevProgress = i > 1 ? PROGRESS * i : PROGRESS;\r\n            fieldSetElement = fieldSet;\r\n            if(fieldSet){\r\n                fieldSet.classList.add(`fieldset0`);\r\n                fieldSet.focus();\r\n                this.compartmentalizeFocusInFieldset(fieldSet);\r\n            }\r\n            this.progressingData[`fieldset${i}`] = {\r\n                '@i':i,\r\n                '@translateX': i === 0 ? 0 : ( i === 1 ? translateX : nextTranslateX - translateX),\r\n                '@progress': PROGRESS * (i + 1),\r\n                '@target':fieldSetElement,\r\n                next:{i:nextIndex,button:nextButton,translateX:nextTranslateX,progress:nextProgress},\r\n                prev:{i:i-1,button:null,translateX:prevTranslateX,progress:prevProgress},\r\n            }\r\n            nextIndex++;\r\n            this.formatProgressingData(i);\r\n            \r\n        }\r\n        if(progressElement){progressElement.style.width = `${PROGRESS}%`;}\r\n        if(this.enableDefaultCssStyle)\r\n        {this.renderedStyle = cssStyle(this.form,fieldSets,this.translateX,this.fieldsetLength, this.fieldsetMarginWidth,styleOptions)}\r\n    }\r\n    /**\r\n     * Handles the \"next\" button click event.\r\n     * @param nextIndex The index of the next fieldset.\r\n     * @param nextTranslateX The translateX value for the next fieldset.\r\n     * @param nextButton The \"next\" button element.\r\n     * @param progressElement The progress element.\r\n     * @param nextProgress The progress for the next fieldset.\r\n     */\r\n    public next(nextIndex: number, nextTranslateX:number,nextButton?: HTMLElement,  progressElement?:HTMLElement,nextProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        const handleNext = () => {\r\n            const fieldSet = this.form.querySelector(`.fieldset${nextIndex - 1}`) as HTMLElement;\r\n            const isValidFieldset = this.isValidFieldset(fieldSet);\r\n            if(this.progressOptions && this.progressOptions.onPreNext) this.progressOptions.onPreNext(isValidFieldset);\r\n            if(isValidFieldset){\r\n                fieldSetElement = document.querySelector(`.fieldset${nextIndex}`) as HTMLElement;\r\n                if(fieldSetElement){\r\n                    this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                    getFocusableElements(fieldSetElement);\r\n                }\r\n                anime({\r\n                    isAnimate:this.animation,\r\n                    targets: targets,\r\n                    translateX: nextTranslateX,\r\n                    form:this.form\r\n                });\r\n                if(progressElement)\r\n                {progressElement.style.width = `${nextProgress??0}%`;}\r\n                if(this.progressOptions && this.progressOptions.onPostNext) this.progressOptions.onPostNext();\r\n            }\r\n        }\r\n        try {\r\n            if(nextButton){\r\n                nextButton.addEventListener(\"click\", (e)=>{\r\n                    e.preventDefault();\r\n                    handleNext()\r\n                });\r\n            }else{\r\n                if(this.isLazyRun){\r\n                    handleNext();\r\n                }\r\n                \r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * Handles the \"previous\" button click event.\r\n     * @param prevIndex The index of the previous fieldset.\r\n     * @param prevTranslateX The translateX value for the previous fieldset.\r\n     * @param prevButton The \"previous\" button element.\r\n     * @param progressElement The progress element.\r\n     * @param prevProgress The progress for the previous fieldset.\r\n    */\r\n    public prev(prevIndex:number, prevTranslateX:number,prevButton?:HTMLElement, progressElement?:HTMLElement, prevProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        const handlePrev = () => {\r\n            fieldSetElement = this.form.querySelector(`.fieldset${prevIndex}`);\r\n            if(fieldSetElement){\r\n                this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                getFocusableElements(fieldSetElement);\r\n            }\r\n            anime({\r\n                isAnimate:this.animation,\r\n                targets: targets,\r\n                translateX: prevTranslateX,\r\n                form:this.form\r\n            });\r\n            if(progressElement)\r\n            {progressElement.style.width = `${prevProgress??0}%`;}\r\n        }\r\n        try {\r\n            if(prevButton){\r\n                prevButton.addEventListener(\"click\", (e)=>{\r\n                    e.preventDefault();\r\n                    handlePrev();\r\n                 });\r\n            }else{\r\n                if(this.isLazyRun){\r\n                    handlePrev();\r\n                }\r\n                \r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * Calculates the progress percentage of the form.\r\n     * @returns The progress percentage.\r\n    */\r\n    public get PROGRESS()\r\n    {\r\n        return 100 / this.fieldsetLength;\r\n    }\r\n    /**\r\n     * Retrieve progress data for each fieldset\r\n     */\r\n    public get PROGRESSING_DATA()\r\n    {\r\n        return this.progressingData;\r\n    }\r\n    public get RENDERED_STYLE()\r\n    {\r\n        return this.renderedStyle;\r\n    }\r\n    private formatProgressingData(i:number)\r\n    {\r\n        if(this.progressingData && Object.entries(this.progressingData).length > 0){\r\n            if(i === 0)delete this.progressingData[`fieldset${i}`].prev;\r\n            if(i === this.lastIndex - 1)delete this.progressingData[`fieldset${i}`].next;\r\n        }\r\n    }\r\n    /**\r\n     * Compartmentalizes focus within a fieldset.\r\n     * @param fieldSet The fieldset to compartmentalize focus within.\r\n    */\r\n    private compartmentalizeFocusInFieldset(fieldSet:HTMLElement)\r\n    {\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Tab' && fieldSet !== null){\r\n                focusInBlock(e, fieldSet);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * Checks if a fieldset is valid.\r\n     * @param fieldSet The fieldset to validate.\r\n     * @returns true if the fieldset is valid, otherwise false.\r\n    */\r\n    private isValidFieldset(fieldSet: HTMLElement): boolean\r\n    {\r\n        if(fieldSet){\r\n            const fields =  Array.from(fieldSet.querySelectorAll('input, select, textarea'));\r\n            if(fields){\r\n                for(const field of fields as HTMLInputElement[]){\r\n                    if(!field.checkValidity()){\r\n                        field.reportValidity();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Generates an array of target selectors for fieldsets.\r\n     * @returns An array of target selectors.\r\n     */\r\n    private get fieldsetTargetArray(): string[]\r\n    {\r\n        let fieldsetTargetArray = []\r\n        const length = this.lazyFieldsetLength ? this.lazyFieldsetLength : this.fieldsetLength;\r\n        if(length > 0){\r\n            for(let i = 0; i < length; i++) {\r\n                fieldsetTargetArray.push(`.fieldset${i}`);\r\n            }\r\n        }\r\n        return fieldsetTargetArray;\r\n    }\r\n    /**\r\n     * Checks if the HTML structure of the form is valid.\r\n     * @param form The form to validate.\r\n     * @throws Error if the HTML structure is not valid.\r\n     */\r\n    private hasValidHTMLStructure(form:HTMLFormElement){\r\n        try {\r\n            if(!form){\r\n                throw new Error(\"The form could not be retrieved\");\r\n            }\r\n            const fieldSetParent = form.querySelector(\"[fieldset__parent]\") as HTMLElement;\r\n            if(!fieldSetParent){\r\n                throw new Error(\"The element with the attribute [fieldset__parent] not found in your form\");\r\n            }\r\n            const fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\") as HTMLElement;\r\n            if(!fieldsetContainer){\r\n                throw new Error(\"The element with the attribute [fieldset__container] not found in your fieldset__parent\");\r\n            }\r\n            const fieldSets = fieldsetContainer.querySelectorAll('fieldset');\r\n            if(!fieldSets){\r\n                throw new Error(\"Aucune section de formulaire trouvée.\");\r\n            }\r\n            const next_buttons = form.querySelectorAll(\"[__next__]\");\r\n            const prev_buttons = form.querySelectorAll(\"[__prev__]\");\r\n            if(!next_buttons){\r\n                throw new Error('No \"next\" button found!');\r\n            }\r\n            if(!prev_buttons){\r\n                throw new Error(\"No 'previous' button found!\");\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Defines the movement of each fieldset.\r\n     * @param params The parameters for setting translateX.\r\n     * @param fieldSet The fieldset element.\r\n    */\r\n    private setTranslateX(fieldSet:HTMLElement,progressOptions?: ProgressFormType){\r\n        if(!fieldSet) return ;\r\n        this.translateX = progressOptions && progressOptions.translateX ? progressOptions.translateX : - fieldSet.offsetWidth;\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","cssStyle","form","fieldSets","translateX","fieldsetLength","fieldsetMarginWidth","styleOptions","fieldSetParent","querySelector","fieldsetContainer","fieldsetWidth","Math","abs","fieldsetContainerWidth","defaultFieldSetParentStyle","height","overflow","width","concat","defaultFormStyle","boxSizing","defaultFieldsetContainerStyle","display","justifyContent","defaultFieldsetStyle","transition","backgroundColor","flexDirection","padding","border","boxShadow","borderRadius","formStyle","assign","fieldSetParentStyle","fieldsetParent","fieldsetContainerStyle","fieldsetStyle","fieldset","style","forEach","fieldSet","index","classList","add","error","console","lastTranslateXMap","Map","anime","options","targets","target","element","lastTranslateX","keyframes","transform","animate","isAnimate","duration","fill","easing","set","getFocusableElements","block","Array","from","querySelectorAll","fieldSetElement","ProgressForm","enableDefaultCssStyle","arguments","length","undefined","_classCallCheck","_defineProperty","progressOptions","_progressOptions$fiel","this","animation","hasValidHTMLStructure","setTranslateX","progressElement","document","fieldsetMargingWidth","prevIndex","isLazyRun","lazyFieldsetLength","lastIndex","nextIndex","prevTranslateX","PROGRESS","_this","preventProgress","_this$init","init","_progressOptions$targ","targetMarginWidth","i","nextButton","prevButton","nextTranslateX","nextProgress","prevProgress","fields","focus","compartmentalizeFocusInFieldset","progressingData","next","button","progress","prev","formatProgressingData","renderedStyle","_progressOptions$targ2","_this$init2","_this2","fieldsetTargetArray","handleNext","isValidFieldset","onPreNext","onPostNext","addEventListener","e","preventDefault","_this3","handlePrev","entries","window","focusables","findIndex","f","shiftKey","focusInBlock","_i","_arr","field","checkValidity","reportValidity","push","Error","next_buttons","prev_buttons","offsetWidth"],"sourceRoot":""}