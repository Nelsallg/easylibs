{"version":3,"file":"progress-form.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,gBAAiB,GAAIH,GACF,iBAAZC,QACdA,QAAQ,iBAAmBD,IAE3BD,EAAK,iBAAmBC,GACzB,CATD,CASGK,MAAM,I,sCCYT,SAAgBC,EAAqBC,GAGjC,OAAOC,MAAMC,KAAKF,EAAMG,iBADA,sCAE5B,C,8FApBA,wBAA6BC,EAAmBJ,GAE5CI,EAAIC,iBACJ,MAAMC,EAAaP,EAAqBC,GACxC,IAAIO,EAAQD,EAAWE,WAAUC,GAAKA,IAAMT,EAAMU,cAAc,aAC9C,IAAjBN,EAAIO,SAAqBJ,IAAUA,IAChCA,GAASD,EAAWM,SAAUL,EAAQ,GACtCA,EAAQ,IAAKA,EAAQD,EAAWM,OAAS,GAC/BN,EAAWC,GACnBM,OACV,EAMA,wB,GCpBIC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAavB,QAGrB,IAAIC,EAASmB,EAAyBE,GAAY,CAGjDtB,QAAS,CAAC,GAOX,OAHAyB,EAAoBH,GAAUrB,EAAQA,EAAOD,QAASqB,GAG/CpB,EAAOD,OACf,C,8ECtBA,eAEA,IAAI0B,EAAmC,KA4CvC,gBAKI,WAAAC,CAAYC,GAAgC,GAHpC,KAAAC,YAAc,IACf,KAAAC,eAAwB,EAG3BC,KAAKH,sBAAyBA,EAC9BG,KAAKF,WAAaE,KAAKF,UAC3B,CACO,GAAAG,CAAgCC,EAASC,G,MAE5C,MAAMC,EAAYF,EAAOG,KAAK3B,iBAAiB,YACzC4B,EAAiC,QAAf,EAAAJ,EAAOK,gBAAQ,eAAED,gBACzC,IAAIE,EAAY,EACZC,EAAYL,EAAUjB,OACtBuB,EAAiB,EACrBV,KAAKD,eAAiBK,EAAUjB,OAChC,MAAM,SAACoB,GAAYP,KACnBA,KAAKW,QAAQT,EAAOG,MACjBD,GAAaA,EAAUjB,OAAS,GAC/BiB,EAAUQ,SAAQ,CAACC,EAASC,K,QACxB,MAAMC,EAAaF,EAAS5B,cAAc,eACpC+B,EAAaH,EAAS5B,cAAc,eAC1C,IAAIa,EAAwC,QAA3B,EAAAI,EAAOJ,kBAAoB,QAAIE,KAAKF,WACrD,MAAMmB,EAA4C,QAAxB,EAAAf,EAAOe,yBAAiB,QAAI,EACtD,IAAIC,EAAkBpB,EAAaU,EAAaS,EAChDP,EAAmBZ,EAAaU,EAAaW,KAAKC,IAAiB,EAAbtB,GACtD,MAAMuB,EAAed,GAAYO,EAAI,GAC/BQ,EAAeR,EAAI,EAAIP,EAAWO,EAAIP,EAG5C,GAFAZ,EAAkBkB,EAClBA,EAASU,UAAUC,IAAI,WAAWV,KACzB,IAANA,EAAQ,CACQD,EAASnC,iBAAiB,mDAClCoC,GAAG1B,QACVY,KAAKyB,mBAAmB9B,EAC5B,CACAK,KAAK0B,KAAKX,EAAYP,EAAWU,EAAgBZ,EAAiBe,GAClEb,IACS,IAANM,IAAS,IAAAxC,sBAAqBqB,GACjCK,KAAK2B,KAAKX,EAAYP,EAAWC,EAAgBJ,EAAiBgB,GAClEb,GAAW,IAIhBH,IAAiBA,EAAgBsB,MAAMC,MAAQ,GAAGtB,MAClDP,KAAKH,uBACPG,KAAK8B,SAAS5B,EAAOE,EAAUD,EAEpC,CACQ,IAAAuB,CAAKX,EAAyBP,EAAmBU,EAAuBZ,EAA6Be,GAGzFrB,KAAK+B,oBAClBhB,GACCA,EAAWiB,iBAAiB,SAAUC,IAClCA,EAAErD,iBACF,MAAMiC,EAAWqB,SAASjD,cAAc,aAAYuB,EAAY,IAChDR,KAAKmC,gBAAgBtB,KAEjClB,EAAkBuC,SAASjD,cAAc,YAAYuB,KAClDb,IAECK,KAAKyB,mBAAmB9B,IACxB,IAAArB,sBAAqBqB,IAQtBW,IACFA,EAAgBsB,MAAMC,MAAQ,GAAGR,QAAAA,EAAc,MACpD,GAGZ,CAEQ,IAAAM,CAAKX,EAAwBP,EAAkBC,EAAuBJ,EAA8BgB,GAExFtB,KAAK+B,oBAClBf,GACCA,EAAWgB,iBAAiB,SAAUC,IAClCA,EAAErD,iBACFe,EAAkBuC,SAASjD,cAAc,YAAYwB,KAClDd,IAECK,KAAKyB,mBAAmB9B,IACxB,IAAArB,sBAAqBqB,IAOtBW,IACFA,EAAgBsB,MAAMC,MAAQ,GAAGP,QAAAA,EAAc,KAAK,GAGjE,CACA,YAAWf,GAEP,OAAO,IAAMP,KAAKD,cACtB,CACQ,kBAAA0B,CAAmBZ,GAEvBuB,OAAOJ,iBAAiB,WAAYC,IAClB,QAAVA,EAAEtD,KAA8B,OAAbkC,IACnB,IAAAwB,cAAaJ,EAAGpB,EACpB,GAER,CACQ,eAAAsB,CAAgBtB,GAEpB,GAAGA,EAAS,CACR,MAAMyB,EAAU9D,MAAMC,KAAKoC,EAASnC,iBAAiB,4BACrD,GAAG4D,EACC,IAAI,MAAMC,KAASD,EACf,IAAIC,EAAMC,gBAEN,OADAD,EAAME,kBACC,CAIvB,CACA,OAAO,CACX,CACA,uBAAYV,GAER,IAAIA,EAAsB,GAC1B,GAAG/B,KAAKD,eAAiB,EACrB,IAAI,IAAIe,EAAI,EAAGA,EAAId,KAAKD,eAAgBe,IACpCiB,EAAoBW,KAAK,YAAY5B,KAG7C,OAAOiB,CACX,CACQ,iBAAAY,CAAkBC,EAAmB9C,GAEzC,IAAK,IAAIgB,EAAI,EAAGA,EAAI8B,EAAQzD,OAAQ2B,IAAK,CACpBoB,SAASjD,cAAc,GAAG2D,EAAQ9B,MAC1Cc,MAAMiB,UAAY,cAAc/C,IAC7C,CACJ,CACQ,QAAAgC,CACJ5B,EACAE,EACAD,GAEA,MAAM2C,EAAiB5C,EAAOG,KAAKpB,cAAc,sBACjD,IACI,IAAI6D,EACA,MAAM,IAAIC,MAAM,4EAEpB,MAAMC,EAAoBF,EAAe7D,cAAc,yBACvD,IAAI+D,EACA,MAAM,IAAID,MAAM,2FAEpB,MAAME,EAA6B,CAC/BC,OAAQ,OACRC,SAAU,SACVtB,MAAO,SAELuB,EAAmB,CACrBvB,MAAO,QACPqB,OAAQ,OACRG,UAAW,cAGTC,EAAgC,CAClCzB,MAAO,SACPqB,OAAQ,OACRC,SAAU,SACVI,QAAS,OACTC,eAAgB,iBAGdC,EAAuB,CACzB5B,MAAO,OACP6B,WAAY,+BACZC,gBAAiB,UACjBH,eAAgB,gBAChBI,WAAY,SACZL,QAAS,OACTM,cAAe,SACfC,QAAS,OACTC,OAAQ,OACRC,UAAW,4CACXC,aAAc,OAIZC,EAAYC,OAAOC,OAAO,CAAC,EAAGhB,EAAkBjD,aAAY,EAAZA,EAAcE,MAC9DgE,EAAsBF,OAAOC,OAAO,CAAC,EAAEnB,EAA4B9C,aAAY,EAAZA,EAAcmE,gBACjFC,EAAyBJ,OAAOC,OAAO,CAAC,EAAEd,EAA8BnD,aAAY,EAAZA,EAAc6C,mBACtFwB,EAAgBL,OAAOC,OAAO,CAAC,EAAGX,EAAsBtD,aAAY,EAAZA,EAAcsE,UAE5EN,OAAOC,OAAOlE,EAAOG,KAAKuB,MAAOsC,GACjCC,OAAOC,OAAOtB,EAAelB,MAAOyC,GACpCF,OAAOC,OAAOpB,EAAkBpB,MAAO2C,GACvCnE,EAAUQ,SAAQ,CAACC,EAAU/B,KACzBqF,OAAOC,OAAOvD,EAASe,MAAO4C,GAC9B3D,EAASU,UAAUC,IAAI,WAAW1C,IAAQ,IAEtBsB,EAAU,GAAGsE,wBAAwB7C,MAA7D,MACM8C,EAAuBzE,EAAOyE,sBAAwB,GACtDC,EAAgBxE,EAAU,GAAGyE,YAC7BC,EAAyB9E,KAAKD,eAAiB6E,EAAgBD,EACrE3B,EAAkBpB,MAAMC,MAAQ,GAAGiD,KACvC,CAAE,MAAOC,GACLC,QAAQD,MAAMA,EAClB,CACJ,CACQ,OAAApE,CAAQN,GACZ,IACI,IAAIA,EACA,MAAM,IAAI0C,MAAM,8BAEpB,MAAMkC,EAAe5E,EAAK3B,iBAAiB,eACrCwG,EAAe7E,EAAKpB,cAAc,eAExC,IADkBoB,EAAK3B,iBAAiB,YAEpC,MAAM,IAAIqE,MAAM,yCAEpB,IAAIkC,EACA,MAAM,IAAIlC,MAAM,mCAEpB,IAAImC,EACA,MAAM,IAAInC,MAAM,oCAExB,CAAE,MAAOgC,GACLC,QAAQD,MAAMA,EAClB,CACJ,E","sources":["webpack://@easylibs/progress-form/webpack/universalModuleDefinition","webpack://@easylibs/progress-form/./src/scripts/focus-in-block.ts","webpack://@easylibs/progress-form/webpack/bootstrap","webpack://@easylibs/progress-form/./src/progress-form.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"progress-form\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"progress-form\"] = factory();\n\telse\n\t\troot[\"progress-form\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * Gère le focus clavier sur les éléments d'un bloc HTML spécifié.\r\n * @param key - L'événement clavier qui a déclenché la fonction.\r\n * @param block - L'élément HTML qui représente le bloc sur lequel on souhaite gérer le focus.\r\n */\r\nexport function focusInBlock(key:KeyboardEvent, block:HTMLElement):void\r\n{\r\n    key.preventDefault();\r\n    const focusables = getFocusableElements(block);\r\n    let index = focusables.findIndex(f => f === block.querySelector(':focus'));\r\n    (key.shiftKey === true) ? index-- : index++;\r\n    if (index >= focusables.length) { index = 0; }\r\n    if (index < 0) { index = focusables.length - 1; }\r\n    const FIELD = focusables[index] as HTMLElement;\r\n    FIELD.focus();\r\n}\r\n/**\r\n * Récupère tous les éléments focusables dans un bloc HTML spécifié.\r\n * @param block - L'élément HTML qui représente le bloc contenant les éléments focusables.\r\n * @returns Un tableau d'éléments focusables présents dans le bloc.\r\n */\r\nexport function getFocusableElements(block:HTMLElement):Element[]\r\n{\r\n    let focusableSelector = \"button, select, input, a, textarea\";\r\n    return Array.from(block.querySelectorAll(focusableSelector));\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { focusInBlock, getFocusableElements } from \"./scripts/focus-in-block\";\r\n\r\nlet fieldSetElement:HTMLElement|null = null;\r\ndeclare type ProgressFormType = {\r\n    form:HTMLFormElement,\r\n    progress?:{\r\n        progressElement?:HTMLElement,\r\n    }\r\n    translateX?:number,\r\n    targetMarginWidth?:number,\r\n    fieldsetMargingWidth?:number\r\n}\r\ndeclare interface StyleOptions {\r\n    form?: {\r\n        width?:string ,\r\n        height?:string ,\r\n        boxSizing?:string ,\r\n    },\r\n    fieldsetParent?:{\r\n        height: string,\r\n        overflow: string,\r\n        width: string,\r\n    },\r\n    fieldsetContainer?: {\r\n        width?:string ,\r\n        height?:string ,\r\n        overflow?:string ,\r\n        display?:string ,\r\n        justifyContent?:string ,\r\n        alignItems?:string,\r\n    },\r\n    fieldset?: {\r\n        width?:string ,\r\n        transition?:string ,\r\n        backgroundColor?:string ,\r\n        justifyContent?:string ,\r\n        alignItems?:string ,\r\n        display?:string ,\r\n        flexDirection?:string ,\r\n        padding?:string ,\r\n        border?:string ,\r\n        boxShadow?:string ,\r\n        borderRadius?:string ,\r\n    },\r\n}\r\n\r\nexport default class ProgressForm\r\n{\r\n    private translateX = -530;\r\n    public fieldsetLength:number = 0;\r\n    enableDefaultCssStyle: boolean;\r\n    constructor(enableDefaultCssStyle:boolean = true){\r\n        this.enableDefaultCssStyle  = enableDefaultCssStyle;\r\n        this.translateX = this.translateX;\r\n    }\r\n    public run<T extends ProgressFormType>(params:T,styleOptions?: StyleOptions)\r\n    {\r\n        const fieldSets = params.form.querySelectorAll('fieldset');\r\n        const progressElement = params.progress?.progressElement;\r\n        let nextIndex = 1;\r\n        let prevIndex = fieldSets.length;\r\n        let prevTranslateX = 0;\r\n        this.fieldsetLength = fieldSets.length;\r\n        const {progress} = this;\r\n        this.isValid(params.form);\r\n        if(fieldSets && fieldSets.length > 1){\r\n            fieldSets.forEach((fieldSet,i) => {\r\n                const nextButton = fieldSet.querySelector(\"[next__btn]\") as HTMLElement;\r\n                const prevButton = fieldSet.querySelector(\"[prev__btn]\") as HTMLElement;\r\n                let translateX = params.translateX as number ?? this.translateX;\r\n                const targetMarginWidth = params.targetMarginWidth ?? 0;\r\n                let nextTranslateX = (translateX * nextIndex) - targetMarginWidth;\r\n                prevTranslateX  = (translateX * nextIndex) + Math.abs(translateX * 2);\r\n                const nextProgress = progress * (i + 2);\r\n                const prevProgress = i > 1 ? progress * i : progress;\r\n                fieldSetElement = fieldSet;\r\n                fieldSet.classList.add(`fieldset${i}`);\r\n                if(i === 0){\r\n                    const fields = fieldSet.querySelectorAll(\"input:not([type='hidden'],[readonly]), textarea\") as NodeListOf<HTMLInputElement>;\r\n                    fields[i].focus();\r\n                    this.setFocusInFieldSet(fieldSetElement);\r\n                }\r\n                this.next(nextButton, nextIndex, nextTranslateX, progressElement, nextProgress);\r\n                nextIndex++;\r\n                if(i === 0){getFocusableElements(fieldSetElement);}\r\n                this.prev(prevButton, prevIndex, prevTranslateX, progressElement, prevProgress);\r\n                prevIndex--;\r\n                \r\n            }); \r\n        }\r\n        if(progressElement){progressElement.style.width = `${progress}%`;}\r\n        if(this.enableDefaultCssStyle)\r\n        {this.cssStyle(params,fieldSets,styleOptions)}\r\n\r\n    }\r\n    private next(nextButton: HTMLElement, nextIndex: number, nextTranslateX:number, progressElement?:HTMLElement,nextProgress?:number)\r\n    {\r\n        \r\n        const targets = this.fieldsetTargetArray;\r\n        if(nextButton){\r\n            nextButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                const fieldSet = document.querySelector(`.fieldset${nextIndex - 1}`) as HTMLElement;\r\n                const isValid = this.isValidFieldset(fieldSet);\r\n                if(isValid){\r\n                    fieldSetElement = document.querySelector(`.fieldset${nextIndex}`) as HTMLElement;\r\n                    if(fieldSetElement)\r\n                    {\r\n                        this.setFocusInFieldSet(fieldSetElement);\r\n                        getFocusableElements(fieldSetElement);\r\n                    }\r\n                    // anime({\r\n                    //     targets: targets,\r\n                    //     translateX: nextTranslateX,\r\n                    //     easing: 'easeInOutExpo'\r\n                    // });\r\n                    \r\n                    if(progressElement)\r\n                    {progressElement.style.width = `${nextProgress??0}%`;}\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    private prev(prevButton:HTMLElement, prevIndex:number, prevTranslateX:number ,progressElement?:HTMLElement, prevProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        if(prevButton){\r\n            prevButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                fieldSetElement = document.querySelector(`.fieldset${prevIndex}`);\r\n                if(fieldSetElement)\r\n                {\r\n                    this.setFocusInFieldSet(fieldSetElement);\r\n                    getFocusableElements(fieldSetElement);\r\n                }\r\n                // anime({\r\n                //     targets: targets,\r\n                //     translateX: prevTranslateX,\r\n                //     easing: 'easeInOutExpo'\r\n                // });\r\n                if(progressElement)\r\n                {progressElement.style.width = `${prevProgress??0}%`;}\r\n             });\r\n        }\r\n    }\r\n    public get progress()\r\n    {\r\n        return 100 / this.fieldsetLength;\r\n    }\r\n    private setFocusInFieldSet(fieldSet:HTMLElement)\r\n    {\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Tab' && fieldSet !== null){\r\n                focusInBlock(e, fieldSet);\r\n            }\r\n        })\r\n    }\r\n    private isValidFieldset(fieldSet: HTMLElement): boolean\r\n    {\r\n        if(fieldSet){\r\n            const fields =  Array.from(fieldSet.querySelectorAll('input, select, textarea'));\r\n            if(fields){\r\n                for(const field of fields as HTMLInputElement[]){\r\n                    if(!field.checkValidity()){\r\n                        field.reportValidity();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    private get fieldsetTargetArray(): string[]\r\n    {\r\n        let fieldsetTargetArray = []\r\n        if(this.fieldsetLength > 0){\r\n            for(let i = 0; i < this.fieldsetLength; i++) {\r\n                fieldsetTargetArray.push(`.fieldset${i}`);\r\n            }\r\n        }\r\n        return fieldsetTargetArray;\r\n    }\r\n    private fieldsetAnimation(targets: string[], translateX:number)\r\n    {\r\n        for (let i = 0; i < targets.length; i++) {\r\n            const fieldset = document.querySelector(`${targets[i]}`) as HTMLFieldSetElement;\r\n            fieldset.style.transform = `translateX(${translateX})`;\r\n        }\r\n    }\r\n    private cssStyle<T extends ProgressFormType>(\r\n        params:T,\r\n        fieldSets:NodeListOf<HTMLFieldSetElement>,\r\n        styleOptions?:StyleOptions)\r\n    {\r\n        const fieldSetParent = params.form.querySelector(\"[fieldset__parent]\") as HTMLElement;\r\n        try {\r\n            if(!fieldSetParent){\r\n                throw new Error(\"The element with the attribute [fieldset__parent] not found in your form\");\r\n            }\r\n            const fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\") as HTMLElement;\r\n            if(!fieldsetContainer){\r\n                throw new Error(\"The element with the attribute [fieldset__container] not found in your fieldset__parent\");\r\n            }\r\n            const defaultFieldSetParentStyle = {\r\n                height: '100%',\r\n                overflow: 'hidden',\r\n                width: '530px'\r\n            }\r\n            const defaultFormStyle = {\r\n                width: '545px',\r\n                height: '100%',\r\n                boxSizing: 'border-box',\r\n            };\r\n            \r\n            const defaultFieldsetContainerStyle = {\r\n                width: `1800px`,\r\n                height: '100%',\r\n                overflow: 'hidden',\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n            };\r\n    \r\n            const defaultFieldsetStyle = {\r\n                width: ' 25%',\r\n                transition: 'margin-left 0.4s ease-in-out',\r\n                backgroundColor: '#FFFFFF',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                padding: '30px',\r\n                border: 'none',\r\n                boxShadow: '0 0 5px rgba(255, 255, 255, 0.7137254902)',\r\n                borderRadius: '3px',\r\n            };\r\n        \r\n            // Fusionnez les styles par défaut avec les styles personnalisés\r\n            const formStyle = Object.assign({}, defaultFormStyle, styleOptions?.form);\r\n            const fieldSetParentStyle = Object.assign({},defaultFieldSetParentStyle, styleOptions?.fieldsetParent)\r\n            const fieldsetContainerStyle = Object.assign({},defaultFieldsetContainerStyle,styleOptions?.fieldsetContainer);\r\n            const fieldsetStyle = Object.assign({}, defaultFieldsetStyle, styleOptions?.fieldset);\r\n        \r\n            Object.assign(params.form.style, formStyle);\r\n            Object.assign(fieldSetParent.style, fieldSetParentStyle);\r\n            Object.assign(fieldsetContainer.style, fieldsetContainerStyle);\r\n            fieldSets.forEach((fieldSet, index) => {\r\n                Object.assign(fieldSet.style, fieldsetStyle);\r\n                fieldSet.classList.add(`fieldset${index}`);\r\n            });\r\n            const tempSelectWidth = fieldSets[0].getBoundingClientRect().width;\r\n            const fieldsetMargingWidth = params.fieldsetMargingWidth || 60;\r\n            const fieldSetWidth = fieldSets[0].offsetWidth;\r\n            const fieldsetContainerWidth = this.fieldsetLength * fieldSetWidth + fieldsetMargingWidth;\r\n            fieldsetContainer.style.width = `${fieldsetContainerWidth}px`;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    private isValid(form:HTMLFormElement){\r\n        try {\r\n            if(!form){\r\n                throw new Error('Le formulaire est invalide');\r\n            }\r\n            const next_buttons = form.querySelectorAll(\"[next__btn]\");\r\n            const prev_buttons = form.querySelector(\"[prev__btn]\");\r\n            const fieldSets = form.querySelectorAll('fieldset');\r\n            if(!fieldSets){\r\n                throw new Error(\"Aucune section de formulaire trouvée.\");\r\n            }\r\n            if(!next_buttons){\r\n                throw new Error('Aucun bouton \"suivant\" trouvé !');\r\n            }\r\n            if(!prev_buttons){\r\n                throw new Error(\"Aucun bouton 'précédent' trouvé !\");\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n}"],"names":["root","factory","exports","module","define","amd","self","getFocusableElements","block","Array","from","querySelectorAll","key","preventDefault","focusables","index","findIndex","f","querySelector","shiftKey","length","focus","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","fieldSetElement","constructor","enableDefaultCssStyle","translateX","fieldsetLength","this","run","params","styleOptions","fieldSets","form","progressElement","progress","nextIndex","prevIndex","prevTranslateX","isValid","forEach","fieldSet","i","nextButton","prevButton","targetMarginWidth","nextTranslateX","Math","abs","nextProgress","prevProgress","classList","add","setFocusInFieldSet","next","prev","style","width","cssStyle","fieldsetTargetArray","addEventListener","e","document","isValidFieldset","window","focusInBlock","fields","field","checkValidity","reportValidity","push","fieldsetAnimation","targets","transform","fieldSetParent","Error","fieldsetContainer","defaultFieldSetParentStyle","height","overflow","defaultFormStyle","boxSizing","defaultFieldsetContainerStyle","display","justifyContent","defaultFieldsetStyle","transition","backgroundColor","alignItems","flexDirection","padding","border","boxShadow","borderRadius","formStyle","Object","assign","fieldSetParentStyle","fieldsetParent","fieldsetContainerStyle","fieldsetStyle","fieldset","getBoundingClientRect","fieldsetMargingWidth","fieldSetWidth","offsetWidth","fieldsetContainerWidth","error","console","next_buttons","prev_buttons"],"sourceRoot":""}