{"version":3,"file":"progress-form.min.js","mappings":"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","sources":["webpack://@easylibs/progress-form/webpack/universalModuleDefinition","webpack://@easylibs/progress-form/webpack/bootstrap","webpack://@easylibs/progress-form/webpack/runtime/define property getters","webpack://@easylibs/progress-form/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/progress-form/webpack/runtime/make namespace object","webpack://@easylibs/progress-form/./src/scripts/css-style.ts","webpack://@easylibs/progress-form/./src/scripts/focus-in-block.ts","webpack://@easylibs/progress-form/./src/progress-form.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"progress-form\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"progress-form\"] = factory();\n\telse\n\t\troot[\"progress-form\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { StyleOptions } from \"./interfaces\";\r\nimport { ProgressFormType } from \"./types\";\r\n\r\ndeclare type animationType = { targets: (Element | string)[], translateX: number };\r\n\r\nexport function cssStyle(\r\n  params: ProgressFormType,\r\n  fieldSets: NodeListOf<HTMLFieldSetElement>,\r\n  translateX: number,\r\n  fieldsetLength: number,\r\n  fieldsetMarginWidth: number,\r\n  styleOptions?: StyleOptions\r\n) {\r\n  try {\r\n    const fieldSetParent = params.form.querySelector(\r\n      \"[fieldset__parent]\"\r\n    ) as HTMLElement;\r\n    const fieldsetContainer = fieldSetParent.querySelector(\r\n      \"[fieldset__container]\"\r\n    ) as HTMLElement;\r\n    const fieldsetWidth = Math.abs(translateX);\r\n    const fieldsetContainerWidth =\r\n      fieldsetLength * fieldsetWidth + fieldsetMarginWidth;\r\n    const defaultFieldSetParentStyle = {\r\n      height: \"100%\",\r\n      overflow: \"hidden\",\r\n      width: `${fieldsetWidth}px`,\r\n    };\r\n    const defaultFormStyle = {\r\n      width: `${fieldsetWidth}px`,\r\n      height: \"100%\",\r\n      boxSizing: \"border-box\",\r\n    };\r\n\r\n    const defaultFieldsetContainerStyle = {\r\n      width: `${fieldsetContainerWidth}px`,\r\n      height: \"100%\",\r\n      overflow: \"hidden\",\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n    };\r\n\r\n    const defaultFieldsetStyle = {\r\n      width: `${fieldsetWidth}px`,\r\n      transition: \"margin-left 0.4s ease-in-out\",\r\n      backgroundColor: \"#FFFFFF\",\r\n      justifyContent: \"space-between\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      padding: \"30px\",\r\n      border: \"none\",\r\n      boxShadow: \"0 0 5px rgba(255, 255, 255, 0.7137254902)\",\r\n      borderRadius: \"3px\",\r\n    };\r\n\r\n    // Fusionnez les styles par défaut avec les styles personnalisés\r\n    const formStyle = Object.assign({}, defaultFormStyle, styleOptions?.form);\r\n    const fieldSetParentStyle = Object.assign(\r\n      {},\r\n      defaultFieldSetParentStyle,\r\n      styleOptions?.fieldsetParent\r\n    );\r\n    const fieldsetContainerStyle = Object.assign(\r\n      {},\r\n      defaultFieldsetContainerStyle,\r\n      styleOptions?.fieldsetContainer\r\n    );\r\n    const fieldsetStyle = Object.assign(\r\n      {},\r\n      defaultFieldsetStyle,\r\n      styleOptions?.fieldset\r\n    );\r\n\r\n    Object.assign(params.form.style, formStyle);\r\n    Object.assign(fieldSetParent.style, fieldSetParentStyle);\r\n    Object.assign(fieldsetContainer.style, fieldsetContainerStyle);\r\n    fieldSets.forEach((fieldSet, index) => {\r\n      Object.assign(fieldSet.style, fieldsetStyle);\r\n      fieldSet.classList.add(`fieldset${index}`);\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nconst lastTranslateXMap = new Map<Element, number>();\r\nexport function anime(options: animationType) {\r\n    options.targets.forEach(target => {\r\n        const element = typeof target === 'string' ? document.querySelector(target) : target;\r\n        if (element) {\r\n            const lastTranslateX = lastTranslateXMap.get(element) || 0;\r\n            const translateX = options.translateX;\r\n            const keyframes: Keyframe[] = [\r\n                { transform: `translateX(${lastTranslateX}px)` },\r\n                { transform: `translateX(${translateX}px)` }\r\n            ];\r\n            const _options: KeyframeAnimationOptions = {\r\n                duration: 1000,\r\n                fill: 'forwards', // L'animation reste appliquée à la fin\r\n                easing: 'cubic-bezier(1, 0, 0, 1)' // Approximation de l'effet d'assouplissement easeInOutExpo\r\n            };\r\n            if (element.animate) {\r\n                element.animate(keyframes, _options);\r\n                lastTranslateXMap.set(element, translateX);\r\n            }\r\n        }\r\n    });\r\n}\r\n","/**\r\n * Gère le focus clavier sur les éléments d'un bloc HTML spécifié.\r\n * @param key - L'événement clavier qui a déclenché la fonction.\r\n * @param block - L'élément HTML qui représente le bloc sur lequel on souhaite gérer le focus.\r\n */\r\nexport function focusInBlock(key:KeyboardEvent, block:HTMLElement):void\r\n{\r\n    key.preventDefault();\r\n    const focusables = getFocusableElements(block);\r\n    let index = focusables.findIndex(f => f === block.querySelector(':focus'));\r\n    (key.shiftKey === true) ? index-- : index++;\r\n    if (index >= focusables.length) { index = 0; }\r\n    if (index < 0) { index = focusables.length - 1; }\r\n    const FIELD = focusables[index] as HTMLElement;\r\n    FIELD.focus();\r\n}\r\n/**\r\n * Récupère tous les éléments focusables dans un bloc HTML spécifié.\r\n * @param block - L'élément HTML qui représente le bloc contenant les éléments focusables.\r\n * @returns Un tableau d'éléments focusables présents dans le bloc.\r\n */\r\nexport function getFocusableElements(block:HTMLElement):Element[]\r\n{\r\n    let focusableSelector = \"button, select, input, a, textarea\";\r\n    return Array.from(block.querySelectorAll(focusableSelector));\r\n}","import { cssStyle,anime } from \"./scripts/css-style\";\r\nimport { focusInBlock, getFocusableElements } from \"./scripts/focus-in-block\";\r\nimport { StyleOptions } from \"./scripts/interfaces\";\r\nimport { ProgressFormType, PreventType, ProgressingType } from \"./scripts/types\";\r\n\r\nlet fieldSetElement:HTMLElement|null = null;\r\n/**\r\n * ProgressForm represents a class for managing a progressive form.\r\n */\r\nexport default class ProgressForm\r\n{\r\n    private translateX:number;\r\n    private fieldsetLength:number = 0;\r\n    private fieldsetMarginWidth: number;\r\n    private params: ProgressFormType;\r\n    private progressingData:ProgressingType;\r\n    /**\r\n     * @param enableDefaultCssStyle Determines whether the default CSS style should be enabled. Default is true.\r\n     */\r\n    constructor(private enableDefaultCssStyle:boolean = true){}\r\n    /**\r\n     * Defines the movement of each fieldset.\r\n     * @param params The parameters for setting translateX.\r\n     * @param fieldSet The fieldset element.\r\n    */\r\n    private setTranslateX(params: ProgressFormType,fieldSet:HTMLElement){\r\n        if(!fieldSet) return ;\r\n        this.translateX = params.translateX ? params.translateX : - fieldSet.offsetWidth;\r\n    }\r\n    /**\r\n     * Executes the progressive form.\r\n     * @param params The parameters of the form.\r\n     * @param styleOptions Style options for the form.\r\n    */\r\n    public run(params:ProgressFormType,styleOptions?: StyleOptions, preventProgress:PreventType = false)\r\n    {\r\n        this.params = params;\r\n        this.hasValidHTMLStructure(params.form);\r\n        const fieldSets = params.form.querySelectorAll('fieldset');\r\n        this.setTranslateX(params, fieldSets[0]);\r\n        const progressElement = document.querySelector('[__progress__]') as HTMLElement;\r\n        this.fieldsetMarginWidth = params.fieldsetMargingWidth ?? 60;\r\n        let nextIndex = 1;\r\n        let prevIndex = fieldSets.length;\r\n        let prevTranslateX = 0;\r\n        this.fieldsetLength = fieldSets.length;\r\n        const {PROGRESS} = this;\r\n        if(fieldSets && fieldSets.length > 1){\r\n            fieldSets.forEach((fieldSet,i) => {\r\n                const nextButton = fieldSet.querySelector(\"[__next__]\") as HTMLElement;\r\n                const prevButton = fieldSet.querySelector(\"[__prev__]\") as HTMLElement;\r\n                let translateX = this.translateX - this.fieldsetMarginWidth / this.fieldsetLength;\r\n                const targetMarginWidth = params.targetMarginWidth ?? 0;\r\n                let nextTranslateX = (translateX * nextIndex) - targetMarginWidth;\r\n                prevTranslateX  = (translateX * nextIndex) + Math.abs(translateX * 2);\r\n                const nextProgress = PROGRESS * (i + 2);\r\n                const prevProgress = i > 1 ? PROGRESS * i : PROGRESS;\r\n                fieldSetElement = fieldSet;\r\n                fieldSet.classList.add(`fieldset${i}`);\r\n                if(i === 0){\r\n                    const fields = fieldSet.querySelectorAll(\"input:not([type='hidden'],[readonly]), textarea\") as NodeListOf<HTMLInputElement>;\r\n                    fields[i].focus();\r\n                    this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                }\r\n                this.progressingData = {[`fieldset${i}`]:{\r\n                    i,\r\n                    target:progressElement,\r\n                    next:{i:nextIndex,button:nextButton,translateX:nextTranslateX,progress:nextProgress},\r\n                    prev:{i:prevIndex,button:prevButton,translateX:prevTranslateX,progress:prevProgress},\r\n                }}\r\n                if(preventProgress === false || preventProgress === \"prev\")this.next(nextButton, nextIndex, nextTranslateX, progressElement, nextProgress);\r\n                nextIndex++;\r\n                if(i === 0){getFocusableElements(fieldSetElement);}\r\n                if(preventProgress === false || preventProgress === \"next\")this.prev(prevButton, prevIndex, prevTranslateX, progressElement, prevProgress);\r\n                prevIndex--;\r\n                \r\n            }); \r\n        }\r\n        if(progressElement){progressElement.style.width = `${PROGRESS}%`;}\r\n        if(this.enableDefaultCssStyle)\r\n        {cssStyle(params,fieldSets,this.translateX,this.fieldsetLength, this.fieldsetMarginWidth,styleOptions)}\r\n    }\r\n    /**\r\n     * Handles the \"next\" button click event.\r\n     * @param nextButton The \"next\" button element.\r\n     * @param nextIndex The index of the next fieldset.\r\n     * @param nextTranslateX The translateX value for the next fieldset.\r\n     * @param progressElement The progress element.\r\n     * @param nextProgress The progress for the next fieldset.\r\n     */\r\n    public next(nextButton: HTMLElement, nextIndex: number, nextTranslateX:number, progressElement?:HTMLElement,nextProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        if(nextButton){\r\n            nextButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                const fieldSet = document.querySelector(`.fieldset${nextIndex - 1}`) as HTMLElement;\r\n                const isValidFieldset = this.isValidFieldset(fieldSet);\r\n                if(this.params.onPreNext) this.params.onPreNext(isValidFieldset);\r\n                if(isValidFieldset){\r\n                    fieldSetElement = document.querySelector(`.fieldset${nextIndex}`) as HTMLElement;\r\n                    if(fieldSetElement){\r\n                        this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                        getFocusableElements(fieldSetElement);\r\n                    }\r\n                    anime({\r\n                        targets: targets,\r\n                        translateX: nextTranslateX\r\n                    });\r\n                    if(progressElement)\r\n                    {progressElement.style.width = `${nextProgress??0}%`;}\r\n                    if(this.params.onPostNext) this.params.onPostNext();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Handles the \"previous\" button click event.\r\n     * @param prevButton The \"previous\" button element.\r\n     * @param prevIndex The index of the previous fieldset.\r\n     * @param prevTranslateX The translateX value for the previous fieldset.\r\n     * @param progressElement The progress element.\r\n     * @param prevProgress The progress for the previous fieldset.\r\n    */\r\n    public prev(prevButton:HTMLElement, prevIndex:number, prevTranslateX:number ,progressElement?:HTMLElement, prevProgress?:number)\r\n    {\r\n        const targets = this.fieldsetTargetArray;\r\n        if(prevButton){\r\n            prevButton.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                fieldSetElement = document.querySelector(`.fieldset${prevIndex}`);\r\n                if(fieldSetElement){\r\n                    this.compartmentalizeFocusInFieldset(fieldSetElement);\r\n                    getFocusableElements(fieldSetElement);\r\n                }\r\n                anime({\r\n                    targets: targets,\r\n                    translateX: prevTranslateX\r\n                });\r\n                if(progressElement)\r\n                {progressElement.style.width = `${prevProgress??0}%`;}\r\n             });\r\n        }\r\n    }\r\n    /**\r\n     * Calculates the progress percentage of the form.\r\n     * @returns The progress percentage.\r\n    */\r\n    public get PROGRESS()\r\n    {\r\n        return 100 / this.fieldsetLength;\r\n    }\r\n    /**\r\n     * Retrieve progress data for each fieldset\r\n     */\r\n    public get PROGRESSING_DATA()\r\n    {\r\n        return this.progressingData;\r\n    }\r\n    /**\r\n     * Compartmentalizes focus within a fieldset.\r\n     * @param fieldSet The fieldset to compartmentalize focus within.\r\n    */\r\n    private compartmentalizeFocusInFieldset(fieldSet:HTMLElement)\r\n    {\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Tab' && fieldSet !== null){\r\n                focusInBlock(e, fieldSet);\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * Checks if a fieldset is valid.\r\n     * @param fieldSet The fieldset to validate.\r\n     * @returns true if the fieldset is valid, otherwise false.\r\n    */\r\n    private isValidFieldset(fieldSet: HTMLElement): boolean\r\n    {\r\n        if(fieldSet){\r\n            const fields =  Array.from(fieldSet.querySelectorAll('input, select, textarea'));\r\n            if(fields){\r\n                for(const field of fields as HTMLInputElement[]){\r\n                    if(!field.checkValidity()){\r\n                        field.reportValidity();\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Generates an array of target selectors for fieldsets.\r\n     * @returns An array of target selectors.\r\n     */\r\n    private get fieldsetTargetArray(): string[]\r\n    {\r\n        let fieldsetTargetArray = []\r\n        if(this.fieldsetLength > 0){\r\n            for(let i = 0; i < this.fieldsetLength; i++) {\r\n                fieldsetTargetArray.push(`.fieldset${i}`);\r\n            }\r\n        }\r\n        return fieldsetTargetArray;\r\n    }\r\n    /**\r\n     * Checks if the HTML structure of the form is valid.\r\n     * @param form The form to validate.\r\n     * @throws Error if the HTML structure is not valid.\r\n     */\r\n    private hasValidHTMLStructure(form:HTMLFormElement){\r\n        try {\r\n            if(!form){\r\n                throw new Error(\"The form could not be retrieved\");\r\n            }\r\n            const fieldSetParent = form.querySelector(\"[fieldset__parent]\") as HTMLElement;\r\n            if(!fieldSetParent){\r\n                throw new Error(\"The element with the attribute [fieldset__parent] not found in your form\");\r\n            }\r\n            const fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\") as HTMLElement;\r\n            if(!fieldsetContainer){\r\n                throw new Error(\"The element with the attribute [fieldset__container] not found in your fieldset__parent\");\r\n            }\r\n            const fieldSets = fieldsetContainer.querySelectorAll('fieldset');\r\n            if(!fieldSets){\r\n                throw new Error(\"Aucune section de formulaire trouvée.\");\r\n            }\r\n            const next_buttons = form.querySelectorAll(\"[__next__]\");\r\n            const prev_buttons = form.querySelectorAll(\"[__prev__]\");\r\n            if(!next_buttons){\r\n                throw new Error('No \"next\" button found!');\r\n            }\r\n            if(!prev_buttons){\r\n                throw new Error(\"No 'previous' button found!\");\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","lastTranslateXMap","Map","anime","options","targets","forEach","target","element","document","querySelector","lastTranslateX","translateX","keyframes","transform","concat","animate","duration","fill","easing","set","getFocusableElements","block","Array","from","querySelectorAll","fieldSetElement","ProgressForm","enableDefaultCssStyle","arguments","length","undefined","_classCallCheck","_defineProperty","params","fieldSet","this","offsetWidth","styleOptions","_params$fieldsetMargi","_this","preventProgress","hasValidHTMLStructure","form","fieldSets","setTranslateX","progressElement","fieldsetMarginWidth","fieldsetMargingWidth","nextIndex","prevIndex","prevTranslateX","fieldsetLength","PROGRESS","i","_params$targetMarginW","nextButton","prevButton","targetMarginWidth","nextTranslateX","Math","abs","nextProgress","prevProgress","classList","add","focus","compartmentalizeFocusInFieldset","progressingData","next","button","progress","prev","style","width","fieldSetParent","fieldsetContainer","fieldsetWidth","fieldsetContainerWidth","defaultFieldSetParentStyle","height","overflow","defaultFormStyle","boxSizing","defaultFieldsetContainerStyle","display","justifyContent","defaultFieldsetStyle","transition","backgroundColor","flexDirection","padding","border","boxShadow","borderRadius","formStyle","assign","fieldSetParentStyle","fieldsetParent","fieldsetContainerStyle","fieldsetStyle","fieldset","index","error","console","cssStyle","_this2","fieldsetTargetArray","addEventListener","e","preventDefault","isValidFieldset","onPreNext","onPostNext","_this3","window","focusables","findIndex","f","shiftKey","focusInBlock","fields","_i","_arr","field","checkValidity","reportValidity","push","Error","next_buttons","prev_buttons"],"sourceRoot":""}