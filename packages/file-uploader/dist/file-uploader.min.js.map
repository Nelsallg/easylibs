{"version":3,"file":"file-uploader.min.js","mappings":"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","sources":["webpack://@easylibs/file-uploader/webpack/universalModuleDefinition","webpack://@easylibs/file-uploader/./src/file-uploader.ts","webpack://@easylibs/file-uploader/@easylibs/transformer/webpack/universalModuleDefinition","webpack://@easylibs/file-uploader/@easylibs/transformer/webpack/startup","webpack://@easylibs/file-uploader/@easylibs/transformer/src/transformer.ts","webpack://@easylibs/file-uploader/@easylibs/utils/webpack/universalModuleDefinition","webpack://@easylibs/file-uploader/@easylibs/utils/src/utils.ts","webpack://@easylibs/file-uploader/webpack/bootstrap","webpack://@easylibs/file-uploader/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"file-uploader\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"file-uploader\"] = factory();\n\telse\n\t\troot[\"file-uploader\"] = factory();\n})(self, () => {\nreturn ","import Utils from \"@easylibs/utils\";\r\nimport { Transformer } from '@easylibs/transformer';\r\n\r\ndeclare type FileUploaderType =\r\n  | Array<{\r\n      name: string;\r\n      base64String: string | null;\r\n      contentType: string;\r\n      size: number;\r\n      arrayBuffer: ArrayBuffer;\r\n    }>\r\n  | {\r\n      name: string;\r\n      base64String: string | null;\r\n      contentType: string;\r\n      size: number;\r\n      arrayBuffer: ArrayBuffer;\r\n    };\r\nexport default class FileUploader {\r\n  private input: Element | HTMLCollection | NodeListOf<Element> | undefined;\r\n  private fileElement:\r\n    | Element\r\n    | HTMLCollection\r\n    | NodeListOf<Element>\r\n    | undefined\r\n    | null;\r\n  private autoEvent: boolean = true;\r\n  private progressContainer?: HTMLElement;\r\n  /**\r\n   * @param input La balise input qui recevra l'image\r\n   * @param fileElement La balise dans laquelle l'image sera affiché\r\n   */\r\n  constructor(\r\n    input: HTMLInputElement | string,\r\n    fileElement?: HTMLImageElement | string | null,\r\n    autoEvent: boolean = true,\r\n    progressContainer?: HTMLElement | string\r\n  ) {\r\n    this.input = Utils.$$(input);\r\n    this.fileElement = fileElement ? Utils.$$(fileElement) : null;\r\n    this.autoEvent = autoEvent;\r\n    this.progressContainer = progressContainer instanceof HTMLElement ? progressContainer : document.querySelector(`${progressContainer}`) as HTMLElement;\r\n  }\r\n  public load<T extends FileUploaderType>(callback = (files: T) => {}) {\r\n    const setUploading = (input: HTMLInputElement) => {\r\n      if (input.files) {\r\n        let { files } = input;\r\n        if (files.length === 1) {\r\n          this.singleUploading(files[0], (file) => {\r\n            return callback(file);\r\n          });\r\n        }\r\n        if (files.length > 1) {\r\n          this.multipleUploading(files, (_files) => {\r\n            return callback(_files);\r\n          });\r\n        }\r\n      }\r\n    };\r\n    if (this.input && this.input instanceof HTMLInputElement) {\r\n      if (true === this.autoEvent) {\r\n        this.input.addEventListener(\"change\", () => {\r\n          const input = this.input as HTMLInputElement;\r\n          return setUploading(input);\r\n        });\r\n      }\r\n      if (false === this.autoEvent) {\r\n        try {\r\n          const { input } = this;\r\n          if (!input) {\r\n            throw new Error(\"No Input Target\");\r\n          }\r\n          return setUploading(input);\r\n        } catch (error) {\r\n          console.log(`Error ${error}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private singleUploading(file: File, callback: (_file: any) => void) {\r\n    let _file: {\r\n      name: string;\r\n      base64String: string | null;\r\n      contentType: string;\r\n      size: number;\r\n      arrayBuffer: ArrayBuffer;\r\n    } | null = null;\r\n    const fileReader = new FileReader();\r\n    this.progress(file);\r\n    fileReader.onload = async () => {\r\n      const base64String = fileReader.result;\r\n      _file = {\r\n        name: file.name,\r\n        base64String: base64String ? base64String.toString() : \"\",\r\n        contentType: file.type,\r\n        size: file.size,\r\n        arrayBuffer: await file.arrayBuffer(),\r\n      };\r\n      Utils.processNodes(this.fileElement, (element: HTMLImageElement) => {\r\n        element.src = `${base64String}`;\r\n      });\r\n      return callback(_file);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }\r\n  private multipleUploading(files: FileList, callback: (files: any) => void) {\r\n    let _files: Array<{\r\n      name: string;\r\n      base64String: string | null;\r\n      contentType: string;\r\n      size: number;\r\n      arrayBuffer: ArrayBuffer;\r\n    }> = [];\r\n    for (let i = 0; i < files.length; i++) {\r\n      let file = files[i];\r\n      this.progress(file);\r\n      if (file instanceof Blob) {\r\n        let reader = new FileReader();\r\n        reader.onload = async () => {\r\n          const base64String = reader.result;\r\n          _files.push({\r\n            name: file.name,\r\n            base64String: base64String ? base64String.toString() : \"\",\r\n            contentType: file.type,\r\n            size: file.size,\r\n            arrayBuffer: await file.arrayBuffer(),\r\n          });\r\n          if (_files.length === files.length) {\r\n            callback(_files);\r\n          }\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  }\r\n  public autoUploadFile() {\r\n    const transformer = new Transformer.FileTransformer();\r\n    const filesInput = document.querySelectorAll(\"input[type='file']\") as NodeListOf<HTMLInputElement>;\r\n    Utils.processNodes(filesInput, (fileInput: HTMLInputElement) => {\r\n      const value = fileInput.dataset.value;\r\n      if (value && value !== \"\") {\r\n        const file = transformer.fromBase64String(value, null, null, false);\r\n        if (file) {\r\n          const newFileList = new DataTransfer();\r\n          newFileList.items.add(file);\r\n          Object.defineProperty(fileInput, 'files', {\r\n            value: newFileList.files,\r\n            writable: false,\r\n          });\r\n          fileInput.removeAttribute('data-value');\r\n          const changeEvent = new Event('change');\r\n          fileInput.dispatchEvent(changeEvent);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  public progress(file: File) {\r\n    try {\r\n      if(!file){\r\n        return;\r\n      }\r\n      if(!this.progressContainer){\r\n        return;\r\n      }\r\n      let progressBar = this.progressHTML();\r\n      this.progressContainer.appendChild(progressBar);\r\n\r\n      let xhr = new XMLHttpRequest();\r\n\r\n      xhr.upload.addEventListener('progress', function (e) {\r\n        console.log(e.lengthComputable)\r\n          if (e.lengthComputable) {\r\n            let percentComplete = (e.loaded / e.total) * 100;\r\n            progressBar.style.width = percentComplete + '%';\r\n            progressBar.innerHTML = percentComplete.toFixed(0) + '%';\r\n            console.log(percentComplete.toFixed(0) + '%');\r\n          }\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  private progressHTML(){\r\n    let target = `<div id=\"progress-container\">\r\n        <div id=\"progress-bar\"></div>\r\n    </div>`;\r\n    const element = Utils.textToHTMLElement(target) as HTMLElement;\r\n    element.style.position = 'absolute';\r\n    return element;\r\n  }\r\n  private createInput() {\r\n    const input = document.createElement(\"input\");\r\n    input.setAttribute(\"type\", \"file\");\r\n    input.setAttribute(\"multiple\", \"true\");\r\n    input.style.display = \"none\";\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"transformer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"transformer\"] = factory();\n\telse\n\t\troot[\"transformer\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/transformer.ts\"](0, __webpack_exports__);\n","function getMimeType(base64String: string, get: string = \"both\"): string {\r\n  const extension = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[1];\r\n  const fileType = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[0];\r\n\r\n  if (\"type\" === get) {\r\n    return fileType;\r\n  }\r\n  if (\"extension\" === get) {\r\n    return extension;\r\n  }\r\n  return fileType + \"/\" + extension;\r\n}\r\n\r\n\r\nexport namespace Transformer {\r\n  export class Base64Transformer {\r\n    protected base64String: string = \"\";\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public toFile(base64String: string, fileName?: string): File {\r\n      this.base64String = base64String;\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteArrays: Array<Uint8Array> = [];\r\n      let _fileName = \"\";\r\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n        const slice = byteCharacters.slice(offset, offset + 512);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n          byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n      }\r\n      const extension = getMimeType(base64String, \"extension\");\r\n      const fileType = getMimeType(base64String, \"type\");\r\n      if (fileName) {\r\n        _fileName = fileName;\r\n      } else {\r\n        _fileName = `tranformed_file.${extension}`;\r\n      }\r\n      return new File(byteArrays, _fileName, {\r\n        type: `${fileType}/${extension}`,\r\n      });\r\n    }\r\n    /**\r\n     * Convertit un objet File en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public fromFile(file: File): Promise<any> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en tableau Uint8Array.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @returns Le tableau Uint8Array résultant.\r\n     */\r\n    public toUint8Array(base64String: string): Uint8Array {\r\n      const binaryString = window.atob(base64String.split(\",\")[1]);\r\n      const { length } = binaryString;\r\n      const bytes = new Uint8Array(length);\r\n      for (let i = 0; i < length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n      }\r\n      return bytes;\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en chaîne base64.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en base64.\r\n     * @returns La chaîne base64 résultante.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array): string {\r\n      let binaryString = \"\";\r\n      for (let i = 0; i < uint8Array.length; i++) {\r\n        binaryString += String.fromCharCode(uint8Array[i]);\r\n      }\r\n      return window.btoa(binaryString);\r\n    }\r\n    /**\r\n     * Convertit un objet Blob en chaîne base64 ou ArrayBuffer.\r\n     * @param blob - Le Blob à convertir.\r\n     * @returns La chaîne base64 ou ArrayBuffer résultante (sous forme de promesse).\r\n     */\r\n    public async fromBlob(blob: Blob): Promise<string | ArrayBuffer> {\r\n      return new Promise<string | ArrayBuffer>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = function () {\r\n          const { result } = reader;\r\n          const base64String = result || \"\";\r\n          resolve(base64String);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    }\r\n  }\r\n  export class BlobTransformer {\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array, contentType?: string): Blob {\r\n      contentType = contentType ?? \"\";\r\n      return new Blob([uint8Array], { type: contentType });\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromFile(file: File): Blob {\r\n      return file.slice(0, file.size, file.type);\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromBase64String(base64String: string, contentType?: string): Blob {\r\n      contentType = contentType || \"\";\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      return new Blob([byteArray], { type: contentType });\r\n    }\r\n  }\r\n\r\n  export class FileTransformer {\r\n    /**\r\n     * Convertit un fichier en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public toBase64(file: File): Promise<unknown> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du fichier.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @param formatString - (Optionnel) Indique si la chaîne base64 est formatée.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromBase64String(\r\n      base64String: string,\r\n      contentType?: string | null,\r\n      fileName?: string | null,\r\n      formatString: boolean = true\r\n    ): File {\r\n      contentType = contentType || \"\";\r\n      const fileInfo = formatString ? base64String.split(\",\")[1] : base64String;\r\n      const byteCharacters = window.atob(fileInfo);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      const blob = new Blob([byteArray], { type: contentType });\r\n      fileName = fileName || \"image\";\r\n      return new File([blob], fileName, { type: contentType });\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet File.\r\n     * @param uint8Array - Le tableau Uint8Array.\r\n     * @param mimeType - Le type MIME du fichier.\r\n     * @param fileName - Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromUint8Array(\r\n      uint8Array: Uint8Array,\r\n      mimeType: string,\r\n      fileName: string\r\n    ): File {\r\n      return new File(uint8Array as any, fileName, { type: mimeType });\r\n    }\r\n  }\r\n  export class FormDataTransformer {\r\n    private _data: object | undefined;\r\n    constructor(data: object | FormData) {\r\n      this._data = data;\r\n    }\r\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\r\n    public transform(): FormData {\r\n      const formData = new FormData();\r\n      if (typeof this._data === \"object\") {\r\n        let data = this._data as any;\r\n        try {\r\n          for (const key in this._data) {\r\n            if (this._data.hasOwnProperty(key)) {\r\n              formData.append(key, data[key]);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return formData;\r\n    }\r\n    /**\r\n     * Revertit un objet FormData en objet JavaScript.\r\n     * @returns L'objet JavaScript résultant.\r\n     */\r\n    public reverse(): object {\r\n      let elementObject: object = {};\r\n      if (this._data instanceof FormData) {\r\n        try {\r\n          const tempObject: any = {};\r\n          this._data.forEach((value, key) => {\r\n            tempObject[key] = value;\r\n          });\r\n          elementObject = { ...tempObject };\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return elementObject;\r\n    }\r\n    /**\r\n     * Option de transformation spécifique.\r\n     * @param option - L'option de transformation ('onlyobject', 'onlyformdata', 'auto').\r\n     * @returns L'objet ou le FormData résultant en fonction de l'option spécifiée.\r\n     */\r\n    public option(option: string) {\r\n      if (option === \"onlyobject\") {\r\n        if (this._data instanceof FormData) {\r\n          return this.reverse();\r\n        }\r\n        return this._data;\r\n      }\r\n      if (option === \"onlyformdata\") {\r\n        if (this._data instanceof FormData) {\r\n          return this._data;\r\n        }\r\n        return this.transform();\r\n      }\r\n      if (option === \"auto\") {\r\n        return this.auto();\r\n      }\r\n    }\r\n    private auto() {\r\n      if (this._data instanceof FormData) {\r\n        return this.reverse();\r\n      } else {\r\n        return this.transform();\r\n      }\r\n    }\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(self, () => {\nreturn ","declare type RegexType = 'email' | 'phone-number' | 'number' | 'strong-password' | 'url' | 'default-text' | 'fr-text' | 'en-text' | 'tr-text';\r\nexport default class Utils{\r\n    /**\r\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n     * @param audioPath Le chemin de la source audio.\r\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n     * @returns L'élément audio créé.\r\n     */\r\n    public static setAudio(audioPath:string, classname=null) {\r\n        const audio = document.createElement('audio');\r\n        if(classname != null){audio.classList.add(classname);}\r\n        const source = document.createElement('source');\r\n        source.src = this.resolvePath(audioPath);\r\n        source.type = \"audio/mpeg\";\r\n        audio.appendChild(source);\r\n        return audio;\r\n    }\r\n    public static textToHTMLElement(textHtml:string, targetName=\"div\", children:boolean = false):Element|HTMLCollection|null\r\n    {\r\n        const target = document.createElement(`${targetName}`);\r\n        target.innerHTML = textHtml;\r\n        if(true === children){return target.children;}\r\n        return target.firstElementChild\r\n    }\r\n    /**\r\n     * retourne un élément du dom\r\n     */\r\n    public static $$(element:Element|HTMLCollection|string){\r\n        if (element instanceof HTMLElement || element instanceof HTMLCollection) {\r\n            return element;\r\n        }else if(typeof element === 'string') {\r\n            const collection = document.querySelectorAll(`${element}`);\r\n            const el = document.querySelector(`${element}`);\r\n            if (collection !== null && collection.length>1) {\r\n                return collection;\r\n            }\r\n            if(el !== null){\r\n                return el; \r\n            }\r\n        }else {throw new Error(\"Type of element is not supported\");}\r\n    }\r\n    /**\r\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n     * @param nodeList Un objet NodeList ou un élément HTML. \r\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n     * @returns \r\n     */\r\n    public static processNodes(nodeList: any, callback = (node: any, index?:number) => {}){\r\n        if(nodeList instanceof NodeList || Array.isArray(nodeList)) {\r\n        return Array.from(nodeList).forEach((node,i) => {\r\n            callback(node,i);\r\n        });\r\n        }\r\n        if(null !== nodeList && undefined !== nodeList)\r\n        {return callback(nodeList);}\r\n    }\r\n    \r\n\r\n    /**\r\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n     * @param type Le type d'expression régulière demandé.\r\n     * @returns L'expression régulière correspondante.\r\n     */\r\n    public static getRegexp(type: RegexType): RegExp {\r\n        switch (type) {\r\n            case 'email':\r\n            return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\r\n            case 'phone-number':\r\n            return new RegExp(/^(0|\\\\+[1-9]{1,3})[0-9 ]+$/);\r\n            case 'number':\r\n            return new RegExp(/^[0-9]+$/);\r\n            case 'strong-password':\r\n            return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\r\n            case 'url':\r\n            return new RegExp(/^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&amp;%\\$#_]*)?$/);\r\n            case 'default-text':\r\n            return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\r\n            case 'fr-text':\r\n            return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\r\n            case 'en-text':\r\n            return  new RegExp(/^[a-zA-Z '-]{1,40}$/);\r\n            case 'tr-text':\r\n            return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\r\n            default:\r\n            throw new Error('Type d\\'expression régulière non pris en charge.');\r\n        }\r\n    }\r\n    /**\r\n     * Résout le chemin d'une ressource en fonction de l'environnement d'exécution.\r\n     * @param path Le chemin de la ressource.\r\n     * @returns Le chemin résolu de la ressource.\r\n     */\r\n    public static resolvePath(path:string){\r\n        const PROJECT_NAME = window.location.pathname.split(\"/\")[1];\r\n        const ORIGIN = window.location.origin;\r\n        const PORT = window.location.port;\r\n        const HOST = window.location.host;\r\n        let _stylesheetsoutdir_;\r\n\r\n        if (HOST == \"localhost\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${PROJECT_NAME}/${path}`;\r\n        } else if (HOST !== \"localhost\" && PORT !== \"\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        } else {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        }\r\n    }\r\n    /**\r\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement. \r\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n     * @returns Un élément HTML représentant une zone interdite.\r\n     */\r\n    private static forbiddener(tag:string='td', backgroundColor?:string){\r\n        let forbiddenTag = document.createElement(tag)\r\n        forbiddenTag.setAttribute('class','forbidden')\r\n        const style = {\r\n            position:'absolute',\r\n            width: '100%',\r\n            height:'100%',\r\n            opacity: '.7',\r\n            zIndex: '10',\r\n            backgroundColor: backgroundColor ? backgroundColor : '#FFFFFF',\r\n        }\r\n        Object.assign(forbiddenTag.style, style)\r\n        return forbiddenTag as HTMLElement;\r\n    }\r\n    /**\r\n     * Réduit une chaîne de texte.\r\n     * @param text La chaîne de texte à réduire.\r\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n     * @returns La chaîne de texte réduite.\r\n     */\r\n    public static reduceText(text: string, maxLength: number = 14): string {\r\n        text = typeof text === \"string\" ? text.trim() : \"\";\r\n        if (text.length > maxLength) {\r\n          return `${text.substring(0, maxLength)}...`;\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * Changes the input text type to a number type and performs additional processing\r\n     * based on the specified parameters.\r\n     * \r\n     * @param attr - The CSS selector for the input elements to be processed.\r\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n     */\r\n    public static changeInputTextTypeToNumberType(attr: string,limit?: number | null,priceType: boolean = false,decimal?: number) {\r\n        this.processNodes(this.$$(attr), function (element) {\r\n          let input = element as HTMLInputElement;\r\n          if (input) {\r\n            input.addEventListener(\"input\", function () {\r\n              const regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\r\n              if (decimal) {\r\n                const getValue = input.value.replace(regExp, \"\");\r\n                input.value = `${parseFloat(getValue).toFixed(decimal)}`;\r\n              } else {\r\n                input.value = input.value.replace(regExp, \"\");\r\n              }\r\n              if (limit && parseInt(input.value) > limit) {\r\n                input.value = `${limit}`;\r\n              }\r\n            });\r\n          }\r\n        });\r\n    }\r\n    /**\r\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n     * and the background color for the forbidden tag.\r\n     * \r\n     * @param tag - The tag of the element to be disabled (default: \"td\").\r\n     * @param target - The target element to be disabled (default: undefined).\r\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n     */\r\n    public static disablor(tag = \"td\",target?: HTMLElement,trigger?: HTMLElement,backgroundColor?: string) {\r\n        const buttons = document.querySelectorAll(\r\n        \"[disablor],[self-disablor]\"\r\n        );\r\n        try {\r\n        if (!trigger && !buttons) {\r\n            throw new Error(\r\n            \"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n            );\r\n        }\r\n        this.processNodes(buttons, (button: HTMLElement) => {\r\n            button.addEventListener(\"click\", () => {\r\n            const self = button.hasAttribute(\"self-disablor\");\r\n            let item = self ? button : (button.closest(\"[disablor]\") as HTMLElement);\r\n    \r\n            if (!target && !item) {\r\n                throw new Error(\r\n                \"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n                );\r\n            }\r\n            if (item) {\r\n                item.style.position = \"relative\";\r\n                item.insertBefore(this.forbiddener(tag, backgroundColor), item.firstChild);\r\n                if (item instanceof HTMLButtonElement) {\r\n                item.setAttribute(\"disabled\", \"true\");\r\n                }\r\n            }\r\n            });\r\n        });\r\n        } catch (error) {\r\n            console.error(\"Une erreur s'est produit: \", error);\r\n        }\r\n    }\r\n    /**\r\n     * Adds an asterisk indicator to labels associated with required form fields.\r\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n     * of the 'required-field' attribute. The function utilizes the processNodes method\r\n     * to iterate through the matched labels and append the asterisk.\r\n     */\r\n    public static setAsteriskToRequiredField() {\r\n        const asterisk = `<svg class=\"required-svg\">\r\n        <use xlink:href=\"../asset/icon.svg#asterisk\"></use>\r\n        </svg>`;\r\n        const labels = document.querySelectorAll(\"label[required-field]\");\r\n        if (labels) {\r\n            this.processNodes(labels, (node: HTMLLabelElement) => {\r\n                const rang = document.createRange();\r\n                const fragment = rang.createContextualFragment(asterisk);\r\n                node.appendChild(fragment);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * This method checks if the object contains a key with the given substring.\r\n     * @param object The object to be searched.\r\n     * @param substring The substring to search for.\r\n     * @param getKey An optional parameter to determine the type of return value.\r\n     *               If true, the method will return the key as a string.\r\n     *               If false or not provided, the method will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static hasKeyWithNameSubstring(object: any,substring: string,getKey?: boolean) {\r\n        for (let key in object) {\r\n          if (key.includes(substring)) {\r\n            if (undefined === getKey || false === getKey) {\r\n              return object[key];\r\n            }\r\n            if (true === getKey) {\r\n              return key;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * This method searches for an object's property by its key or short key.\r\n     * @param object The object to be searched.\r\n     * @param keyOrShortKey The key or short key to search for.\r\n     * @param key An optional parameter to determine the type of return value.\r\n     *            If true, the function will return the key as a string.\r\n     *            If false or not provided, the function will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static findObjectDataByKeyName(object: any,keyOrShorKey: string,key?: boolean) {\r\n        Object.keys(object).forEach((key) => {\r\n          if (key.includes(keyOrShorKey)) {\r\n            return object[key];\r\n          }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    public static findChar(string: string, limit: number, returnBool:boolean = false) {\r\n        for (let i = 0; i <= limit; i++) {\r\n          const index = string.indexOf(i.toString());\r\n          if (index !== -1) {\r\n            return returnBool ? true : i.toString();\r\n          }\r\n        }\r\n        return returnBool ? false : null;\r\n      }\r\n      \r\n    public static findComputedStyle(\r\n        element: HTMLElement,\r\n        property: string | Array<string>\r\n      ) {\r\n        const styles = window.getComputedStyle(element);\r\n        const propertiesObject: any = {};\r\n        try {\r\n          if (!element) {\r\n            throw new Error(\"Element not found\");\r\n          }\r\n          if (!property) {\r\n            throw new Error(\"Property is required\");\r\n          }\r\n          if (Array.isArray(property) && property.length > 0) {\r\n            property.forEach((props) => {\r\n              propertiesObject[`${props}`] = styles.getPropertyValue(`${props}`);\r\n            });\r\n            return propertiesObject;\r\n          }\r\n          if (typeof property === \"string\") {\r\n            return styles.getPropertyValue(`${property}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * A function to escape special characters in a string using the DOM API.\r\n     * \r\n     * @param str - The input string to be escaped.\r\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n     */\r\n    public static escape(str?: string): string {\r\n        if (!str) {\r\n          return \"\";\r\n        }\r\n        const div = document.createElement(\"div\");\r\n        div.appendChild(document.createTextNode(str));\r\n        return div.innerHTML;\r\n    }\r\n    /**\r\n     * This function takes an HTMLElement and a target string.\r\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n     * If no such element is found, it returns null.\r\n     * @param referent - The starting point of the search.\r\n     * @param target - The CSS selector used to find the desired element.\r\n     * @returns The first Element with a matching target, or null if no such element is found.\r\n     */\r\n    public static findHTMLElementBy(referent: HTMLElement,target: string): Element | null {\r\n        let currentElement = referent as Element | null;\r\n        if (currentElement) {\r\n          while ((currentElement = currentElement.previousElementSibling)) {\r\n            const charCounterSpan = currentElement.querySelector(target);\r\n            if (charCounterSpan) {\r\n              return charCounterSpan;\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n     * If no attributes are provided, it returns an empty string.\r\n     * @param attributes - An object containing HTML attributes.\r\n     * @returns A string representing the attributes.\r\n     */\r\n    public static formatHTMLAttributes(attributes: any) {\r\n        let attrs = \"\";\r\n        if (attributes) {\r\n          for (const [key, value] of Object.entries(attributes)) {\r\n            if (key) {\r\n              attrs += `${key}='${value}'`;\r\n            }\r\n          }\r\n        }\r\n        return attrs.trim();\r\n    }\r\n      \r\n  \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(951);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","input","fileElement","autoEvent","progressContainer","this","$$","HTMLElement","document","querySelector","load","callback","files","setUploading","length","singleUploading","file","multipleUploading","_files","HTMLInputElement","addEventListener","Error","error","console","log","_file","fileReader","FileReader","progress","onload","base64String","result","name","toString","contentType","type","size","arrayBuffer","processNodes","element","src","readAsDataURL","i","Blob","reader","push","autoUploadFile","transformer","Transformer","FileTransformer","filesInput","querySelectorAll","fileInput","value","dataset","fromBase64String","newFileList","DataTransfer","items","add","Object","defineProperty","writable","removeAttribute","changeEvent","Event","dispatchEvent","progressBar","progressHTML","appendChild","XMLHttpRequest","upload","e","lengthComputable","percentComplete","loaded","total","style","width","innerHTML","toFixed","textToHTMLElement","position","createInput","createElement","setAttribute","display","__webpack_exports__","getMimeType","get","extension","split","fileType","Base64Transformer","toFile","fileName","byteCharacters","window","atob","byteArrays","_fileName","offset","slice","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","File","fromFile","Promise","resolve","reject","onloadend","onerror","toUint8Array","binaryString","bytes","fromUint8Array","uint8Array","String","fromCharCode","btoa","fromBlob","blob","BlobTransformer","toBase64","formatString","fileInfo","mimeType","FormDataTransformer","data","_data","transform","formData","FormData","key","hasOwnProperty","append","reverse","elementObject","tempObject","forEach","assign","option","auto","setAudio","audioPath","classname","audio","classList","source","resolvePath","textHtml","targetName","children","target","firstElementChild","HTMLCollection","collection","el","nodeList","node","index","NodeList","isArray","from","getRegexp","RegExp","path","PROJECT_NAME","location","pathname","ORIGIN","origin","HOST","port","host","forbiddener","tag","backgroundColor","forbiddenTag","height","opacity","zIndex","reduceText","text","maxLength","trim","substring","changeInputTextTypeToNumberType","attr","limit","priceType","decimal","regExp","getValue","replace","parseFloat","parseInt","disablor","trigger","buttons","button","item","hasAttribute","closest","insertBefore","firstChild","HTMLButtonElement","setAsteriskToRequiredField","labels","fragment","createRange","createContextualFragment","hasKeyWithNameSubstring","object","getKey","includes","undefined","findObjectDataByKeyName","keyOrShorKey","keys","findChar","string","returnBool","indexOf","findComputedStyle","property","styles","getComputedStyle","propertiesObject","props","getPropertyValue","escape","str","div","createTextNode","findHTMLElementBy","referent","currentElement","previousElementSibling","charCounterSpan","formatHTMLAttributes","attributes","attrs","entries","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}