{"version":3,"file":"process-backend.min.js","mappings":"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","sources":["webpack://@easylibs/process-backend/webpack/universalModuleDefinition","webpack://@easylibs/process-backend/./src/process-backend.ts","webpack://@easylibs/process-backend/@easylibs/fetch-request/webpack/universalModuleDefinition","webpack://@easylibs/process-backend/@easylibs/fetch-request/webpack/startup","webpack://@easylibs/process-backend/@easylibs/fetch-request/src/fetch-request.ts","webpack://@easylibs/process-backend/@easylibs/transformer/webpack/universalModuleDefinition","webpack://@easylibs/process-backend/@easylibs/transformer/webpack/startup","webpack://@easylibs/process-backend/@easylibs/transformer/src/transformer.ts","webpack://@easylibs/process-backend/@easylibs/utils/webpack/universalModuleDefinition","webpack://@easylibs/process-backend/@easylibs/utils/src/utils.ts","webpack://@easylibs/process-backend/webpack/bootstrap","webpack://@easylibs/process-backend/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"process-backend\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"process-backend\"] = factory();\n\telse\n\t\troot[\"process-backend\"] = factory();\n})(self, () => {\nreturn ","import FetchRequest from \"@easylibs/fetch-request\";\r\nimport TempData from \"@easylibs/tempdata\";\r\nimport {Transformer} from \"@easylibs/transformer\";\r\nimport Utils from \"@easylibs/utils\";\r\n\r\nexport default class ProcessBackend {\r\n  private _uri: string;\r\n  private _database: TempData;\r\n  private _response: any = null;\r\n  /**\r\n   *\r\n   * @param database - base de données\r\n   * @param uri - L'URL de destination où les données du formulaire seront envoyées.\r\n   */\r\n  constructor(database: TempData, uri: string) {\r\n    this._database = database;\r\n    this._uri = uri;\r\n  }\r\n  /**\r\n   * Persists data to the server.\r\n   *\r\n   * @param redirectURL - The URL to redirect to after the data is persisted.\r\n   * @param callback - The callback function to be called after the data is persisted.\r\n   * @returns A promise that resolves when the data is persisted.\r\n   */\r\n  public async persist(\r\n    redirectURL?: string,\r\n    callback: Function = (result: any) => {}\r\n  ): Promise<void> {\r\n    const elements = await this._database.getIndexedData();\r\n    const promises: any[] | PromiseLike<any[]> = [];\r\n    if (elements instanceof Array && elements.length > 0) {\r\n      for (let i = 0; i < elements.length; i++) {\r\n        ((currentIndex) => {\r\n          promises.push(\r\n            new Promise(async (resolve, reject) => {\r\n              try {\r\n                const data = await this._database._getData(\r\n                  currentIndex,\r\n                  \"classic-object\"\r\n                );\r\n                delete data[\"@base64String\"];\r\n                delete data[\"@id\"];\r\n                resolve(data);\r\n              } catch (error) {\r\n                reject(\"Désolé une probleme est survenu: \" + error);\r\n              }\r\n            })\r\n          );\r\n        })(i);\r\n      }\r\n    }\r\n    const formData = this.normalizeArrayField(await Promise.all(promises));\r\n    const setResponse = (result: any) => {\r\n      this._response = result;\r\n      callback(this._response);\r\n      if (redirectURL && this._response && this._response.success) {\r\n        return (window.location.href = redirectURL || \"/\");\r\n      }\r\n      return this._response;\r\n    };\r\n    new FetchRequest({\r\n      uri: this._uri,\r\n      data: formData,\r\n      onPostFetch: setResponse,\r\n      options: {\r\n        method: \"POST\",\r\n        acceptDataFormat: \"form-data\",\r\n      },\r\n    });\r\n  }\r\n  /**\r\n   * Saves form data to the server.\r\n   *\r\n   * @param data - The data object containing the submiter, callback, redirectUrl, and loader properties.\r\n   * @param data.submiter - The submit button element.\r\n   * @param data.callback - The callback function to be called after the data is saved.\r\n   * @param data.redirectUrl - The URL to redirect to after the data is saved.\r\n   * @param data.loader - The loader HTML content to display while saving the data.\r\n   */\r\n  public save(data: {\r\n    submiter: HTMLElement;\r\n    callback: Function;\r\n    redirectUrl?: string;\r\n    loader?: string;\r\n    preFetchAction?: Function;\r\n  }) {\r\n    const form =\r\n      (data.submiter.closest(\"form\") as HTMLFormElement) ??\r\n      (document.querySelector(\"form\") as HTMLFormElement);\r\n    data.submiter.addEventListener(\"click\", async (e) => {\r\n      e.preventDefault();\r\n      const isEmpty = await this._database._isEmpty();\r\n      if (true === isEmpty && !form.checkValidity()) {\r\n        return form.reportValidity();\r\n      }\r\n      const innerSubmiter = Utils.escape(data.submiter.innerHTML);\r\n      if (data.loader) {\r\n        data.submiter.innerHTML = data.loader;\r\n      }\r\n      if (true === isEmpty && form.checkValidity()) {\r\n        const formData = new FormData(form);\r\n        if(data.preFetchAction){data.preFetchAction(formData);}\r\n        const onPostFetch = function () {\r\n          const { response } = request;\r\n          data.submiter.innerHTML = innerSubmiter;\r\n          if (data.redirectUrl && response[\"success\"] === true) {\r\n            data.callback(response);\r\n            return (window.location.href = data.redirectUrl);\r\n          }\r\n          return data.callback(response);\r\n        };\r\n        const request = new FetchRequest({\r\n          uri: this._uri,\r\n          data: formData,\r\n          onPostFetch,\r\n          options: {\r\n            method: \"POST\",\r\n            acceptDataFormat: \"form-data\",\r\n          },\r\n        });\r\n        return;\r\n      }\r\n\r\n      form.setAttribute(\"novalidate\", \"\");\r\n      await this.persist(data.redirectUrl, (response: any) => {\r\n        data.submiter.innerHTML = innerSubmiter;\r\n        data.callback(response);\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * Normalizes an array field into a FormData object.\r\n   * This method takes an array of data objects and normalizes it into a FormData object. It handles files within the data objects by transforming them into Blobs using a BlobTransformer. The resulting FormData object is returned.\r\n   * @param datas - The array of data objects to be normalized.\r\n   * @returns The normalized FormData object.\r\n   */\r\n  private normalizeArrayField(datas: Array<any>): FormData {\r\n    const transformer = new Transformer.BlobTransformer();\r\n    let index = 0;\r\n    return datas.reduce((result: FormData, data) => {\r\n      const objectsFormData = Object.keys(data).reduce((formData, key) => {\r\n        const files = data[key] as Array<File>;\r\n        if (Array.isArray(files) && files.length > 0) {\r\n          files.forEach((file) => {\r\n            formData.append(key, transformer.fromFile(file), file.name);\r\n          });\r\n        } else {\r\n          formData.set(key, data[key]);\r\n        }\r\n        return formData;\r\n      }, new FormData());\r\n      objectsFormData.forEach((value, key) => {\r\n        result.append(key, value);\r\n      });\r\n      index++;\r\n      return result;\r\n    }, new FormData());\r\n  }\r\n  /**\r\n   * Retourne la réponse du serveur.\r\n   */\r\n  public get response(): any {\r\n    return this._response;\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fetch-request\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fetch-request\"] = factory();\n\telse\n\t\troot[\"fetch-request\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/fetch-request.ts\"](0, __webpack_exports__);\n","declare type FetchRequestType = {\r\n    uri: string,\r\n    data?: Object|FormData|null,\r\n    submiter?: HTMLElement|null,\r\n    options?: {\r\n        method?: 'GET' | 'POST',\r\n        headers?: Object,\r\n        body?: any,\r\n        credentials?: \"omit\" | \"same-origin\",\r\n        mode?: \"cors\" | \"no-cors\" | \"same-origin\",\r\n        cache?: \"default\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\",\r\n        timeOut?: number,\r\n        fetchOptions?: RequestInit,\r\n        isBinaryFileDownload?: boolean,\r\n        contentType?: string,\r\n        acceptDataFormat?: \"form-data\" | \"classic-object\" | \"array\",\r\n    }\r\n    onPostFetch?: (response?:any) => any,\r\n    onPreFetch?: (that?:any) => any,\r\n    onSuccess?: (response:any) => any,\r\n    onError?: (error: unknown, status:number) => any\r\n}\r\n/**\r\n * Cette classe est une classe utilitaire conçue pour faciliter l'envoi de requêtes Fetch dans une application web. \r\n * Elle offre une interface simple pour effectuer des requêtes HTTP \r\n * et gérer les actions avant et après l'envoi de la requête.\r\n */\r\nexport default class FetchRequest{\r\n    private options: FetchRequestType;\r\n    private _response: any;\r\n    constructor(options: FetchRequestType) {\r\n        this.options = options;\r\n        if(options.submiter){\r\n            options.submiter.addEventListener('click', this.submitForm);\r\n        }else{\r\n            this.submitForm()\r\n        }\r\n    }\r\n    private fetchData = async () => {\r\n        try {\r\n            if(!this.options){\r\n                throw new Error(`Missing Options for the request`)\r\n            }\r\n            if(!this.options.uri){\r\n                throw new Error(\"URI is required\");\r\n            }\r\n            if(!this.options.options || !this.options.options.method){\r\n                throw new Error(\"The calling method is required\");\r\n            }\r\n            const response = await fetch(this.options.uri, {\r\n                method: this.options.options.method ,\r\n                body: this._formData,\r\n                headers: {\r\n                    'X-Requested-With': 'XMLHttpRequest'\r\n                }\r\n            });\r\n            const dataResponse = await response.json();\r\n            this._response = dataResponse;\r\n            if(this.options.onPostFetch)\r\n            {this.options.onPostFetch(dataResponse);}\r\n            if(this.options.onSuccess && response.status === 200){\r\n                return this.options.onSuccess(dataResponse);\r\n            }\r\n            \r\n        } catch (error) {\r\n            if(this.options.onError && this._response.status !== 200){\r\n                return this.options.onError(error, this._response.status);\r\n            }\r\n            console.error(error);\r\n        }\r\n    }\r\n    private preFetch = async () => {\r\n        if(typeof this.options.onPreFetch === 'function') {\r\n            let data = await this.options.onPreFetch(this.options.data);\r\n            if(data){\r\n                this.options.data = data.data;\r\n            }\r\n        }\r\n    }\r\n    private postFetch = async () => {\r\n        if(this.options.submiter instanceof HTMLButtonElement)\r\n        {this.options.submiter.removeAttribute('disabled');}\r\n        return this.options.onPostFetch ? this.options.onPostFetch() : undefined;\r\n    }\r\n    private submitForm = async () => {\r\n        try{\r\n            if(this.options.onPreFetch){await this.preFetch();}\r\n            await this.fetchData();\r\n            if(this.options.onPostFetch){await this.postFetch();}\r\n        }catch(error){\r\n            console.error('Error executing query : ', error);\r\n        }\r\n    };\r\n    private createFormData = (data: object) => {\r\n        const formData = new FormData();\r\n        for (const [key, value] of Object.entries(data)) {\r\n            formData.append(key, value ?? \"\");\r\n        }\r\n        return formData;\r\n    }\r\n    private createJSON = (data: any[]|Object) => {\r\n        return JSON.stringify({ data: data });\r\n    }\r\n    private get _formData() {\r\n        const isFormData = (data: any): data is FormData => data instanceof FormData;\r\n        const isArray = (data: any): data is any[] => Array.isArray(data);\r\n        const isObject = (data: any): data is object => typeof data === 'object' && Object.keys(data).length > 0;\r\n\r\n        if(this.options.options){\r\n            const acceptDataFormat = this.options.options.acceptDataFormat;\r\n            if(acceptDataFormat){\r\n                switch (acceptDataFormat) {\r\n                    case \"form-data\":\r\n                        if (isFormData(this.options.data)) {\r\n                            return this.options.data;\r\n                        } else if (isArray(this.options.data)) {\r\n                            return this.createJSON(this.options.data);\r\n                        } else if (isObject(this.options.data)) {\r\n                            return this.createFormData(this.options.data);\r\n                        }\r\n                        break;\r\n                    case \"classic-object\":\r\n                        if (isFormData(this.options.data) || isArray(this.options.data) || isObject(this.options.data)) {\r\n                            return this.createJSON(isArray(this.options.data) ? this.options.data : this.options.data);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw Error(`The ${acceptDataFormat} format is not supported`);\r\n                }\r\n            }\r\n            }\r\n    }\r\n    public get response():any\r\n    {\r\n        return this._response;\r\n    }\r\n}\r\n\r\n\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"transformer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"transformer\"] = factory();\n\telse\n\t\troot[\"transformer\"] = factory();\n})(self, () => {\nreturn ","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/transformer.ts\"](0, __webpack_exports__);\n","function getMimeType(base64String: string, get: string = \"both\"): string {\r\n  const extension = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[1];\r\n  const fileType = base64String\r\n    .split(\",\")[0]\r\n    .split(\":\")[1]\r\n    .split(\";\")[0]\r\n    .split(\"/\")[0];\r\n\r\n  if (\"type\" === get) {\r\n    return fileType;\r\n  }\r\n  if (\"extension\" === get) {\r\n    return extension;\r\n  }\r\n  return fileType + \"/\" + extension;\r\n}\r\n\r\n\r\nexport namespace Transformer {\r\n  export class Base64Transformer {\r\n    protected base64String: string = \"\";\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public toFile(base64String: string, fileName?: string): File {\r\n      this.base64String = base64String;\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteArrays: Array<Uint8Array> = [];\r\n      let _fileName = \"\";\r\n      for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n        const slice = byteCharacters.slice(offset, offset + 512);\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n          byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n      }\r\n      const extension = getMimeType(base64String, \"extension\");\r\n      const fileType = getMimeType(base64String, \"type\");\r\n      if (fileName) {\r\n        _fileName = fileName;\r\n      } else {\r\n        _fileName = `tranformed_file.${extension}`;\r\n      }\r\n      return new File(byteArrays, _fileName, {\r\n        type: `${fileType}/${extension}`,\r\n      });\r\n    }\r\n    /**\r\n     * Convertit un objet File en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public fromFile(file: File): Promise<any> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en tableau Uint8Array.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @returns Le tableau Uint8Array résultant.\r\n     */\r\n    public toUint8Array(base64String: string): Uint8Array {\r\n      const binaryString = window.atob(base64String.split(\",\")[1]);\r\n      const { length } = binaryString;\r\n      const bytes = new Uint8Array(length);\r\n      for (let i = 0; i < length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n      }\r\n      return bytes;\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en chaîne base64.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en base64.\r\n     * @returns La chaîne base64 résultante.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array): string {\r\n      let binaryString = \"\";\r\n      for (let i = 0; i < uint8Array.length; i++) {\r\n        binaryString += String.fromCharCode(uint8Array[i]);\r\n      }\r\n      return window.btoa(binaryString);\r\n    }\r\n    /**\r\n     * Convertit un objet Blob en chaîne base64 ou ArrayBuffer.\r\n     * @param blob - Le Blob à convertir.\r\n     * @returns La chaîne base64 ou ArrayBuffer résultante (sous forme de promesse).\r\n     */\r\n    public async fromBlob(blob: Blob): Promise<string | ArrayBuffer> {\r\n      return new Promise<string | ArrayBuffer>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = function () {\r\n          const { result } = reader;\r\n          const base64String = result || \"\";\r\n          resolve(base64String);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    }\r\n  }\r\n  export class BlobTransformer {\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array, contentType?: string): Blob {\r\n      contentType = contentType ?? \"\";\r\n      return new Blob([uint8Array], { type: contentType });\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromFile(file: File): Blob {\r\n      return file.slice(0, file.size, file.type);\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromBase64String(base64String: string, contentType?: string): Blob {\r\n      contentType = contentType || \"\";\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      return new Blob([byteArray], { type: contentType });\r\n    }\r\n  }\r\n\r\n  export class FileTransformer {\r\n    /**\r\n     * Convertit un fichier en chaîne base64.\r\n     * @param file - Le fichier à convertir en base64.\r\n     * @returns La chaîne base64 résultante (sous forme de promesse).\r\n     */\r\n    public toBase64(file: File): Promise<unknown> {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n    /**\r\n     * Convertit une chaîne base64 en objet File.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du fichier.\r\n     * @param fileName - (Optionnel) Le nom du fichier.\r\n     * @param formatString - (Optionnel) Indique si la chaîne base64 est formatée.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromBase64String(\r\n      base64String: string,\r\n      contentType?: string | null,\r\n      fileName?: string | null,\r\n      formatString: boolean = true\r\n    ): File {\r\n      contentType = contentType || \"\";\r\n      const fileInfo = formatString ? base64String.split(\",\")[1] : base64String;\r\n      const byteCharacters = window.atob(fileInfo);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      const blob = new Blob([byteArray], { type: contentType });\r\n      fileName = fileName || \"image\";\r\n      return new File([blob], fileName, { type: contentType });\r\n    }\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet File.\r\n     * @param uint8Array - Le tableau Uint8Array.\r\n     * @param mimeType - Le type MIME du fichier.\r\n     * @param fileName - Le nom du fichier.\r\n     * @returns Le fichier résultant.\r\n     */\r\n    public fromUint8Array(\r\n      uint8Array: Uint8Array,\r\n      mimeType: string,\r\n      fileName: string\r\n    ): File {\r\n      return new File(uint8Array as any, fileName, { type: mimeType });\r\n    }\r\n  }\r\n  export class FormDataTransformer {\r\n    private _data: object | undefined;\r\n    constructor(data: object | FormData) {\r\n      this._data = data;\r\n    }\r\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\r\n    public transform(): FormData {\r\n      const formData = new FormData();\r\n      if (typeof this._data === \"object\") {\r\n        let data = this._data as any;\r\n        try {\r\n          for (const key in this._data) {\r\n            if (this._data.hasOwnProperty(key)) {\r\n              formData.append(key, data[key]);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return formData;\r\n    }\r\n    /**\r\n     * Revertit un objet FormData en objet JavaScript.\r\n     * @returns L'objet JavaScript résultant.\r\n     */\r\n    public reverse(): object {\r\n      let elementObject: object = {};\r\n      if (this._data instanceof FormData) {\r\n        try {\r\n          const tempObject: any = {};\r\n          this._data.forEach((value, key) => {\r\n            tempObject[key] = value;\r\n          });\r\n          elementObject = { ...tempObject };\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return elementObject;\r\n    }\r\n    /**\r\n     * Option de transformation spécifique.\r\n     * @param option - L'option de transformation ('onlyobject', 'onlyformdata', 'auto').\r\n     * @returns L'objet ou le FormData résultant en fonction de l'option spécifiée.\r\n     */\r\n    public option(option: string) {\r\n      if (option === \"onlyobject\") {\r\n        if (this._data instanceof FormData) {\r\n          return this.reverse();\r\n        }\r\n        return this._data;\r\n      }\r\n      if (option === \"onlyformdata\") {\r\n        if (this._data instanceof FormData) {\r\n          return this._data;\r\n        }\r\n        return this.transform();\r\n      }\r\n      if (option === \"auto\") {\r\n        return this.auto();\r\n      }\r\n    }\r\n    private auto() {\r\n      if (this._data instanceof FormData) {\r\n        return this.reverse();\r\n      } else {\r\n        return this.transform();\r\n      }\r\n    }\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(self, () => {\nreturn ","declare type RegexType = 'email' | 'phone-number' | 'number' | 'strong-password' | 'url' | 'default-text' | 'fr-text' | 'en-text' | 'tr-text';\r\nexport default class Utils{\r\n    /**\r\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n     * @param audioPath Le chemin de la source audio.\r\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n     * @returns L'élément audio créé.\r\n     */\r\n    public static setAudio(audioPath:string, classname=null) {\r\n        const audio = document.createElement('audio');\r\n        if(classname != null){audio.classList.add(classname);}\r\n        const source = document.createElement('source');\r\n        source.src = this.resolvePath(audioPath);\r\n        source.type = \"audio/mpeg\";\r\n        audio.appendChild(source);\r\n        return audio;\r\n    }\r\n    public static textToHTMLElement(textHtml:string, targetName=\"div\", children:boolean = false):Element|HTMLCollection|null\r\n    {\r\n        const target = document.createElement(`${targetName}`);\r\n        target.innerHTML = textHtml;\r\n        if(true === children){return target.children;}\r\n        return target.firstElementChild\r\n    }\r\n    /**\r\n     * retourne un élément du dom\r\n     */\r\n    public static $$(element:Element|HTMLCollection|string){\r\n        if (element instanceof HTMLElement || element instanceof HTMLCollection) {\r\n            return element;\r\n        }else if(typeof element === 'string') {\r\n            const collection = document.querySelectorAll(`${element}`);\r\n            const el = document.querySelector(`${element}`);\r\n            if (collection !== null && collection.length>1) {\r\n                return collection;\r\n            }\r\n            if(el !== null){\r\n                return el; \r\n            }\r\n        }else {throw new Error(\"Type of element is not supported\");}\r\n    }\r\n    /**\r\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n     * @param nodeList Un objet NodeList ou un élément HTML. \r\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n     * @returns \r\n     */\r\n    public static processNodes(nodeList: any, callback = (node: any, index?:number) => {}){\r\n        if(nodeList instanceof NodeList || Array.isArray(nodeList)) {\r\n        return Array.from(nodeList).forEach((node,i) => {\r\n            callback(node,i);\r\n        });\r\n        }\r\n        if(null !== nodeList && undefined !== nodeList)\r\n        {return callback(nodeList);}\r\n    }\r\n    \r\n\r\n    /**\r\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n     * @param type Le type d'expression régulière demandé.\r\n     * @returns L'expression régulière correspondante.\r\n     */\r\n    public static getRegexp(type: RegexType): RegExp {\r\n        switch (type) {\r\n            case 'email':\r\n            return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\r\n            case 'phone-number':\r\n            return new RegExp(/^(0|\\\\+[1-9]{1,3})[0-9 ]+$/);\r\n            case 'number':\r\n            return new RegExp(/^[0-9]+$/);\r\n            case 'strong-password':\r\n            return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\r\n            case 'url':\r\n            return new RegExp(/^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&amp;%\\$#_]*)?$/);\r\n            case 'default-text':\r\n            return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\r\n            case 'fr-text':\r\n            return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\r\n            case 'en-text':\r\n            return  new RegExp(/^[a-zA-Z '-]{1,40}$/);\r\n            case 'tr-text':\r\n            return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\r\n            default:\r\n            throw new Error('Type d\\'expression régulière non pris en charge.');\r\n        }\r\n    }\r\n    /**\r\n     * Résout le chemin d'une ressource en fonction de l'environnement d'exécution.\r\n     * @param path Le chemin de la ressource.\r\n     * @returns Le chemin résolu de la ressource.\r\n     */\r\n    public static resolvePath(path:string){\r\n        const PROJECT_NAME = window.location.pathname.split(\"/\")[1];\r\n        const ORIGIN = window.location.origin;\r\n        const PORT = window.location.port;\r\n        const HOST = window.location.host;\r\n        let _stylesheetsoutdir_;\r\n\r\n        if (HOST == \"localhost\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${PROJECT_NAME}/${path}`;\r\n        } else if (HOST !== \"localhost\" && PORT !== \"\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        } else {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        }\r\n    }\r\n    /**\r\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement. \r\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n     * @returns Un élément HTML représentant une zone interdite.\r\n     */\r\n    private static forbiddener(tag:string='td', backgroundColor?:string){\r\n        let forbiddenTag = document.createElement(tag)\r\n        forbiddenTag.setAttribute('class','forbidden')\r\n        const style = {\r\n            position:'absolute',\r\n            width: '100%',\r\n            height:'100%',\r\n            opacity: '.7',\r\n            zIndex: '10',\r\n            backgroundColor: backgroundColor ? backgroundColor : '#FFFFFF',\r\n        }\r\n        Object.assign(forbiddenTag.style, style)\r\n        return forbiddenTag as HTMLElement;\r\n    }\r\n    /**\r\n     * Réduit une chaîne de texte.\r\n     * @param text La chaîne de texte à réduire.\r\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n     * @returns La chaîne de texte réduite.\r\n     */\r\n    public static reduceText(text: string, maxLength: number = 14): string {\r\n        text = typeof text === \"string\" ? text.trim() : \"\";\r\n        if (text.length > maxLength) {\r\n          return `${text.substring(0, maxLength)}...`;\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * Changes the input text type to a number type and performs additional processing\r\n     * based on the specified parameters.\r\n     * \r\n     * @param attr - The CSS selector for the input elements to be processed.\r\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n     */\r\n    public static changeInputTextTypeToNumberType(attr: string,limit?: number | null,priceType: boolean = false,decimal?: number) {\r\n        this.processNodes(this.$$(attr), function (element) {\r\n          let input = element as HTMLInputElement;\r\n          if (input) {\r\n            input.addEventListener(\"input\", function () {\r\n              const regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\r\n              if (decimal) {\r\n                const getValue = input.value.replace(regExp, \"\");\r\n                input.value = `${parseFloat(getValue).toFixed(decimal)}`;\r\n              } else {\r\n                input.value = input.value.replace(regExp, \"\");\r\n              }\r\n              if (limit && parseInt(input.value) > limit) {\r\n                input.value = `${limit}`;\r\n              }\r\n            });\r\n          }\r\n        });\r\n    }\r\n    /**\r\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n     * and the background color for the forbidden tag.\r\n     * \r\n     * @param tag - The tag of the element to be disabled (default: \"td\").\r\n     * @param target - The target element to be disabled (default: undefined).\r\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n     */\r\n    public static disablor(tag = \"td\",target?: HTMLElement,trigger?: HTMLElement,backgroundColor?: string) {\r\n        const buttons = document.querySelectorAll(\r\n        \"[disablor],[self-disablor]\"\r\n        );\r\n        try {\r\n        if (!trigger && !buttons) {\r\n            throw new Error(\r\n            \"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n            );\r\n        }\r\n        this.processNodes(buttons, (button: HTMLElement) => {\r\n            button.addEventListener(\"click\", () => {\r\n            const self = button.hasAttribute(\"self-disablor\");\r\n            let item = self ? button : (button.closest(\"[disablor]\") as HTMLElement);\r\n    \r\n            if (!target && !item) {\r\n                throw new Error(\r\n                \"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n                );\r\n            }\r\n            if (item) {\r\n                item.style.position = \"relative\";\r\n                item.insertBefore(this.forbiddener(tag, backgroundColor), item.firstChild);\r\n                if (item instanceof HTMLButtonElement) {\r\n                item.setAttribute(\"disabled\", \"true\");\r\n                }\r\n            }\r\n            });\r\n        });\r\n        } catch (error) {\r\n            console.error(\"Une erreur s'est produit: \", error);\r\n        }\r\n    }\r\n    /**\r\n     * Adds an asterisk indicator to labels associated with required form fields.\r\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n     * of the 'required-field' attribute. The function utilizes the processNodes method\r\n     * to iterate through the matched labels and append the asterisk.\r\n     */\r\n    public static setAsteriskToRequiredField() {\r\n        const asterisk = `<svg class=\"required-svg\">\r\n        <use xlink:href=\"../asset/icon.svg#asterisk\"></use>\r\n        </svg>`;\r\n        const labels = document.querySelectorAll(\"label[required-field]\");\r\n        if (labels) {\r\n            this.processNodes(labels, (node: HTMLLabelElement) => {\r\n                const rang = document.createRange();\r\n                const fragment = rang.createContextualFragment(asterisk);\r\n                node.appendChild(fragment);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * This method checks if the object contains a key with the given substring.\r\n     * @param object The object to be searched.\r\n     * @param substring The substring to search for.\r\n     * @param getKey An optional parameter to determine the type of return value.\r\n     *               If true, the method will return the key as a string.\r\n     *               If false or not provided, the method will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static hasKeyWithNameSubstring(object: any,substring: string,getKey?: boolean) {\r\n        for (let key in object) {\r\n          if (key.includes(substring)) {\r\n            if (undefined === getKey || false === getKey) {\r\n              return object[key];\r\n            }\r\n            if (true === getKey) {\r\n              return key;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * This method searches for an object's property by its key or short key.\r\n     * @param object The object to be searched.\r\n     * @param keyOrShortKey The key or short key to search for.\r\n     * @param key An optional parameter to determine the type of return value.\r\n     *            If true, the function will return the key as a string.\r\n     *            If false or not provided, the function will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static findObjectDataByKeyName(object: any,keyOrShorKey: string,key?: boolean) {\r\n        Object.keys(object).forEach((key) => {\r\n          if (key.includes(keyOrShorKey)) {\r\n            return object[key];\r\n          }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    public static findChar(string: string, limit: number, returnBool:boolean = false) {\r\n        for (let i = 0; i <= limit; i++) {\r\n          const index = string.indexOf(i.toString());\r\n          if (index !== -1) {\r\n            return returnBool ? true : i.toString();\r\n          }\r\n        }\r\n        return returnBool ? false : null;\r\n      }\r\n      \r\n    public static findComputedStyle(\r\n        element: HTMLElement,\r\n        property: string | Array<string>\r\n      ) {\r\n        const styles = window.getComputedStyle(element);\r\n        const propertiesObject: any = {};\r\n        try {\r\n          if (!element) {\r\n            throw new Error(\"Element not found\");\r\n          }\r\n          if (!property) {\r\n            throw new Error(\"Property is required\");\r\n          }\r\n          if (Array.isArray(property) && property.length > 0) {\r\n            property.forEach((props) => {\r\n              propertiesObject[`${props}`] = styles.getPropertyValue(`${props}`);\r\n            });\r\n            return propertiesObject;\r\n          }\r\n          if (typeof property === \"string\") {\r\n            return styles.getPropertyValue(`${property}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * A function to escape special characters in a string using the DOM API.\r\n     * \r\n     * @param str - The input string to be escaped.\r\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n     */\r\n    public static escape(str?: string): string {\r\n        if (!str) {\r\n          return \"\";\r\n        }\r\n        const div = document.createElement(\"div\");\r\n        div.appendChild(document.createTextNode(str));\r\n        return div.innerHTML;\r\n    }\r\n    /**\r\n     * This function takes an HTMLElement and a target string.\r\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n     * If no such element is found, it returns null.\r\n     * @param referent - The starting point of the search.\r\n     * @param target - The CSS selector used to find the desired element.\r\n     * @returns The first Element with a matching target, or null if no such element is found.\r\n     */\r\n    public static findHTMLElementBy(referent: HTMLElement,target: string): Element | null {\r\n        let currentElement = referent as Element | null;\r\n        if (currentElement) {\r\n          while ((currentElement = currentElement.previousElementSibling)) {\r\n            const charCounterSpan = currentElement.querySelector(target);\r\n            if (charCounterSpan) {\r\n              return charCounterSpan;\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n     * If no attributes are provided, it returns an empty string.\r\n     * @param attributes - An object containing HTML attributes.\r\n     * @returns A string representing the attributes.\r\n     */\r\n    public static formatHTMLAttributes(attributes: any) {\r\n        let attrs = \"\";\r\n        if (attributes) {\r\n          for (const [key, value] of Object.entries(attributes)) {\r\n            if (key) {\r\n              attrs += `${key}='${value}'`;\r\n            }\r\n          }\r\n        }\r\n        return attrs.trim();\r\n    }\r\n      \r\n  \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(287);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","database","uri","_response","this","_database","_uri","persist","redirectURL","callback","result","elements","getIndexedData","promises","Array","length","i","currentIndex","push","Promise","resolve","reject","data","_getData","error","formData","normalizeArrayField","all","onPostFetch","success","window","location","href","options","method","acceptDataFormat","save","form","submiter","closest","document","querySelector","addEventListener","e","preventDefault","isEmpty","_isEmpty","checkValidity","reportValidity","innerSubmiter","escape","innerHTML","loader","FormData","preFetchAction","response","request","redirectUrl","setAttribute","datas","transformer","Transformer","BlobTransformer","reduce","Object","keys","key","files","isArray","forEach","file","append","fromFile","name","set","value","__webpack_exports__","fetchData","__awaiter","Error","fetch","body","_formData","headers","dataResponse","json","onSuccess","status","onError","console","preFetch","onPreFetch","postFetch","HTMLButtonElement","removeAttribute","undefined","submitForm","createFormData","entries","createJSON","JSON","stringify","isFormData","isObject","getMimeType","base64String","get","extension","split","fileType","Base64Transformer","toFile","fileName","byteCharacters","atob","byteArrays","_fileName","offset","slice","byteNumbers","charCodeAt","byteArray","Uint8Array","File","type","reader","FileReader","onloadend","onerror","readAsDataURL","toUint8Array","binaryString","bytes","fromUint8Array","uint8Array","String","fromCharCode","btoa","fromBlob","blob","contentType","Blob","size","fromBase64String","FileTransformer","toBase64","formatString","fileInfo","mimeType","FormDataTransformer","_data","transform","hasOwnProperty","reverse","elementObject","tempObject","assign","option","auto","setAudio","audioPath","classname","audio","createElement","classList","add","source","src","resolvePath","appendChild","textToHTMLElement","textHtml","targetName","children","target","firstElementChild","$$","element","HTMLElement","HTMLCollection","collection","querySelectorAll","el","processNodes","nodeList","node","index","NodeList","from","getRegexp","RegExp","path","PROJECT_NAME","pathname","ORIGIN","origin","HOST","port","host","forbiddener","tag","backgroundColor","forbiddenTag","style","position","width","height","opacity","zIndex","reduceText","text","maxLength","trim","substring","changeInputTextTypeToNumberType","attr","limit","priceType","decimal","input","regExp","getValue","replace","parseFloat","toFixed","parseInt","disablor","trigger","buttons","button","item","hasAttribute","insertBefore","firstChild","setAsteriskToRequiredField","labels","fragment","createRange","createContextualFragment","hasKeyWithNameSubstring","object","getKey","includes","findObjectDataByKeyName","keyOrShorKey","findChar","string","returnBool","indexOf","toString","findComputedStyle","property","styles","getComputedStyle","propertiesObject","props","getPropertyValue","str","div","createTextNode","findHTMLElementBy","referent","currentElement","previousElementSibling","charCounterSpan","formatHTMLAttributes","attributes","attrs","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}