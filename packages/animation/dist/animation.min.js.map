{"version":3,"file":"animation.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,YAAa,GAAIH,GACE,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,I,iGCET,MAAqBC,EACnB,sBAAOC,CAAgBC,GACrBA,EAAED,iBACJ,CAOQ,eAAAE,CACNC,EACAC,EACAC,G,QAEA,QAAkBC,IAAdD,EAAyB,CAC3B,MAAME,EAA0B,QAAd,EAAAF,EAAUG,YAAI,QAAI,OAC9BC,EAAkC,QAAlB,EAAAJ,EAAUK,gBAAQ,QAAI,OACtC,mBAAEC,GAAuBN,EAE3BD,GACFD,EAAQS,UAAUC,OAAO,GAAGN,SAAiBE,KAC7CN,EAAQS,UAAUE,IAAI,GAAGP,QAAgBE,KAErCE,IAA6C,IAAvBA,GACxBI,YAAW,KACTZ,EAAQS,UAAUC,OAAO,GAAGN,QAAgBE,IAAgB,GAC3D,OAGLN,EAAQS,UAAUC,OAAO,GAAGN,QAAgBE,KAC5CN,EAAQS,UAAUE,IAAI,GAAGP,SAAiBE,KAEtCE,IAA6C,IAAvBA,GACxBI,YAAW,KACTZ,EAAQS,UAAUC,OAAO,GAAGN,SAAiBE,IAAgB,GAC5D,KAGT,CACF,CAQO,OAAAO,CAAgCC,G,QACrC,MAAMb,EAAiC,QAAnB,EAAAa,EAAQb,mBAAW,UACjC,UAAEC,GAAcY,EAChBC,EAAWD,EAAQd,QACnBgB,EAAiBD,aAAoBE,aAA0BF,aAAZZ,EAAYY,EAAUC,eACzEhB,EAAUe,aAAoBE,YAAcF,EAAWA,aAAQ,EAARA,EAAUf,QAEnEA,IACFkB,KAAKnB,gBAAgBiB,QAAAA,EAAkBhB,EAASC,EAAaC,GAErC,OAApBY,EAAQK,UACVnB,EAAQoB,MAAMD,QAAyB,QAAf,EAAAL,EAAQK,eAAO,QAAI,SAGjD,CAUO,QAAAE,CAAiCP,G,MACtC,MAAM,UAAEZ,GAAcY,EAChBC,EAAWD,EAAQd,QACnBgB,EAAiBD,aAAoBE,aAA0BF,aAAZZ,EAAYY,EAAUC,eACzEhB,EAAUe,aAAoBE,YAAcF,EAAWA,aAAQ,EAARA,EAAUf,QACjEC,EAAiC,QAAnB,EAAAa,EAAQb,mBAAW,UACjC,QAAEkB,EAAO,MAAEG,EAAK,YAAEC,GAAgBT,EAEpCd,QAA2BG,IAAhBF,IACTkB,GACEI,GACFA,EAAYC,iBAAiB,SAAS,KACpCN,KAAKnB,gBAAgBiB,QAAAA,EAAkBhB,EAASC,EAAaC,GAC7DU,YAAW,KACTZ,EAAQoB,MAAMD,QAAU,MAAM,GAC7BG,GAAS,EAAE,IAIlBJ,KAAKnB,gBAAgBiB,QAAAA,EAAkBhB,EAASC,EAAaC,GAE7DU,YAAW,KACTZ,EAAQoB,MAAMD,QAAU,MAAM,GAC7BG,GAAS,KAERC,GACFA,EAAYC,iBAAiB,SAAS,KACpCN,KAAKnB,gBAAgBiB,QAAAA,EAAkBhB,EAASC,EAAaC,GAC7DU,YAAW,KACTZ,EAAQU,QAAQ,GACfY,GAAS,EAAE,IAIlBJ,KAAKnB,gBAAgBiB,QAAAA,EAAkBhB,EAASC,EAAaC,GAE7DU,YAAW,KACTZ,EAAQU,QAAQ,GACfI,EAAQQ,OAAS,IAG1B,CAaO,UAAAG,CAAmCX,G,QACxC,IAAIY,GAAc,EAClB,MAAM,QAAE1B,EAAO,WAAE2B,EAAU,YAAEJ,EAAW,UAAErB,GAAcY,EAClDK,EAAyB,QAAf,EAAAL,EAAQK,eAAO,QAAI,SAC7B,mBAAES,GAAuBd,EACzBQ,EAAqB,QAAb,EAAAR,EAAQQ,aAAK,QAAI,IAE/B,IAkBE,GAjBIK,GACFA,EAAWH,iBAAiB,SAAS,KAC9BE,GAIHA,GAAc,EACdR,KAAKG,SAAS,CACZrB,UACAE,YACAiB,UACAG,YARFI,GAAc,EACdR,KAAKL,QAAQ,CAAEb,UAASE,YAAWiB,YASrC,SAIgBhB,IAAhBoB,IAA8BG,EAAa,CAW7C,GAVAH,EAAYC,iBAAiB,SAAS,KACpCE,GAAc,EACdR,KAAKG,SAAS,CACZrB,UACAE,YACAiB,UACAG,SACA,IAGAM,IAAmD,IAA7BA,EAAmBC,MAAgB,CAC3D,MAAMC,EAAcF,EAAmBG,IACvCC,SAASR,iBAAiB,SAAUS,IAClC,MAAMC,EAAcD,EAAME,QAExBR,IACAJ,GACCI,EAAWS,SAASF,IACpBX,EAAYa,SAASF,IACrBJ,EAAYM,SAASF,KAEtBR,GAAc,EACdR,KAAKG,SAAS,CACZrB,UACAE,YACAiB,UACAG,UAEJ,IAGFQ,EAAYN,iBAAiB,QAAS5B,EAAUC,gBAClD,CAEA,MACF,CAEA,QAAoBM,IAAhBoB,IAA8BG,GAAeE,EAC/C,IAAiC,IAA7BA,EAAmBC,MAAgB,CACd7B,aAAmBiB,aAA0BjB,SAAAA,EAASgB,eAA7E,MACMD,EAAWf,aAAmBiB,YAAcjB,EAAUA,aAAO,EAAPA,EAASA,QAErEgC,SAASR,iBAAiB,SAAUS,IAClC,MAAMC,EAAcD,EAAME,OACtBR,GAAcZ,IAAaY,EAAWS,SAASF,KAAiBnB,EAASqB,SAASF,KACpFR,GAAc,EACdR,KAAKG,SAAS,CACZrB,UACAE,YACAiB,UACAG,UAEJ,IAGEP,GACFA,EAASS,iBAAiB,QAAS5B,EAAUC,gBAEjD,KAAO,CACL,MAAMiC,EAAcF,EAAmBG,IACvCC,SAASR,iBAAiB,SAAUS,IAClC,MAAMC,EAAcD,EAAME,QACtBR,GAAeA,EAAWS,SAASF,IAAiBJ,EAAYM,SAASF,KAC3ER,GAAc,EACdR,KAAKG,SAAS,CACZrB,UACAE,YACAiB,UACAG,UAEJ,IAGFQ,EAAYN,iBAAiB,QAAS5B,EAAUC,gBAClD,CAEJ,CAAE,MAAOwC,GACP,MAAM,IAAIC,MAAM,iCAClB,CACF,EAvOF,W","sources":["webpack://@easylibs/animation/webpack/universalModuleDefinition","webpack://@easylibs/animation/./src/animation.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"animation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(self, () => {\nreturn ","declare type AnimeOptions = {\r\n  duration?: number; // Durée en millisecondes par défaut à 10\r\n  openButton?: HTMLElement;\r\n  element?: HTMLElement| {element:HTMLElement,animateElement:HTMLElement};\r\n  display?: string | null;\r\n  animation?: { type: string; position: string; clearAfterApplying?: boolean };\r\n  closeButton?: HTMLElement;\r\n  dispatchCloseEvent?: { key?: any; value: boolean };\r\n  delay?: number;\r\n  fromInToOut?: boolean;\r\n};\r\nexport default class Animation {\r\n  static stopPropagation(e: Event): void {\r\n    e.stopPropagation();\r\n  }\r\n  /**\r\n * Effectue une animation de commutation sur un élément HTML spécifié.\r\n * @param element - L'élément HTML sur lequel l'animation doit être appliquée.\r\n * @param fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n * @param animation - Les informations sur le type et la position de l'animation (facultatif).\r\n */\r\n  private switchAnimation(\r\n    element: HTMLElement,\r\n    fromInToOut: boolean,\r\n    animation?: { type: string; position: string; clearAfterApplying?: boolean }\r\n  ): void {\r\n    if (animation !== undefined) {\r\n      const animeType = animation.type ?? \"fade\";\r\n      const animePosition = animation.position ?? \"top\";\r\n      const { clearAfterApplying } = animation;\r\n\r\n      if (fromInToOut) {\r\n        element.classList.remove(`${animeType}-out-${animePosition}`);\r\n        element.classList.add(`${animeType}-in-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-in-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        element.classList.remove(`${animeType}-in-${animePosition}`);\r\n        element.classList.add(`${animeType}-out-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-out-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée sur un élément HTML spécifié.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée doit être appliquée.\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément après l'animation (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa lors de l'utilisation de la fonction `switchAnimation`.\r\n */\r\n  public animeIn<T extends AnimeOptions>(options: T): void {\r\n    const fromInToOut = options.fromInToOut ?? true;\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n\r\n    if (element) {\r\n      this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n      if (options.display !== null) {\r\n        element.style.display = options.display ?? \"block\";\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation de sortie sur un élément HTML spécifié, puis le masque ou le supprime.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n */\r\n  public animeOut<T extends AnimeOptions>(options: T): void {\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n    const fromInToOut = options.fromInToOut ?? false;\r\n    const { display, delay, closeButton } = options;\r\n\r\n    if (element && fromInToOut !== undefined) {\r\n      if (display) {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.style.display = \"none\";\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.style.display = \"none\";\r\n        }, delay || 0);\r\n      } else {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.remove();\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.remove();\r\n        }, options.delay || 0);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée ou de sortie sur un élément HTML spécifié en réponse aux événements du bouton d'ouverture et de fermeture.\r\n * @param options.openButton - Le bouton d'ouverture lié à l'élément.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.dispatchCloseEvent - L'événement de fermeture à dispatcher (facultatif).\r\n * @param options.dispatchCloseEvent.key - La clé de l'événement de fermeture.\r\n * @param options.dispatchCloseEvent.value - La valeur associée à l'événement de fermeture.\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n */\r\n  public animeInOut<T extends AnimeOptions>(options: T): void {\r\n    let modalIsOpen = false;\r\n    const { element, openButton, closeButton, animation } = options;\r\n    const display = options.display ?? \"block\";\r\n    const { dispatchCloseEvent } = options;\r\n    const delay = options.delay ?? 350;\r\n\r\n    try {\r\n      if (openButton) {\r\n        openButton.addEventListener(\"click\", () => {\r\n          if (!modalIsOpen) {\r\n            modalIsOpen = true;\r\n            this.animeIn({ element, animation, display });\r\n          } else {\r\n            modalIsOpen = false;\r\n            this.animeOut({\r\n              element,\r\n              animation,\r\n              display,\r\n              delay,\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      if (closeButton !== undefined && !modalIsOpen) {\r\n        closeButton.addEventListener(\"click\", () => {\r\n          modalIsOpen = false;\r\n          this.animeOut({\r\n            element,\r\n            animation,\r\n            display,\r\n            delay,\r\n          });\r\n        });\r\n\r\n        if (dispatchCloseEvent && dispatchCloseEvent.value === true) {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (\r\n              openButton &&\r\n              closeButton &&\r\n              !openButton.contains(eventTarget) &&\r\n              !closeButton.contains(eventTarget) &&\r\n              !dispElement.contains(eventTarget)\r\n            ) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (closeButton === undefined && !modalIsOpen && dispatchCloseEvent) {\r\n        if (dispatchCloseEvent.value === true) {\r\n          const animateElement = element instanceof HTMLElement ? undefined : element?.animateElement;\r\n          const _element = element instanceof HTMLElement ? element : element?.element;\r\n\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && _element && !openButton.contains(eventTarget) && !_element.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          if (_element) {\r\n            _element.addEventListener(\"click\", Animation.stopPropagation);\r\n          }\r\n        } else {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && !openButton.contains(eventTarget) && !dispElement.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throw new Error(\"HTMLElement null or undefined.\");\r\n    }\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","Animation","stopPropagation","e","switchAnimation","element","fromInToOut","animation","undefined","animeType","type","animePosition","position","clearAfterApplying","classList","remove","add","setTimeout","animeIn","options","_element","animateElement","HTMLElement","this","display","style","animeOut","delay","closeButton","addEventListener","animeInOut","modalIsOpen","openButton","dispatchCloseEvent","value","dispElement","key","document","event","eventTarget","target","contains","error","Error"],"sourceRoot":""}