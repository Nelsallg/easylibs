{"version":3,"file":"animation.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;ACVA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,8BAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,YAAY;AACZ;AACA,sCAAsC;AACtC;AACA;AACA,UAAU;AACV;AACA;AACA,iDAAiD;AACjD;AACA,YAAY;AACZ;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA,MAAM;AACN,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sources":["webpack://@easylibs/animation/webpack/universalModuleDefinition","webpack://@easylibs/animation/../../node_modules/path-browserify/index.js","webpack://@easylibs/animation/./src/scripts/helpers.ts","webpack://@easylibs/animation/./src/scripts/loader.ts","webpack://@easylibs/animation/webpack/bootstrap","webpack://@easylibs/animation/./src/animation.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"animation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(self, () => {\nreturn ","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","import { loadCSSAnimation } from \"./loader\";\r\nimport { AnimeOptions, LoaderOptions } from \"./types\";\r\n\r\n/**\r\n   * Effectue une animation de commutation sur un élément HTML spécifié.\r\n   * @param element - L'élément HTML sur lequel l'animation doit être appliquée.\r\n   * @param fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n   * @param animation - Les informations sur le type et la position de l'animation (facultatif).\r\n   */\r\nfunction switchAnimation(\r\n    element: HTMLElement,\r\n    fromInToOut: boolean,\r\n    animCSSProps?:LoaderOptions|null,\r\n    clearAfterApplying?: boolean\r\n  ): void {\r\n    if (animCSSProps) {\r\n      const animeType = animCSSProps.animationType ?? \"fade\";\r\n      const animePosition = animCSSProps.animationPosition ?? \"top\";\r\n      loadCSSAnimation(animCSSProps); // Charge les animations CSS si ce n'est pas déjà fait.\r\n      if (fromInToOut) {\r\n        element.classList.remove(`${animeType}-out-${animePosition}`);\r\n        element.classList.add(`${animeType}-in-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-in-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        element.classList.remove(`${animeType}-in-${animePosition}`);\r\n        element.classList.add(`${animeType}-out-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-out-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\nexport function getElement(options: AnimeOptions): { element: HTMLElement; animateElement?: HTMLElement } {\r\n    const _element = options.element;\r\n    return {\r\n      element: _element instanceof HTMLElement ? _element : _element?.element,\r\n      animateElement: _element instanceof HTMLElement ? undefined : _element?.animateElement,\r\n    };\r\n  }\r\n  \r\nexport function applyAnimation(\r\n  element: HTMLElement, \r\n  animateElement: HTMLElement | undefined, \r\n  fromInToOut: boolean, \r\n  options: AnimeOptions,\r\n  animCSSProps?:LoaderOptions): void {\r\n    switchAnimation(animateElement ?? element, fromInToOut, animCSSProps);\r\n    if (options.display !== null) {\r\n      setTimeout(() => {\r\n        element.style.display = options.display ?? \"none\";\r\n      }, options.delay || 0);\r\n    } else {\r\n      setTimeout(() => {\r\n        element.remove();\r\n      }, options.delay || 0);\r\n    }\r\n  }\r\n  ","import path from \"path\";\r\nimport { LoaderOptions } from \"./types\";\r\n\r\n// Structure de cache pour stocker les mixins déjà transformés\r\nconst mixinCache = new Map();\r\n\r\n/**\r\n * Fonction principale pour charger, transformer et appliquer les mixins avec des paramètres optionnels.\r\n */\r\nasync function loadCSSAnimation(options: LoaderOptions) {\r\n  try {\r\n    // Déterminer les noms des mixins pour \"in\" et \"out\"\r\n    const oppositeEnter = options.animationEnter === 'in' ? 'out' : 'in';\r\n    const mixinNames = [\r\n      `${options.animationType}-${options.animationEnter}-${options.animationPosition}`,\r\n      `${options.animationType}-${oppositeEnter}-${options.animationPosition}`\r\n    ];\r\n\r\n    let combinedCSS = '';\r\n\r\n    for (const mixinName of mixinNames) {\r\n      // Vérifier si le mixin est déjà dans le cache\r\n      if (mixinCache.has(mixinName)) {\r\n        combinedCSS += mixinCache.get(mixinName);\r\n      } else {\r\n        const SCSSContent = await fetchSCSS(options.animationType);\r\n        const css = convertMixinToCSS(SCSSContent, mixinName, options.animCSSProps);\r\n        // Stocker dans le cache si le mixin est transformé avec succès\r\n        if (css) {\r\n          mixinCache.set(mixinName, css);\r\n          combinedCSS += css;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (combinedCSS) {\r\n      addCSSToDocument(combinedCSS); // Ajoute le CSS transformé à la balise <style>\r\n    } else {\r\n      console.error('Mixin non trouvé.');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Fonction pour charger le contenu d'un fichier SCSS\r\n */\r\nasync function fetchSCSS(animationType) {\r\n  const url = path.resolve(__dirname, `node_modules/@easylibs/animation/dist/assets/styles/${animationType}.scss`);\r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error('Erreur lors du chargement du fichier SCSS');\r\n  }\r\n  return response.text();\r\n}\r\n\r\n/**\r\n * Fonction pour trouver et convertir un mixin en CSS, avec gestion des paramètres optionnels.\r\n */\r\nfunction convertMixinToCSS(SCSSContent:string, mixinName:string, animCSSProps:Record<string,any>) \r\n{\r\n  // Trouver le début du mixin spécifié\r\n  const mixinStartRegex = new RegExp(`(@mixin ${mixinName}\\\\(.*?\\\\)\\\\s*{)`, 's');\r\n  let mixinStartMatch = mixinStartRegex.exec(SCSSContent);\r\n  if (!mixinStartMatch) return null;\r\n  // Extraire le contenu à partir du début du mixin\r\n  const startIndex = mixinStartMatch.index + mixinStartMatch[1].length;\r\n  const SCSSContentAfterMixin = SCSSContent.substring(startIndex);\r\n  // Chercher le prochain '@' qui n'est pas immédiatement suivi par 'keyframes' après le mixin spécifié\r\n  const mixinEndRegex = /@keyframes[\\s\\S]+?}([\\s\\S]*?)(?=@mixin|$)/;\r\n  let mixinEndMatch = mixinEndRegex.exec(SCSSContentAfterMixin);\r\n\r\n  if (!mixinEndMatch) return null;\r\n\r\n  // Extraire tout le contenu jusqu'au prochain '@mixin' après les @keyframes\r\n  const endIndex = mixinEndMatch.index + mixinEndMatch[0].length;\r\n  let mixinContent = SCSSContent.substring(mixinStartMatch.index, startIndex + endIndex);\r\n  // Remplacer les variables animCSSProps dans le contenu extrait, si fourni\r\n  if (animCSSProps) {\r\n      Object.keys(animCSSProps).forEach(key => {\r\n          const paramRegex = new RegExp(`\\\\$${key}`, 'g');\r\n          mixinContent = mixinContent.replace(paramRegex, animCSSProps[key]);\r\n      });\r\n  }\r\n  return parseSCSSToCSS(mixinContent,animCSSProps);\r\n}\r\nfunction parseSCSSToCSS(mixinContent: string, animCSSProps: Record<string, any>): string {\r\n  // Pré-nettoyage pour supprimer les déclarations @mixin et les blocs @keyframes\r\n  let cleanedContent = mixinContent.replace(/@mixin\\s+[^\\{]+\\{/, '')\r\n  .replace(/@keyframes\\s+[^\\{]+\\{([^\\}]+\\})+\\}/g, '');\r\n  // Extraire les valeurs par défaut des paramètres du mixin\r\n  const defaultValuesRegex = /\\$([a-zA-Z0-9_-]+):\\s*([^;]+);/g;\r\n  let defaultValueMatches;\r\n  let defaultValues: Record<string, string> = {};\r\n  while ((defaultValueMatches = defaultValuesRegex.exec(cleanedContent)) !== null) {\r\n    defaultValues[defaultValueMatches[1]] = defaultValueMatches[2].trim();\r\n    // Supprimer la déclaration de la variable avec sa valeur par défaut\r\n    cleanedContent = cleanedContent.replace(defaultValueMatches[0], '');\r\n  }\r\n  // Remplacer les variables dans le contenu du mixin, en gérant spécifiquement $element\r\n  const variableRegex = /\\$([a-zA-Z0-9_-]+)/g;\r\n  cleanedContent = cleanedContent.replace(variableRegex, (match, varName) => {\r\n    // Traitement spécial pour $element\r\n    if (varName === 'element' && (!animCSSProps || !animCSSProps.hasOwnProperty(varName))) {\r\n      return ''; // Remplacer par une chaîne vide si $element est non défini\r\n    } else if (animCSSProps && animCSSProps.hasOwnProperty(varName)) {\r\n      return animCSSProps[varName]; // Utiliser la valeur d'animCSSProps si disponible\r\n    } else if (defaultValues.hasOwnProperty(varName)) {\r\n      return defaultValues[varName]; // Sinon, utiliser la valeur par défaut\r\n    } else {\r\n      return match; // Conserver la variable non remplacée si non trouvée\r\n    }\r\n  });\r\n  // Nettoyage final pour supprimer toute syntaxe résiduelle spécifique à SCSS\r\n  cleanedContent = cleanedContent.trim()\r\n  .replace(/^\\{|\\}$/g, '') // Supprimer les accolades extérieures\r\n  .replace(/\\#{\\$(.*?)}/g, '') // Supprimer les interpolations SCSS restantes\r\n  .replace(/(\\r\\n|\\r|\\n){2,}/g, '\\n') // Réduire les sauts de ligne multiples\r\n  .replace(/\\s{2,}/g, ' '); // Réduire les espaces multiples\r\n\r\n  return cleanedContent;\r\n}\r\n\r\n\r\n/**\r\n * Ajoute ou met à jour une balise <style> avec le CSS généré\r\n */\r\nfunction addCSSToDocument(css:string) {\r\n    let styleTag = document.getElementById('@animation-style');\r\n    if (!styleTag) {\r\n      styleTag = document.createElement('style');\r\n      styleTag.id = '@animation-style';\r\n      document.head.appendChild(styleTag);\r\n    }\r\n    styleTag.innerHTML += css; // Ajoute le nouveau CSS à la balise <style>\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { applyAnimation, getElement } from \"./scripts/helpers\";\r\nimport { AnimeOptions, LoaderOptions } from \"./scripts/types\";\r\n\r\n/**\r\n * Provides animation functionalities for HTML elements.\r\n */\r\nexport default class Animation {\r\n  /**\r\n   * Stops the propagation of the given event.\r\n   * @param e The event to stop propagation for.\r\n   */\r\n  private static stopPropagation(e: Event): void {\r\n    e.stopPropagation();\r\n  }\r\n\r\n  /**\r\n   * Performs an entrance animation on the specified HTML element.\r\n   * @param options Configuration options for the animation.\r\n   */\r\n  public animeIn(options: AnimeOptions, animCSSProps?:LoaderOptions|null): void {\r\n    const { element, animateElement } = getElement(options);\r\n    const fromInToOut = true;\r\n    applyAnimation(element, animateElement, fromInToOut, options,animCSSProps);\r\n  }\r\n\r\n  /**\r\n   * Performs an exit animation on the specified HTML element, then hides or removes it.\r\n   * @param options Configuration options for the animation.\r\n   */\r\n  public animeOut(options: AnimeOptions,animCSSProps?:LoaderOptions|null): void {\r\n    const { element, animateElement } = getElement(options);\r\n    const fromInToOut = false;\r\n    applyAnimation(element, animateElement, fromInToOut, options, animCSSProps);\r\n  }\r\n\r\n  /**\r\n   * Performs either an entrance or exit animation on the specified HTML element in response to open and close button events.\r\n   * @param options Configuration options for the animation, including elements and buttons involved.\r\n   */\r\n  public animeInOut(options: AnimeOptions): void {\r\n    let modalIsOpen = false;\r\n    const toggleModal = () => {\r\n      if (!modalIsOpen) {\r\n        this.animeIn(options);\r\n      } else {\r\n        this.animeOut(options);\r\n      }\r\n      modalIsOpen = !modalIsOpen;\r\n    };\r\n\r\n    options.openButton?.addEventListener(\"click\", toggleModal);\r\n    options.closeButton?.addEventListener(\"click\", toggleModal);\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}