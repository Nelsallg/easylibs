{"version":3,"file":"animation.js","mappings":"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","sources":["webpack://@easylibs/animation/webpack/universalModuleDefinition","webpack://@easylibs/animation/./src/animation.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"animation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(self, () => {\nreturn ","declare type AnimeOptions = {\r\n  duration?: number; // Durée en millisecondes par défaut à 10\r\n  openButton?: HTMLElement;\r\n  element?: HTMLElement| {element:HTMLElement,animateElement:HTMLElement};\r\n  display?: string | null;\r\n  animation?: { type: string; position: string; clearAfterApplying?: boolean };\r\n  closeButton?: HTMLElement;\r\n  dispatchCloseEvent?: { key?: any; value: boolean };\r\n  delay?: number;\r\n  fromInToOut?: boolean;\r\n};\r\nexport default class Animation {\r\n  static stopPropagation(e: Event): void {\r\n    e.stopPropagation();\r\n  }\r\n  /**\r\n * Effectue une animation de commutation sur un élément HTML spécifié.\r\n * @param element - L'élément HTML sur lequel l'animation doit être appliquée.\r\n * @param fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n * @param animation - Les informations sur le type et la position de l'animation (facultatif).\r\n */\r\n  private switchAnimation(\r\n    element: HTMLElement,\r\n    fromInToOut: boolean,\r\n    animation?: { type: string; position: string; clearAfterApplying?: boolean }\r\n  ): void {\r\n    if (animation !== undefined) {\r\n      const animeType = animation.type ?? \"fade\";\r\n      const animePosition = animation.position ?? \"top\";\r\n      const { clearAfterApplying } = animation;\r\n\r\n      if (fromInToOut) {\r\n        element.classList.remove(`${animeType}-out-${animePosition}`);\r\n        element.classList.add(`${animeType}-in-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-in-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        element.classList.remove(`${animeType}-in-${animePosition}`);\r\n        element.classList.add(`${animeType}-out-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-out-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée sur un élément HTML spécifié.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée doit être appliquée.\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément après l'animation (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa lors de l'utilisation de la fonction `switchAnimation`.\r\n */\r\n  public animeIn<T extends AnimeOptions>(options: T): void {\r\n    const fromInToOut = options.fromInToOut ?? true;\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n\r\n    if (element) {\r\n      this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n      if (options.display !== null) {\r\n        element.style.display = options.display ?? \"block\";\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation de sortie sur un élément HTML spécifié, puis le masque ou le supprime.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n */\r\n  public animeOut<T extends AnimeOptions>(options: T): void {\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n    const fromInToOut = options.fromInToOut ?? false;\r\n    const { display, delay, closeButton } = options;\r\n\r\n    if (element && fromInToOut !== undefined) {\r\n      if (display) {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.style.display = \"none\";\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.style.display = \"none\";\r\n        }, delay || 0);\r\n      } else {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.remove();\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.remove();\r\n        }, options.delay || 0);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée ou de sortie sur un élément HTML spécifié en réponse aux événements du bouton d'ouverture et de fermeture.\r\n * @param options.openButton - Le bouton d'ouverture lié à l'élément.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.dispatchCloseEvent - L'événement de fermeture à dispatcher (facultatif).\r\n * @param options.dispatchCloseEvent.key - La clé de l'événement de fermeture.\r\n * @param options.dispatchCloseEvent.value - La valeur associée à l'événement de fermeture.\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n */\r\n  public animeInOut<T extends AnimeOptions>(options: T): void {\r\n    let modalIsOpen = false;\r\n    const { element, openButton, closeButton, animation } = options;\r\n    const display = options.display ?? \"block\";\r\n    const { dispatchCloseEvent } = options;\r\n    const delay = options.delay ?? 350;\r\n\r\n    try {\r\n      if (openButton) {\r\n        openButton.addEventListener(\"click\", () => {\r\n          if (!modalIsOpen) {\r\n            modalIsOpen = true;\r\n            this.animeIn({ element, animation, display });\r\n          } else {\r\n            modalIsOpen = false;\r\n            this.animeOut({\r\n              element,\r\n              animation,\r\n              display,\r\n              delay,\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      if (closeButton !== undefined && !modalIsOpen) {\r\n        closeButton.addEventListener(\"click\", () => {\r\n          modalIsOpen = false;\r\n          this.animeOut({\r\n            element,\r\n            animation,\r\n            display,\r\n            delay,\r\n          });\r\n        });\r\n\r\n        if (dispatchCloseEvent && dispatchCloseEvent.value === true) {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (\r\n              openButton &&\r\n              closeButton &&\r\n              !openButton.contains(eventTarget) &&\r\n              !closeButton.contains(eventTarget) &&\r\n              !dispElement.contains(eventTarget)\r\n            ) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (closeButton === undefined && !modalIsOpen && dispatchCloseEvent) {\r\n        if (dispatchCloseEvent.value === true) {\r\n          const animateElement = element instanceof HTMLElement ? undefined : element?.animateElement;\r\n          const _element = element instanceof HTMLElement ? element : element?.element;\r\n\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && _element && !openButton.contains(eventTarget) && !_element.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          if (_element) {\r\n            _element.addEventListener(\"click\", Animation.stopPropagation);\r\n          }\r\n        } else {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && !openButton.contains(eventTarget) && !dispElement.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throw new Error(\"HTMLElement null or undefined.\");\r\n    }\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}