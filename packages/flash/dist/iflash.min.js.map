{"version":3,"file":"iflash.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,SAAU,GAAIH,GACK,iBAAZC,QACdA,QAAgB,OAAID,IAEpBD,EAAa,OAAIC,GAClB,CATD,CASGK,MAAM,I,oGCDT,eAAoBC,EAAiBC,EAAiBC,GAClD,IACIC,EAAU,GAMd,OAJIA,OADDC,IAAcJ,GAFN,CAAC,UAAU,QAAQ,UAAU,OAAO,eAEbK,QAAQL,IAAW,EACvC,QAAQE,sBAA+BD,KAAYD,0CAEnDA,EAEPG,CACX,C,GChBIG,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBJ,IAAjBK,EACH,OAAOA,EAAad,QAGrB,IAAIC,EAASU,EAAyBE,GAAY,CAGjDb,QAAS,CAAC,GAOX,OAHAe,EAAoBF,GAAUZ,EAAQA,EAAOD,QAASY,GAG/CX,EAAOD,OACf,C,sGCrBA,eAkBA,MAAagB,EAcX,WAAAC,CAAYC,EAAeC,EAAqBC,EAAoBC,GAClEC,KAAKJ,QAAUA,EACfI,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,CACd,CAEO,aAAOE,GACZ,IAAIJ,EAAQH,EAAeQ,SAASF,KAAKH,OACrCC,EAAOJ,EAAeS,QAAQH,KAAKF,MACnCC,EAAOL,EAAeU,QAAQJ,KAAKD,MAKvC,OAJI,IAAUF,QAASV,IAAcU,IAAU,IAAUH,EAAeW,cACxEX,EAAeY,WAAY,QACxBnB,IAAcY,GAAQ,KAAOD,IAC9BJ,EAAea,cAAe,GACzB,GAAGb,EAAeY,UAAU,8BAA8B,uBACnC,iBAATT,EAAkB,OAAOA,EAAM,QAAQ,uBAC9CH,EAAeW,aAAY,IAAAG,KAAI,cAAc,YAAY,mBAC7Dd,EAAeY,UAAU,UAAU,iEAE/BZ,EAAea,aAAa,OAAOT,EAAK,QAAQ,uEAE5CE,KAAKJ,qDAGzB,CAEO,UAAAa,GACL,OAAOT,KAAKJ,OACd,CAEO,iBAAOc,CAAWd,GACvB,YAAGT,IAAcS,EACRI,KAAKJ,QAAUA,EAEjBF,EAAeE,OACxB,CAGO,OAAAe,G,MACL,OAAgB,QAAT,EAAAX,KAAKD,YAAI,QAAE,EACpB,CAEO,cAAOK,CAAQL,GACpB,YAAGZ,IAAcY,EACRC,KAAKD,KAAOA,EAEdL,EAAeK,IACxB,CAGO,QAAAa,G,MACL,OAAiB,QAAV,EAAAZ,KAAKH,aAAK,QAAE,EACrB,CAEU,eAAOK,CAASL,GACxB,YAAGV,IAAcU,IAAS,IAASA,EAC1BG,KAAKH,MAAQH,EAAeK,KAElB,iBAATF,EACDG,KAAKH,MAAQA,EAEf,EACT,CAGO,OAAAgB,G,MACL,OAAgB,QAAT,EAAAb,KAAKF,YAAI,QAAE,EACpB,CAEU,cAAOK,CAAQL,GACvB,OAAG,IAASA,QAAQX,IAAcO,EAAeK,KACxCC,KAAKF,MAAO,IAAAU,KAAI,UAAU,aAEhC,IAASV,QAAQX,IAAcO,EAAeK,KACxCC,KAAKF,MAAO,IAAAU,KAAId,EAAeK,KAAK,YAE3B,iBAARD,EACDE,KAAKF,MAAO,IAAAU,KAAIV,EAAK,YAEvB,EACT,EA/FF,mBAMS,EAAAO,aAAgC,EAKtB,EAAAC,WAAoB,EACpB,EAAAC,cAAuB,C","sources":["webpack://@easylibs/flash/webpack/universalModuleDefinition","webpack://@easylibs/flash/./src/scripts/icon.ts","webpack://@easylibs/flash/webpack/bootstrap","webpack://@easylibs/flash/./src/scripts/iflash.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"iflash\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"iflash\"] = factory();\n\telse\n\t\troot[\"iflash\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * Renvoie une représentation SVG sous forme de chaîne de caractères.\r\n *\r\n * @param iconName - Le nom de l'icône à utiliser. Les noms valides sont : \"success\", \"error\", \"warning\", \"info\" et \"close-modal\".\r\n * @param iconPath - Le chemin vers le fichier SVG contenant les icônes.\r\n * @param attributes - Les attributs supplémentaires à ajouter à l'élément SVG (facultatif).\r\n * @returns La représentation SVG sous forme de chaîne de caractères.\r\n */\r\nexport function SVG(iconName?:string,iconPath?:string,attributes?:string):string {\r\n    let name = [\"success\",\"error\",\"warning\",\"info\",'close-modal'];\r\n    let content = \"\";\r\n    if(undefined !== iconName && name.indexOf(iconName)>=0){\r\n        content = `<svg ${attributes}><use xlink:href=\"${iconPath}#${iconName}\" id=\"flash-close-button\"></use></svg>`\r\n    }else{\r\n        content = iconName as string;\r\n    }\r\n    return content;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import Flash from \"../flash\";\r\nimport { SVG } from \"./icon\";\r\n\r\nexport declare type FlashOptions = {\r\n  message: string,\r\n  type: string,\r\n  flashbox?: HTMLElement,\r\n  container?: HTMLElement,\r\n  duration?: number | string,\r\n  title?: string,\r\n  icon?: string,\r\n  closeButton?: string | boolean\r\n};\r\n\r\nexport interface FlashInterface {\r\n  addFlash(params:FlashOptions): Flash;\r\n  flashHTMLModel(params:FlashOptions): flashHTMLModel | Node;\r\n}\r\n\r\nexport class flashHTMLModel {\r\n  public static title: string | boolean;\r\n  public static icon: string | boolean;\r\n  public static message: string;\r\n  public static type?: string;\r\n  [x: string]: any;\r\n  static closeButton: string | boolean = true;\r\n  protected message:string;\r\n  protected title:string|boolean;\r\n  protected icon:string|boolean;\r\n  protected type?:string;\r\n  protected static hasHeader:boolean = true;\r\n  protected static hasFlashIcon:boolean = false;\r\n  \r\n  constructor(message:string,title:string|boolean,icon:string|boolean,type?:string) {\r\n    this.message = message;\r\n    this.title = title;\r\n    this.icon = icon;\r\n    this.type = type;\r\n  }\r\n\r\n  public static parent(): string {\r\n    let title = flashHTMLModel.setTitle(this.title);\r\n    let icon = flashHTMLModel.setIcon(this.icon);\r\n    let type = flashHTMLModel.setType(this.type);\r\n    if((false === title || undefined === title) && false === flashHTMLModel.closeButton){\r\n    flashHTMLModel.hasHeader = false;}\r\n    if(undefined !== type || \"\" !== icon){\r\n      flashHTMLModel.hasFlashIcon = true;}\r\n    return `${flashHTMLModel.hasHeader?\"<span class='flash-header'>\":\"\"}\r\n                ${typeof title == \"string\"?\"<h6>\"+title+\"</h6>\":\"\"}\r\n                ${flashHTMLModel.closeButton?SVG('close-modal','iconPath'):\"\"}\r\n            ${flashHTMLModel.hasHeader?\"</span>\":\"\"}\r\n            <span class=\"flash-content\">\r\n                ${flashHTMLModel.hasFlashIcon?\"<h6>\"+icon+\"</h6>\":\"\"}\r\n                <h6 class=\"flash-message\">\r\n                    ${this.message}\r\n                </h6>\r\n            </span>`;\r\n  }\r\n\r\n  public getMessage(): string {\r\n    return this.message;\r\n  }\r\n\r\n  public static setMessage(message?: string): string {\r\n    if(undefined !== message){\r\n      return this.message = message;\r\n    }\r\n    return flashHTMLModel.message;\r\n  }\r\n\r\n\r\n  public getType(): string {\r\n    return this.type??\"\";\r\n  }\r\n\r\n  public static setType(type?: string): string|undefined {\r\n    if(undefined !== type){\r\n      return this.type = type;\r\n    }\r\n    return flashHTMLModel.type;\r\n  }\r\n\r\n\r\n  public getTitle(): string|boolean {\r\n    return this.title??\"\";\r\n  }\r\n\r\n  protected static setTitle(title: string|boolean): string|boolean {\r\n    if(undefined === title || true === title){\r\n      return this.title = flashHTMLModel.type as string\r\n    }\r\n    if(typeof title == \"string\"){\r\n      return this.title = title;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n\r\n  public getIcon(): string|boolean{\r\n    return this.icon??\"\";\r\n  }\r\n\r\n  protected static setIcon(icon:string|boolean): string{\r\n    if(true === icon && undefined === flashHTMLModel.type){\r\n      return this.icon = SVG(\"success\",'iconPath');\r\n    }\r\n    if(true === icon && undefined !== flashHTMLModel.type){\r\n      return this.icon = SVG(flashHTMLModel.type,'iconPath');\r\n    }\r\n    if(typeof icon == \"string\"){\r\n      return this.icon = SVG(icon,'iconPath');\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","iconName","iconPath","attributes","content","undefined","indexOf","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","flashHTMLModel","constructor","message","title","icon","type","this","parent","setTitle","setIcon","setType","closeButton","hasHeader","hasFlashIcon","SVG","getMessage","setMessage","getType","getTitle","getIcon"],"sourceRoot":""}