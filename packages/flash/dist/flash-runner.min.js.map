{"version":3,"file":"flash-runner.min.js","mappings":"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","sources":["webpack://@easylibs/flash/webpack/universalModuleDefinition","webpack://@easylibs/flash/./src/scripts/flash-runner.ts","webpack://@easylibs/flash/@easylibs/animation/webpack/universalModuleDefinition","webpack://@easylibs/flash/@easylibs/animation/src/animation.ts","webpack://@easylibs/flash/@easylibs/utils/webpack/universalModuleDefinition","webpack://@easylibs/flash/@easylibs/utils/src/utils.ts","webpack://@easylibs/flash/webpack/bootstrap","webpack://@easylibs/flash/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"flash-runner\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"flash-runner\"] = factory();\n\telse\n\t\troot[\"flash-runner\"] = factory();\n})(self, () => {\nreturn ","import Utils from \"@easylibs/utils\";\r\nimport Animation from \"@easylibs/animation\";\r\n\r\nexport default class FlashRunner{\r\n  private modal: Element;\r\n  private audio: string | null;\r\n  private volume: number;\r\n  private duration: number;\r\n  private titre?: string;\r\n  private container?: HTMLElement;\r\n  private animation:{type:string,position:string};\r\n  private closeButton?:HTMLElement;\r\n  private openButton?:HTMLElement;\r\n  /**\r\n   * Cette classe  encapsule la logique liée à la manipulation des modals, \r\n   * y compris leur ouverture, leur fermeture, la gestion de l'audio, de la durée et de l'animation. \r\n   * Elle fournit une interface simple pour interagir avec les modals\r\n   * @param modal L'élément modal à manipuler.\r\n   * @param container Le conteneur dans lequel insérer la modal (optionnel).\r\n   * @param animation Les options d'animation de la modal (optionnel).\r\n   */\r\n  constructor(modal: Element,container?: HTMLElement,animation={type:'fade',position:'top'}) {\r\n    this.modal = modal;\r\n    this.audio = modal.getAttribute('audio');\r\n    this.volume = parseInt(modal.getAttribute('volume') || '1', 10);\r\n    this.duration = parseInt(modal.getAttribute('duration')||\"0\", 10);\r\n    modal.setAttribute('aria-hidden', 'true');\r\n    this.container = container;\r\n    this.animation = animation;\r\n    this.closeButton;\r\n    this.openButton;\r\n    this.autoClose();\r\n  }\r\n  /**\r\n   * Méthode pour fermer la modal.\r\n   */\r\n  public close = (): void => {\r\n    const animation = new Animation();\r\n    const modal = this.modal;\r\n    modal.setAttribute('aria-hidden', 'true');\r\n    animation.animeOut({\r\n      element:modal as HTMLElement,\r\n      animation:this.animation,\r\n      display:undefined,\r\n      delay:350,\r\n      closeButton:this.closeButton\r\n    });\r\n  };\r\n  /**\r\n   * Méthode pour ouvrir la modal.\r\n   */\r\n  public open(){\r\n    if(this.audio) {\r\n      const audio = Utils.setAudio(this.audio);\r\n      audio.volume = this.volume;\r\n      audio.play();\r\n    }\r\n    const animation = new Animation();\r\n    const modal = this.modal;\r\n    animation.animeIn({element:modal as HTMLElement,animation:this.animation,display:'flex'});\r\n    const container = this.container;\r\n   \r\n    if(undefined !== container){\r\n      container.insertBefore(modal, container.firstChild);\r\n      this.clearProperties(this.modal);\r\n    }else{\r\n      document.body.insertBefore(modal, document.body.firstChild);\r\n      this.clearProperties(this.modal);\r\n    }\r\n    \r\n    modal.setAttribute('aria-hidden', 'false');\r\n    modal.setAttribute('aria-labelledby', 'flash');\r\n    this.closeButton = modal.querySelector('#flash-close-button') as HTMLElement;\r\n    this.closeButton?.addEventListener('click', this.close);\r\n  }\r\n  /**\r\n   * Méthode pour gérer la fermeture automatique de la modal.\r\n   */\r\n  private autoClose = (): void =>{\r\n    if(this.duration > 0) {\r\n      setTimeout(() => {\r\n        this.close();\r\n      }, this.duration);\r\n    }\r\n  }\r\n  /**\r\n   * Méthode interne pour nettoyer les attributs de la modal.\r\n   * @param modal L'élément modal à nettoyer.\r\n   */\r\n  private clearProperties(modal:Element){\r\n    document.addEventListener('DOMContentLoaded', function() {\r\n      modal.removeAttribute('duration');\r\n      modal.removeAttribute('icon');\r\n      modal.removeAttribute('audio');\r\n      modal.removeAttribute('volume');\r\n      modal.removeAttribute('container');\r\n      modal.removeAttribute('closeButton');\r\n    });\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"animation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"animation\"] = factory();\n\telse\n\t\troot[\"animation\"] = factory();\n})(self, () => {\nreturn ","declare type AnimeOptions = {\r\n  duration?: number; // Durée en millisecondes par défaut à 10\r\n  openButton?: HTMLElement;\r\n  element?: HTMLElement| {element:HTMLElement,animateElement:HTMLElement};\r\n  display?: string | null;\r\n  animation?: { type: string; position: string; clearAfterApplying?: boolean };\r\n  closeButton?: HTMLElement;\r\n  dispatchCloseEvent?: { key?: any; value: boolean };\r\n  delay?: number;\r\n  fromInToOut?: boolean;\r\n};\r\nexport default class Animation {\r\n  static stopPropagation(e: Event): void {\r\n    e.stopPropagation();\r\n  }\r\n  /**\r\n * Effectue une animation de commutation sur un élément HTML spécifié.\r\n * @param element - L'élément HTML sur lequel l'animation doit être appliquée.\r\n * @param fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n * @param animation - Les informations sur le type et la position de l'animation (facultatif).\r\n */\r\n  private switchAnimation(\r\n    element: HTMLElement,\r\n    fromInToOut: boolean,\r\n    animation?: { type: string; position: string; clearAfterApplying?: boolean }\r\n  ): void {\r\n    if (animation !== undefined) {\r\n      const animeType = animation.type ?? \"fade\";\r\n      const animePosition = animation.position ?? \"top\";\r\n      const { clearAfterApplying } = animation;\r\n\r\n      if (fromInToOut) {\r\n        element.classList.remove(`${animeType}-out-${animePosition}`);\r\n        element.classList.add(`${animeType}-in-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-in-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        element.classList.remove(`${animeType}-in-${animePosition}`);\r\n        element.classList.add(`${animeType}-out-${animePosition}`);\r\n\r\n        if (clearAfterApplying && clearAfterApplying === true) {\r\n          setTimeout(() => {\r\n            element.classList.remove(`${animeType}-out-${animePosition}`);\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée sur un élément HTML spécifié.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée doit être appliquée.\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément après l'animation (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa lors de l'utilisation de la fonction `switchAnimation`.\r\n */\r\n  public animeIn<T extends AnimeOptions>(options: T): void {\r\n    const fromInToOut = options.fromInToOut ?? true;\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n\r\n    if (element) {\r\n      this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n      if (options.display !== null) {\r\n        element.style.display = options.display ?? \"block\";\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation de sortie sur un élément HTML spécifié, puis le masque ou le supprime.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.fromInToOut - Détermine si l'animation va de l'état \"in\" (entrée) à l'état \"out\" (sortie) ou vice versa.\r\n */\r\n  public animeOut<T extends AnimeOptions>(options: T): void {\r\n    const { animation } = options;\r\n    const _element = options.element;\r\n    const animateElement = _element instanceof HTMLElement ? undefined : _element?.animateElement;\r\n    const element = _element instanceof HTMLElement ? _element : _element?.element;\r\n    const fromInToOut = options.fromInToOut ?? false;\r\n    const { display, delay, closeButton } = options;\r\n\r\n    if (element && fromInToOut !== undefined) {\r\n      if (display) {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.style.display = \"none\";\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.style.display = \"none\";\r\n        }, delay || 0);\r\n      } else {\r\n        if (closeButton) {\r\n          closeButton.addEventListener(\"click\", () => {\r\n            this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n            setTimeout(() => {\r\n              element.remove();\r\n            }, delay || 0);\r\n          });\r\n        }\r\n\r\n        this.switchAnimation(animateElement ?? element, fromInToOut, animation);\r\n\r\n        setTimeout(() => {\r\n          element.remove();\r\n        }, options.delay || 0);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n * Effectue une animation d'entrée ou de sortie sur un élément HTML spécifié en réponse aux événements du bouton d'ouverture et de fermeture.\r\n * @param options.openButton - Le bouton d'ouverture lié à l'élément.\r\n * @param options.element - L'élément HTML sur lequel l'animation d'entrée ou de sortie doit être appliquée.\r\n * @param options.display - La valeur de la propriété CSS \"display\" à appliquer à l'élément lors de l'animation (facultatif).\r\n * @param options.animation - Les informations sur le type et la position de l'animation (facultatif).\r\n * @param options.closeButton - Le bouton de fermeture lié à l'élément (facultatif).\r\n * @param options.dispatchCloseEvent - L'événement de fermeture à dispatcher (facultatif).\r\n * @param options.dispatchCloseEvent.key - La clé de l'événement de fermeture.\r\n * @param options.dispatchCloseEvent.value - La valeur associée à l'événement de fermeture.\r\n * @param options.delay - Le délai en millisecondes avant de masquer ou de supprimer l'élément (facultatif).\r\n */\r\n  public animeInOut<T extends AnimeOptions>(options: T): void {\r\n    let modalIsOpen = false;\r\n    const { element, openButton, closeButton, animation } = options;\r\n    const display = options.display ?? \"block\";\r\n    const { dispatchCloseEvent } = options;\r\n    const delay = options.delay ?? 350;\r\n\r\n    try {\r\n      if (openButton) {\r\n        openButton.addEventListener(\"click\", () => {\r\n          if (!modalIsOpen) {\r\n            modalIsOpen = true;\r\n            this.animeIn({ element, animation, display });\r\n          } else {\r\n            modalIsOpen = false;\r\n            this.animeOut({\r\n              element,\r\n              animation,\r\n              display,\r\n              delay,\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      if (closeButton !== undefined && !modalIsOpen) {\r\n        closeButton.addEventListener(\"click\", () => {\r\n          modalIsOpen = false;\r\n          this.animeOut({\r\n            element,\r\n            animation,\r\n            display,\r\n            delay,\r\n          });\r\n        });\r\n\r\n        if (dispatchCloseEvent && dispatchCloseEvent.value === true) {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (\r\n              openButton &&\r\n              closeButton &&\r\n              !openButton.contains(eventTarget) &&\r\n              !closeButton.contains(eventTarget) &&\r\n              !dispElement.contains(eventTarget)\r\n            ) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (closeButton === undefined && !modalIsOpen && dispatchCloseEvent) {\r\n        if (dispatchCloseEvent.value === true) {\r\n          const animateElement = element instanceof HTMLElement ? undefined : element?.animateElement;\r\n          const _element = element instanceof HTMLElement ? element : element?.element;\r\n\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && _element && !openButton.contains(eventTarget) && !_element.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          if (_element) {\r\n            _element.addEventListener(\"click\", Animation.stopPropagation);\r\n          }\r\n        } else {\r\n          const dispElement = dispatchCloseEvent.key as HTMLElement;\r\n          document.addEventListener(\"click\", (event: MouseEvent) => {\r\n            const eventTarget = event.target as Node;\r\n            if (openButton && !openButton.contains(eventTarget) && !dispElement.contains(eventTarget)) {\r\n              modalIsOpen = false;\r\n              this.animeOut({\r\n                element,\r\n                animation,\r\n                display,\r\n                delay,\r\n              });\r\n            }\r\n          });\r\n\r\n          dispElement.addEventListener(\"click\", Animation.stopPropagation);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throw new Error(\"HTMLElement null or undefined.\");\r\n    }\r\n  }\r\n}\r\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(self, () => {\nreturn ","declare type RegexType = 'email' | 'phone-number' | 'number' | 'strong-password' | 'url' | 'default-text' | 'fr-text' | 'en-text' | 'tr-text';\r\nexport default class Utils{\r\n    /**\r\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n     * @param audioPath Le chemin de la source audio.\r\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n     * @returns L'élément audio créé.\r\n     */\r\n    public static setAudio(audioPath:string, classname=null) {\r\n        const audio = document.createElement('audio');\r\n        if(classname != null){audio.classList.add(classname);}\r\n        const source = document.createElement('source');\r\n        source.src = this.resolvePath(audioPath);\r\n        source.type = \"audio/mpeg\";\r\n        audio.appendChild(source);\r\n        return audio;\r\n    }\r\n    public static textToHTMLElement(textHtml:string, targetName=\"div\", children:boolean = false):Element|HTMLCollection|null\r\n    {\r\n        const target = document.createElement(`${targetName}`);\r\n        target.innerHTML = textHtml;\r\n        if(true === children){return target.children;}\r\n        return target.firstElementChild\r\n    }\r\n    /**\r\n     * retourne un élément du dom\r\n     */\r\n    public static $$(element:Element|HTMLCollection|string){\r\n        if (element instanceof HTMLElement || element instanceof HTMLCollection) {\r\n            return element;\r\n        }else if(typeof element === 'string') {\r\n            const collection = document.querySelectorAll(`${element}`);\r\n            const el = document.querySelector(`${element}`);\r\n            if (collection !== null && collection.length>1) {\r\n                return collection;\r\n            }\r\n            if(el !== null){\r\n                return el; \r\n            }\r\n        }else {throw new Error(\"Type of element is not supported\");}\r\n    }\r\n    /**\r\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n     * @param nodeList Un objet NodeList ou un élément HTML. \r\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n     * @returns \r\n     */\r\n    public static processNodes(nodeList: any, callback = (node: any, index?:number) => {}){\r\n        if(nodeList instanceof NodeList || Array.isArray(nodeList)) {\r\n        return Array.from(nodeList).forEach((node,i) => {\r\n            callback(node,i);\r\n        });\r\n        }\r\n        if(null !== nodeList && undefined !== nodeList)\r\n        {return callback(nodeList);}\r\n    }\r\n    \r\n\r\n    /**\r\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n     * @param type Le type d'expression régulière demandé.\r\n     * @returns L'expression régulière correspondante.\r\n     */\r\n    public static getRegexp(type: RegexType): RegExp {\r\n        switch (type) {\r\n            case 'email':\r\n            return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\r\n            case 'phone-number':\r\n            return new RegExp(/^(0|\\\\+[1-9]{1,3})[0-9 ]+$/);\r\n            case 'number':\r\n            return new RegExp(/^[0-9]+$/);\r\n            case 'strong-password':\r\n            return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\r\n            case 'url':\r\n            return new RegExp(/^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&amp;%\\$#_]*)?$/);\r\n            case 'default-text':\r\n            return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\r\n            case 'fr-text':\r\n            return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\r\n            case 'en-text':\r\n            return  new RegExp(/^[a-zA-Z '-]{1,40}$/);\r\n            case 'tr-text':\r\n            return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\r\n            default:\r\n            throw new Error('Type d\\'expression régulière non pris en charge.');\r\n        }\r\n    }\r\n    /**\r\n     * Résout le chemin d'une ressource en fonction de l'environnement d'exécution.\r\n     * @param path Le chemin de la ressource.\r\n     * @returns Le chemin résolu de la ressource.\r\n     */\r\n    public static resolvePath(path:string){\r\n        const PROJECT_NAME = window.location.pathname.split(\"/\")[1];\r\n        const ORIGIN = window.location.origin;\r\n        const PORT = window.location.port;\r\n        const HOST = window.location.host;\r\n        let _stylesheetsoutdir_;\r\n\r\n        if (HOST == \"localhost\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${PROJECT_NAME}/${path}`;\r\n        } else if (HOST !== \"localhost\" && PORT !== \"\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        } else {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        }\r\n    }\r\n    /**\r\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement. \r\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n     * @returns Un élément HTML représentant une zone interdite.\r\n     */\r\n    private static forbiddener(tag:string='td', backgroundColor?:string){\r\n        let forbiddenTag = document.createElement(tag)\r\n        forbiddenTag.setAttribute('class','forbidden')\r\n        const style = {\r\n            position:'absolute',\r\n            width: '100%',\r\n            height:'100%',\r\n            opacity: '.7',\r\n            zIndex: '10',\r\n            backgroundColor: backgroundColor ? backgroundColor : '#FFFFFF',\r\n        }\r\n        Object.assign(forbiddenTag.style, style)\r\n        return forbiddenTag as HTMLElement;\r\n    }\r\n    /**\r\n     * Réduit une chaîne de texte.\r\n     * @param text La chaîne de texte à réduire.\r\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n     * @returns La chaîne de texte réduite.\r\n     */\r\n    public static reduceText(text: string, maxLength: number = 14): string {\r\n        text = typeof text === \"string\" ? text.trim() : \"\";\r\n        if (text.length > maxLength) {\r\n          return `${text.substring(0, maxLength)}...`;\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * Changes the input text type to a number type and performs additional processing\r\n     * based on the specified parameters.\r\n     * \r\n     * @param attr - The CSS selector for the input elements to be processed.\r\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n     */\r\n    public static changeInputTextTypeToNumberType(attr: string,limit?: number | null,priceType: boolean = false,decimal?: number) {\r\n        this.processNodes(this.$$(attr), function (element) {\r\n          let input = element as HTMLInputElement;\r\n          if (input) {\r\n            input.addEventListener(\"input\", function () {\r\n              const regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\r\n              if (decimal) {\r\n                const getValue = input.value.replace(regExp, \"\");\r\n                input.value = `${parseFloat(getValue).toFixed(decimal)}`;\r\n              } else {\r\n                input.value = input.value.replace(regExp, \"\");\r\n              }\r\n              if (limit && parseInt(input.value) > limit) {\r\n                input.value = `${limit}`;\r\n              }\r\n            });\r\n          }\r\n        });\r\n    }\r\n    /**\r\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n     * and the background color for the forbidden tag.\r\n     * \r\n     * @param tag - The tag of the element to be disabled (default: \"td\").\r\n     * @param target - The target element to be disabled (default: undefined).\r\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n     */\r\n    public static disablor(tag = \"td\",target?: HTMLElement,trigger?: HTMLElement,backgroundColor?: string) {\r\n        const buttons = document.querySelectorAll(\r\n        \"[disablor],[self-disablor]\"\r\n        );\r\n        try {\r\n        if (!trigger && !buttons) {\r\n            throw new Error(\r\n            \"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n            );\r\n        }\r\n        this.processNodes(buttons, (button: HTMLElement) => {\r\n            button.addEventListener(\"click\", () => {\r\n            const self = button.hasAttribute(\"self-disablor\");\r\n            let item = self ? button : (button.closest(\"[disablor]\") as HTMLElement);\r\n    \r\n            if (!target && !item) {\r\n                throw new Error(\r\n                \"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n                );\r\n            }\r\n            if (item) {\r\n                item.style.position = \"relative\";\r\n                item.insertBefore(this.forbiddener(tag, backgroundColor), item.firstChild);\r\n                if (item instanceof HTMLButtonElement) {\r\n                item.setAttribute(\"disabled\", \"true\");\r\n                }\r\n            }\r\n            });\r\n        });\r\n        } catch (error) {\r\n            console.error(\"Une erreur s'est produit: \", error);\r\n        }\r\n    }\r\n    /**\r\n     * Adds an asterisk indicator to labels associated with required form fields.\r\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n     * of the 'required-field' attribute. The function utilizes the processNodes method\r\n     * to iterate through the matched labels and append the asterisk.\r\n     */\r\n    public static setAsteriskToRequiredField() {\r\n        const asterisk = `<svg class=\"required-svg\">\r\n        <use xlink:href=\"../asset/icon.svg#asterisk\"></use>\r\n        </svg>`;\r\n        const labels = document.querySelectorAll(\"label[required-field]\");\r\n        if (labels) {\r\n            this.processNodes(labels, (node: HTMLLabelElement) => {\r\n                const rang = document.createRange();\r\n                const fragment = rang.createContextualFragment(asterisk);\r\n                node.appendChild(fragment);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * This method checks if the object contains a key with the given substring.\r\n     * @param object The object to be searched.\r\n     * @param substring The substring to search for.\r\n     * @param getKey An optional parameter to determine the type of return value.\r\n     *               If true, the method will return the key as a string.\r\n     *               If false or not provided, the method will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static hasKeyWithNameSubstring(object: any,substring: string,getKey?: boolean) {\r\n        for (let key in object) {\r\n          if (key.includes(substring)) {\r\n            if (undefined === getKey || false === getKey) {\r\n              return object[key];\r\n            }\r\n            if (true === getKey) {\r\n              return key;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * This method searches for an object's property by its key or short key.\r\n     * @param object The object to be searched.\r\n     * @param keyOrShortKey The key or short key to search for.\r\n     * @param key An optional parameter to determine the type of return value.\r\n     *            If true, the function will return the key as a string.\r\n     *            If false or not provided, the function will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static findObjectDataByKeyName(object: any,keyOrShorKey: string,key?: boolean) {\r\n        Object.keys(object).forEach((key) => {\r\n          if (key.includes(keyOrShorKey)) {\r\n            return object[key];\r\n          }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    public static findChar(string: string, limit: number, returnBool:boolean = false) {\r\n        for (let i = 0; i <= limit; i++) {\r\n          const index = string.indexOf(i.toString());\r\n          if (index !== -1) {\r\n            return returnBool ? true : i.toString();\r\n          }\r\n        }\r\n        return returnBool ? false : null;\r\n      }\r\n      \r\n    public static findComputedStyle(\r\n        element: HTMLElement,\r\n        property: string | Array<string>\r\n      ) {\r\n        const styles = window.getComputedStyle(element);\r\n        const propertiesObject: any = {};\r\n        try {\r\n          if (!element) {\r\n            throw new Error(\"Element not found\");\r\n          }\r\n          if (!property) {\r\n            throw new Error(\"Property is required\");\r\n          }\r\n          if (Array.isArray(property) && property.length > 0) {\r\n            property.forEach((props) => {\r\n              propertiesObject[`${props}`] = styles.getPropertyValue(`${props}`);\r\n            });\r\n            return propertiesObject;\r\n          }\r\n          if (typeof property === \"string\") {\r\n            return styles.getPropertyValue(`${property}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * A function to escape special characters in a string using the DOM API.\r\n     * \r\n     * @param str - The input string to be escaped.\r\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n     */\r\n    public static escape(str?: string): string {\r\n        if (!str) {\r\n          return \"\";\r\n        }\r\n        const div = document.createElement(\"div\");\r\n        div.appendChild(document.createTextNode(str));\r\n        return div.innerHTML;\r\n    }\r\n    /**\r\n     * This function takes an HTMLElement and a target string.\r\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n     * If no such element is found, it returns null.\r\n     * @param referent - The starting point of the search.\r\n     * @param target - The CSS selector used to find the desired element.\r\n     * @returns The first Element with a matching target, or null if no such element is found.\r\n     */\r\n    public static findHTMLElementBy(referent: HTMLElement,target: string): Element | null {\r\n        let currentElement = referent as Element | null;\r\n        if (currentElement) {\r\n          while ((currentElement = currentElement.previousElementSibling)) {\r\n            const charCounterSpan = currentElement.querySelector(target);\r\n            if (charCounterSpan) {\r\n              return charCounterSpan;\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n     * If no attributes are provided, it returns an empty string.\r\n     * @param attributes - An object containing HTML attributes.\r\n     * @returns A string representing the attributes.\r\n     */\r\n    public static formatHTMLAttributes(attributes: any) {\r\n        let attrs = \"\";\r\n        if (attributes) {\r\n          for (const [key, value] of Object.entries(attributes)) {\r\n            if (key) {\r\n              attrs += `${key}='${value}'`;\r\n            }\r\n          }\r\n        }\r\n        return attrs.trim();\r\n    }\r\n      \r\n  \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(598);\n"],"names":["root","factory","exports","module","define","amd","self","constructor","modal","container","animation","type","position","close","this","setAttribute","animeOut","element","display","undefined","delay","closeButton","autoClose","duration","setTimeout","audio","getAttribute","volume","parseInt","openButton","open","setAudio","play","animeIn","insertBefore","firstChild","clearProperties","document","body","querySelector","addEventListener","removeAttribute","Animation","stopPropagation","e","switchAnimation","fromInToOut","animeType","_a","animePosition","_b","clearAfterApplying","classList","remove","add","options","_element","animateElement","HTMLElement","style","animeInOut","modalIsOpen","dispatchCloseEvent","value","dispElement","key","event","eventTarget","target","contains","error","Error","audioPath","classname","createElement","source","src","resolvePath","appendChild","textToHTMLElement","textHtml","targetName","children","innerHTML","firstElementChild","$$","HTMLCollection","collection","querySelectorAll","el","length","processNodes","nodeList","callback","node","index","NodeList","Array","isArray","from","forEach","i","getRegexp","RegExp","path","PROJECT_NAME","window","location","pathname","split","ORIGIN","origin","HOST","port","host","forbiddener","tag","backgroundColor","forbiddenTag","width","height","opacity","zIndex","Object","assign","reduceText","text","maxLength","trim","substring","changeInputTextTypeToNumberType","attr","limit","priceType","decimal","input","regExp","getValue","replace","parseFloat","toFixed","disablor","trigger","buttons","button","item","hasAttribute","closest","HTMLButtonElement","console","setAsteriskToRequiredField","labels","fragment","createRange","createContextualFragment","hasKeyWithNameSubstring","object","getKey","includes","findObjectDataByKeyName","keyOrShorKey","keys","findChar","string","returnBool","indexOf","toString","findComputedStyle","property","styles","getComputedStyle","propertiesObject","props","getPropertyValue","escape","str","div","createTextNode","findHTMLElementBy","referent","currentElement","previousElementSibling","charCounterSpan","formatHTMLAttributes","attributes","attrs","entries","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}