{"version":3,"file":"tempdata.min.js","mappings":"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","sources":["webpack://@easylibs/tempdata/webpack/universalModuleDefinition","webpack://@easylibs/tempdata/webpack/bootstrap","webpack://@easylibs/tempdata/webpack/runtime/define property getters","webpack://@easylibs/tempdata/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/tempdata/webpack/runtime/make namespace object","webpack://@easylibs/tempdata/./src/scripts/helpers.ts","webpack://@easylibs/tempdata/./src/scripts/transformer.ts","webpack://@easylibs/tempdata/./src/tempdata.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tempdata\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tempdata\"] = factory();\n\telse\n\t\troot[\"tempdata\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Checks if an element matches all specified criteria.\r\n * \r\n * This function iterates over each key in the criteria object and checks if the element has a matching value for each key.\r\n * \r\n * @param element - The element to check, represented as a record of string keys to any values.\r\n * @param criteria - The criteria to match against, represented as a record of string keys to any values.\r\n * @returns A boolean value indicating whether the element matches all the criteria. Returns `true` if all criteria are matched, `false` otherwise.\r\n */\r\nexport function matchesCriteria(element: Record<string, any>, criteria: Record<string, any>): boolean\r\n{\r\n    return Object.keys(criteria).every(\r\n      (key) => element[key] === criteria[key]\r\n    );\r\n}\r\n  \r\n/**\r\n * Searches for a key within an object that includes a specified substring. Optionally, returns the key name instead of its value.\r\n * \r\n * @param object - The object to search through.\r\n * @param substring - The substring to look for within the object's keys.\r\n * @param getValue - Optional. If `true`, returns the key name that includes the substring. If `false` or omitted, returns the value of the first matching key.\r\n * @returns The value of the first key that includes the substring, the name of the first key that includes the substring if `getValue` is `true`, or `false` if no matching key is found.\r\n */\r\nexport function hasKeyWithNameSubstring(object: Record<string, any>, substring: string, getValue?: boolean): any\r\n{\r\n    for (let key in object) {\r\n      if (key.includes(substring)) {\r\n        if (undefined === getValue || false === getValue) {\r\n          return object[key];\r\n        }\r\n        if (true === getValue) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Searches for the first occurrence of a character within a string that represents a number up to a specified limit.\r\n * \r\n * This function iterates through numbers from 0 up to the specified limit and checks if the string contains that number as a character.\r\n * \r\n * @param value - The string to search within.\r\n * @param limit - The maximum number to check for within the string.\r\n * @param returnBool - Optional. If `true`, the function returns a boolean indicating whether any character was found. If `false` or omitted, returns the character itself.\r\n * @returns If `returnBool` is `true`, returns `true` if a matching character is found or `false` otherwise. If `returnBool` is `false`, returns the first found character as a string, or `null` if no character is found.\r\n */\r\nexport function findChar(value: string, limit: number, returnBool: boolean = false): string | boolean\r\n{\r\n    for (let i = 0; i <= limit; i++) {\r\n      const index = value.indexOf(i.toString());\r\n      if (index !== -1) {\r\n        return returnBool ? true : i.toString();\r\n      }\r\n    }\r\n    return returnBool ? false : null;\r\n}\r\n","export class BlobTransformer {\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array, contentType?: string): Blob {\r\n      contentType = contentType ?? \"\";\r\n      return new Blob([uint8Array], { type: contentType });\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromFile(file: File): Blob {\r\n      return file.slice(0, file.size, file.type);\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromBase64String(base64String: string, contentType?: string): Blob {\r\n      contentType = contentType || \"\";\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      return new Blob([byteArray], { type: contentType });\r\n    }\r\n  }\r\n\r\n  export class FormDataTransformer {\r\n    constructor(private data: object | FormData) {}\r\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\r\n    public transform(): FormData {\r\n      const formData = new FormData();\r\n      if (typeof this.data === \"object\") {\r\n        let data = this.data as any;\r\n        try {\r\n          for (const key in this.data) {\r\n            if (this.data.hasOwnProperty(key)) {\r\n              formData.append(key, data[key]);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return formData;\r\n    }\r\n  }","import { findChar, hasKeyWithNameSubstring, matchesCriteria } from \"./scripts/helpers\";\r\nimport { FormDataTransformer } from \"./scripts/transformer\";\r\n\r\nexport default class TempData {\r\n  public target: any;\r\n  /**\r\n   * @param dbname - The name of the IndexedDB database to open or create.\r\n   * @param osname - The name of the object (object store) which will contain the elements to be stored\r\n   * @param version - The version of the IndexedDB database (default: 1).\r\n   */\r\n  public constructor(private dbname: string, private osname: string, private version = 1) {}\r\n  /**\r\n   * Adds a new element or elements to the IDBObjectStore with the provided object or array of objects.\r\n   * @param data - Data (a single object or an array of objects) to add to the IDBObjectStore.\r\n   * @returns A promise that resolves to an object indicating the success of the operation.\r\n   */\r\n  public async add(data: Record<string, any> | Array<Record<string, any>>, osname?:string): Promise<Record<string, any>> \r\n  {\r\n    try {\r\n      return this._getObjectStore(\"readwrite\",osname).then(async (objectStore) => {\r\n        const handleData = (item: Record<string, any>) => {\r\n          const request = objectStore.add(item);\r\n          return new Promise((resolve, reject) => {\r\n            request.onsuccess = async (event) => {\r\n              const target = event.target as IDBRequest;\r\n              if (target) {\r\n                const elementId = target.result as number;\r\n                let elementObject = item;\r\n                elementObject[\"@id\"] = elementId;\r\n                objectStore.put(elementObject, elementId);\r\n                resolve({ success: true, elementObject });\r\n              }\r\n            };\r\n            request.onerror = (event: any) => {\r\n              const target = event.target as IDBRequest;\r\n              reject(new Error(\"Failed to add file to IndexedDB: \" + target.error.message));\r\n            };\r\n          });\r\n        };\r\n\r\n        if (Array.isArray(data)) {\r\n          try {\r\n            const results = await Promise.all(\r\n              data.map((item: Record<string, any>) => handleData(item))\r\n            );\r\n            return ({ success: true, elements: results });\r\n          } catch (error) {\r\n            return ({ success: false, error: error.message });\r\n          }\r\n        } else {\r\n          return handleData(data);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the form data at the specified index from the array of object data obtained from `getIndexedData`.\r\n   * @param i - The index of the form data to retrieve.\r\n   * @returns A promise that resolves to the form data at the specified index, or `undefined` if the index is out of range.\r\n   */\r\n  public readOne(i: number, type?: \"form-data\" | \"record\", osname?:string): Promise<FormData | Record<string, any> | undefined> \r\n  {\r\n    try {\r\n      return new Promise( async (resolve, reject) => {\r\n        const objectStore = await this._getObjectStore(\"readonly\", osname);\r\n        const request = objectStore.getAll(); \r\n        request.onsuccess = async (event) => {\r\n          const target = event.target as IDBRequest;\r\n          const results = target.result as Array<Record<string, any>>;\r\n          const result = results[i]; \r\n          if (result) {\r\n            const transformer =\r\n              type === \"form-data\" ? new FormDataTransformer(result) : result;\r\n            resolve(type === \"form-data\" ? transformer.transform() : transformer);\r\n          } else {\r\n            resolve(undefined);\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          const target = event.target as IDBRequest;\r\n          reject(\r\n            new Error(\"Failed to get data from IndexedDB: \" + target.error.message)\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return undefined;\r\n    }\r\n  }\r\n  /**\r\n   * Finds the first record that matches the provided criteria.\r\n   * @param criteria - An object representing the key-value pairs to match against the records.\r\n   * @param type - Optional parameter to specify the return type: \"form-data\" or \"record\".\r\n   * @returns A promise that resolves to the first matching record or `undefined` if no match is found.\r\n   */\r\n  public async readOneBy(criteria: Record<string, any>, type?: \"form-data\" | \"record\", osname?:string): Promise<FormData | Record<string, any> | undefined>\r\n  {\r\n    try {\r\n      const objectStore = await this._getObjectStore(\"readonly\",osname);\r\n      const request = objectStore.getAll();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = async (event) => {\r\n          const target = event.target as IDBRequest;\r\n          const results = target.result as Array<Record<string, any>>;\r\n          const matchedResult = results.find((item) => {\r\n            return Object.keys(criteria).every(\r\n              (key) => criteria[key] === item[key]\r\n            );\r\n          });\r\n\r\n          if (matchedResult) {\r\n            const transformer =\r\n              type === \"form-data\"\r\n                ? new FormDataTransformer(matchedResult)\r\n                : matchedResult;\r\n            resolve(type === \"form-data\" ? transformer.transform() : transformer);\r\n          } else {\r\n            resolve(undefined); // No match found\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          const target = event.target as IDBRequest;\r\n          reject(\r\n            new Error(\"Failed to get data from IndexedDB: \" + target.error.message)\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves all elements from the IDBObjectStore and returns them as an array.\r\n   * @returns A promise that resolves to an array containing all the elements from the IDBObjectStore.\r\n   */\r\n  public read(osname?:string): Promise<Array<Record<string, any>>>\r\n  {\r\n    return new Promise(async (resolve, reject) => {\r\n      const objectStore = await this._getObjectStore(\"readonly\",osname);\r\n      const elements: Array<Record<string, any>> = [];\r\n      const request = objectStore.openCursor();\r\n      request.onerror = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        reject(\"Failed to read indexed data: \" + target.error.message);\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        const cursor: IDBCursor | any = target.result;\r\n        if (cursor) {\r\n          elements.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(elements);\r\n        }\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves all elements that match the specified criteria from the IDBObjectStore.\r\n   * @param criteria - An object representing the key-value pairs that the elements must match.\r\n   * @returns A promise that resolves to an array containing all matching elements from the IDBObjectStore.\r\n   */\r\n  public readBy(criteria: Record<string, any>, osname?:string): Promise<Array<Record<string, any>>>\r\n  {\r\n    return new Promise(async (resolve, reject) => {\r\n      const objectStore = await this._getObjectStore(\"readonly\",osname);\r\n      const elements: Array<Record<string, any>> = [];\r\n      const request = objectStore.openCursor();\r\n      request.onerror = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        reject(\r\n          new Error(\"Erreur lors de la récupération des éléments: \" + target.error.message));\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        const cursor: IDBCursorWithValue | null = target.result;\r\n        if (cursor) {\r\n          if (matchesCriteria(cursor.value, criteria)) {\r\n            elements.push(cursor.value);\r\n          }\r\n          cursor.continue();\r\n        } else {\r\n          resolve(elements);\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates an element in the database.\r\n   * @param id - The numeric ID of the element to be updated.\r\n   * @param data - The new data to be merged with the existing data.\r\n   * @returns A promise that resolves to a boolean indicating whether the update was successful (true) or the ID was not found (false).\r\n   */\r\n  public async update(id: number, data: Record<string, any>, osname?:string): Promise<boolean> {\r\n    try {\r\n      const objectStore = await this._getObjectStore(\"readwrite\",osname);\r\n      const request = objectStore.get(id);\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = async (event) => {\r\n          const target = event.target as IDBRequest;\r\n          const existingData = target.result as Record<string,any>;\r\n          if (existingData) {\r\n            const updatedData = { ...existingData, ...data };\r\n            const updateRequest = objectStore.put(updatedData, id);\r\n            updateRequest.onsuccess = () => {\r\n              resolve(true);\r\n            };\r\n            updateRequest.onerror = (error: any) => {\r\n              reject(\r\n                new Error(\r\n                  \"Failed to update data in IndexedDB: \" + error.target?.error\r\n                )\r\n              );\r\n            };\r\n          } else {\r\n            resolve(false);\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          const target = event.target as IDBRequest;\r\n          reject(\r\n            new Error(\r\n              \"Failed to get data from IndexedDB: \" + target.error.message\r\n            )\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Deletes the object from the IDBObjectStore.\r\n   * @param id - The ID of the object to delete.\r\n   */\r\n  public async deleteOne(id: number, refactoringShortKeyString?: string | null, osname?:string): Promise<boolean> \r\n  {\r\n    return new Promise<boolean>(async (resolve, reject) => {\r\n      try {\r\n        const objectStore = await this._getObjectStore(\"readwrite\",osname);\r\n        const request = objectStore.delete(id);\r\n        request.onsuccess = async () => {\r\n          if (refactoringShortKeyString) {\r\n            await this.refactorIndexes(refactoringShortKeyString,osname);\r\n          }\r\n          resolve(true);\r\n        };\r\n        request.onerror = (event) => {\r\n          console.error(`Error removing file with id:${id}`, event);\r\n          reject(false);\r\n        };\r\n      } catch (error) {\r\n        console.error(`Error removing file with id:${id}: ${error}`);\r\n        reject(false);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Deletes the specified object store from the IndexedDB database.\r\n   * @returns A promise that resolves if the object store is successfully deleted, or rejects with an error if any error occurs during the operation.\r\n   */\r\n  public deleteOS(osname?:string): Promise<boolean> \r\n  {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open(this.dbname, this.version);\r\n      request.onerror = () => {\r\n        console.error(\"Failed to open database.\");\r\n        resolve(false);\r\n      };\r\n      request.onupgradeneeded = (event) => {\r\n        const target = event.target as IDBRequest;\r\n        const db = target.result as IDBDatabase;\r\n        if (db.objectStoreNames.contains(osname??this.osname)) {\r\n          try {\r\n            db.deleteObjectStore(osname??this.osname);\r\n          } catch (error) {\r\n            console.error(`Failed to delete ObjectStore ${osname??this.osname}: ${error}`);\r\n            resolve(false);\r\n          }\r\n        } else {\r\n          console.error(`ObjectStore ${osname??this.osname} does not exist.`);\r\n          resolve(true);\r\n        }\r\n      };\r\n      request.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Clears the entire IndexedDB database by deleting the database.\r\n   */\r\n  public async deleteAll(osname?:string): Promise<boolean> {\r\n    try {\r\n      await this.openDB();\r\n      return new Promise<boolean>((resolve, reject) => {\r\n        const request = indexedDB.deleteDatabase(osname??this.dbname);\r\n        request.onsuccess = () => resolve(true);\r\n        request.onerror = () => resolve(false);\r\n      });\r\n    } catch (error) {\r\n      console.error(`Error deleting database ${osname??this.dbname}: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Opens or creates a new IndexedDB database with the specified name and version.\r\n   * @returns A promise that resolves to the opened or created IDBDatabase object.\r\n   */\r\n  private openDB(osname?:string): Promise<IDBDatabase> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open(this.dbname, this.version);\r\n      request.onerror = (event: any) => {\r\n        const { target } = event;\r\n        console.error(\"Failed to open database\", target?.error);\r\n        reject(target?.error);\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        const db: IDBDatabase = target?.result;\r\n        resolve(db);\r\n      };\r\n      request.onupgradeneeded = (event: any) => {\r\n        const target = event.target as IDBRequest;\r\n        const db: IDBDatabase = target?.result;\r\n        db.createObjectStore(osname??this.osname, { autoIncrement: true });\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Checks if database is empty.\r\n   * @returns A promise that resolves to `true` if database is empty, and `false` otherwise.\r\n   */\r\n  public async _isEmpty(osname?:string): Promise<boolean> {\r\n    const objectStore = await this._getObjectStore(\"readonly\",osname);\r\n    const countRequest = objectStore.count();\r\n    return new Promise((resolve, reject) => {\r\n      countRequest.onsuccess = () => {\r\n        resolve(countRequest.result === 0);\r\n      };\r\n      countRequest.onerror = () => {\r\n        reject(new Error(\"Failed to count items in IndexedDB\"));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves the length of the object store.\r\n   * @returns A promise that resolves with the length of the object store.\r\n   */\r\n  public async _length(osname?:string): Promise<number> {\r\n    const objectStore = await this._getObjectStore(\"readonly\",osname);\r\n    const countRequest = objectStore.count();\r\n    return new Promise((resolve, reject) => {\r\n      countRequest.onsuccess = (e) => {\r\n        resolve(countRequest.result);\r\n      };\r\n      countRequest.onerror = (err) => {\r\n        reject(console.error(\"Error\", err));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves the IDBObjectStore with the specified access mode from the opened database.\r\n   * @param access - The access mode for the transaction.\r\n   * @returns A promise that resolves to the IDBObjectStore with the specified access mode.\r\n   */\r\n  public async _getObjectStore(access: IDBTransactionMode, osname?:string): Promise<IDBObjectStore> \r\n  {\r\n    const db = await this.openDB(osname);\r\n    const transaction = db.transaction([osname??this.osname], access);\r\n    return transaction.objectStore(osname??this.osname);\r\n  }\r\n  /**\r\n   * Refactors the indexes of the indexed data.\r\n   * @param refactoringShortKeyString - The string to be used for refactoring the indexes.\r\n   */\r\n  public async refactorIndexes(refactoringShortKeyString?: string, osname?:string)\r\n  {\r\n    const objectData = await this.read();\r\n    const isEmpty = await this._isEmpty();\r\n    let updatedObjectArray: Array<any> = [];\r\n    if (isEmpty) {\r\n      return null;\r\n    }\r\n    objectData.forEach(async (object: Record<string, any>, i: number) => {\r\n      const updatedObject = this.processObject(\r\n        object,i,\r\n        objectData.length,\r\n        refactoringShortKeyString\r\n      );\r\n      updatedObjectArray.push(updatedObject);\r\n    });\r\n    this.refactor(updatedObjectArray,osname);\r\n  }\r\n  /**\r\n   * Replaces the indexed data in the object store.\r\n   * This method opens the indexedDB, clears the existing data in the object store, and adds the new data from the provided array.\r\n   * @param object - The array of data to replace the indexed data with.\r\n   */\r\n  private refactor(object: Array<any>,osname) {\r\n    const openDBRequest = indexedDB.open(this.dbname, this.version);\r\n    openDBRequest.onsuccess = (event: any) => {\r\n      const target = event.target as IDBRequest;\r\n      const result = target.result as IDBDatabase;\r\n      const transaction = result.transaction([osname??this.osname], \"readwrite\");\r\n      const objetsStore = transaction.objectStore(osname??this.osname);\r\n      const clear = objetsStore.clear();\r\n      clear.onsuccess = function () {\r\n        object.forEach(function (data: any) {\r\n          const addRequest = objetsStore.add(data);\r\n          addRequest.onsuccess = (event: any) => {\r\n            const target = event.target as IDBRequest;\r\n            if (target) {\r\n              const elementId = target.result;\r\n              let elementObject = data as any;\r\n              elementObject[`@id`] = elementId;\r\n              objetsStore.put(elementObject, elementId);\r\n            }\r\n          };\r\n        });\r\n      };\r\n      clear.onerror = function (event: any) {\r\n        const target = event.target as IDBRequest;\r\n        console.error(\r\n          \"Error deleting existing data :\",\r\n          target.error.message\r\n        );\r\n      };\r\n    };\r\n    openDBRequest.onerror = function (event: any) {\r\n      const target = event.target as IDBRequest;\r\n      console.error(\r\n        \"Error opening database :\",\r\n        target.error.message\r\n      );\r\n    };\r\n  }\r\n  /**\r\n   * Processes an object to update its keys.\r\n   * @param object - The object to be processed.\r\n   * @param i - The index value used for updating the keys.\r\n   * @param length - The length of the object.\r\n   * @param refactoringShortKeyString - The string used for splitting the keys.\r\n   * @returns The processed object with updated keys.\r\n   */\r\n  private processObject(object: Record<string, any>,i: number,length: number,refactoringShortKeyString?: string\r\n  ): Record<string, any> {\r\n    const newObject: Record<any, any> = {};\r\n    let base64String: string, id: number, _token: string, tokenKey: string;\r\n    for (const key in object) {\r\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\r\n        const keyParts = refactoringShortKeyString\r\n          ? key.split(refactoringShortKeyString)\r\n          : null;\r\n        const keyPart = keyParts ? keyParts[1] : null;\r\n        _token = hasKeyWithNameSubstring(object, \"token\");\r\n        if (null !== _token) {\r\n          tokenKey = hasKeyWithNameSubstring(object, \"token\", true);\r\n        }\r\n        if (\"@base64String\" === key) {\r\n          base64String = object[key];\r\n        }\r\n        if (\"@id\" === key) {\r\n          id = parseInt(object[key]);\r\n        }\r\n        if (keyPart) {\r\n          const findchar = findChar(keyPart, length);\r\n          const char = findchar ?? \"0\";\r\n          const newKeyPart = keyPart.replace(`[${char}]`, `[${i.toString()}]`);\r\n          const newKey = `${keyParts[0]}${refactoringShortKeyString}${newKeyPart}`;\r\n          newObject[newKey] = object[key];\r\n        }\r\n      }\r\n    }\r\n    if (base64String) newObject[\"@base64String\"] = base64String;\r\n    newObject[\"@id\"] = id;\r\n    if (_token) newObject[`${tokenKey}`] = _token;\r\n    return newObject;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","matchesCriteria","element","criteria","keys","every","hasKeyWithNameSubstring","object","substring","getValue","includes","undefined","findChar","limit","returnBool","arguments","length","i","indexOf","toString","FormDataTransformer","data","_classCallCheck","_createClass","formData","FormData","_typeof","this","append","error","console","_regeneratorRuntime","e","t","r","n","a","iterator","c","asyncIterator","u","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","args","apply","err","_defineProperties","target","props","descriptor","_toPropertyKey","toPrimitive","String","Number","_toPrimitive","TempData","dbname","osname","version","instance","Constructor","protoProps","staticProps","_refactorIndexes","_getObjectStore2","_length2","_isEmpty2","_deleteAll","_deleteOne","_update","_readOneBy","_add","_callee3","_context3","_getObjectStore","_ref","_callee2","objectStore","handleData","results","_context2","item","request","add","onsuccess","_ref2","_callee","event","elementId","elementObject","_context","result","put","success","_x4","onerror","message","Array","isArray","all","map","elements","t0","_x3","_x","_x2","_this","_ref3","_callee5","_context5","getAll","_ref4","_callee4","transformer","_context4","transform","_x7","_x5","_x6","_callee7","_context7","_ref5","_callee6","matchedResult","_context6","find","_x11","_x8","_x9","_x10","_this2","_ref6","_callee8","_context8","openCursor","cursor","_x12","_x13","_this3","_ref7","_callee9","_context9","_x14","_x15","_callee11","id","_context11","_ref8","_callee10","existingData","updatedData","updateRequest","_context10","_objectSpread","_error$target","_x19","_x16","_x17","_x18","_callee14","refactoringShortKeyString","_this4","_context14","_ref9","_callee13","_context13","_callee12","_context12","refactorIndexes","concat","_x23","_x24","_x20","_x21","_x22","_this5","window","indexedDB","open","onupgradeneeded","db","objectStoreNames","contains","deleteObjectStore","_callee15","_this6","_context15","openDB","deleteDatabase","_x25","_this7","createObjectStore","autoIncrement","_callee16","countRequest","_context16","count","_x26","_callee17","_context17","_x27","_callee18","access","transaction","_context18","_x28","_x29","_callee20","objectData","isEmpty","updatedObjectArray","_this8","_context20","read","_isEmpty","_ref11","_callee19","updatedObject","_context19","processObject","_x32","_x33","refactor","_x30","_x31","_this9","openDBRequest","objetsStore","clear","base64String","_token","tokenKey","newObject","keyParts","split","keyPart","parseInt","findchar","char","newKeyPart","replace"],"sourceRoot":""}