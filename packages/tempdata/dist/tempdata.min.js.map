{"version":3,"file":"tempdata.min.js","mappings":"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","sources":["webpack://@easylibs/tempdata/webpack/universalModuleDefinition","webpack://@easylibs/tempdata/webpack/bootstrap","webpack://@easylibs/tempdata/webpack/runtime/define property getters","webpack://@easylibs/tempdata/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/tempdata/webpack/runtime/make namespace object","webpack://@easylibs/tempdata/./src/scripts/helpers.ts","webpack://@easylibs/tempdata/./src/scripts/transformer.ts","webpack://@easylibs/tempdata/./src/tempdata.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tempdata\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tempdata\"] = factory();\n\telse\n\t\troot[\"tempdata\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Checks if an element matches all specified criteria.\r\n * \r\n * This function iterates over each key in the criteria object and checks if the element has a matching value for each key.\r\n * \r\n * @param element - The element to check, represented as a record of string keys to any values.\r\n * @param criteria - The criteria to match against, represented as a record of string keys to any values.\r\n * @returns A boolean value indicating whether the element matches all the criteria. Returns `true` if all criteria are matched, `false` otherwise.\r\n */\r\nexport function matchesCriteria(element: Record<string, any>, criteria: Record<string, any>): boolean\r\n{\r\n    return Object.keys(criteria).every(\r\n      (key) => element[key] === criteria[key]\r\n    );\r\n}\r\n  \r\n/**\r\n * Searches for a key within an object that includes a specified substring. Optionally, returns the key name instead of its value.\r\n * \r\n * @param object - The object to search through.\r\n * @param substring - The substring to look for within the object's keys.\r\n * @param getValue - Optional. If `true`, returns the key name that includes the substring. If `false` or omitted, returns the value of the first matching key.\r\n * @returns The value of the first key that includes the substring, the name of the first key that includes the substring if `getValue` is `true`, or `false` if no matching key is found.\r\n */\r\nexport function hasKeyWithNameSubstring(object: Record<string, any>, substring: string, getValue?: boolean): any\r\n{\r\n    for (let key in object) {\r\n      if (key.includes(substring)) {\r\n        if (undefined === getValue || false === getValue) {\r\n          return object[key];\r\n        }\r\n        if (true === getValue) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Searches for the first occurrence of a character within a string that represents a number up to a specified limit.\r\n * \r\n * This function iterates through numbers from 0 up to the specified limit and checks if the string contains that number as a character.\r\n * \r\n * @param value - The string to search within.\r\n * @param limit - The maximum number to check for within the string.\r\n * @param returnBool - Optional. If `true`, the function returns a boolean indicating whether any character was found. If `false` or omitted, returns the character itself.\r\n * @returns If `returnBool` is `true`, returns `true` if a matching character is found or `false` otherwise. If `returnBool` is `false`, returns the first found character as a string, or `null` if no character is found.\r\n */\r\nexport function findChar(value: string, limit: number, returnBool: boolean = false): string | boolean\r\n{\r\n    for (let i = 0; i <= limit; i++) {\r\n      const index = value.indexOf(i.toString());\r\n      if (index !== -1) {\r\n        return returnBool ? true : i.toString();\r\n      }\r\n    }\r\n    return returnBool ? false : null;\r\n}\r\n","export class BlobTransformer {\r\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromUint8Array(uint8Array: Uint8Array, contentType?: string): Blob {\r\n      contentType = contentType ?? \"\";\r\n      return new Blob([uint8Array], { type: contentType });\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromFile(file: File): Blob {\r\n      return file.slice(0, file.size, file.type);\r\n    }\r\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\r\n    public fromBase64String(base64String: string, contentType?: string): Blob {\r\n      contentType = contentType || \"\";\r\n      const byteCharacters = window.atob(base64String.split(\",\")[1]);\r\n      const byteNumbers = new Array(byteCharacters.length);\r\n      for (let i = 0; i < byteCharacters.length; i++) {\r\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      return new Blob([byteArray], { type: contentType });\r\n    }\r\n  }\r\n\r\n  export class FormDataTransformer {\r\n    private _data: object | undefined;\r\n    constructor(data: object | FormData) {\r\n      this._data = data;\r\n    }\r\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\r\n    public transform(): FormData {\r\n      const formData = new FormData();\r\n      if (typeof this._data === \"object\") {\r\n        let data = this._data as any;\r\n        try {\r\n          for (const key in this._data) {\r\n            if (this._data.hasOwnProperty(key)) {\r\n              formData.append(key, data[key]);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Erreur détectée: \" + error);\r\n        }\r\n      }\r\n      return formData;\r\n    }\r\n  }","import { findChar, hasKeyWithNameSubstring, matchesCriteria } from \"./scripts/helpers\";\r\nimport { FormDataTransformer } from \"./scripts/transformer\";\r\n\r\nexport default class TempData {\r\n  private dbname: string;\r\n  private osname: string;\r\n  private version: number;\r\n  public target: any;\r\n  /**\r\n   * @param dbname - The name of the IndexedDB database to open or create.\r\n   * @param osname - The name of the object (object store) which will contain the elements to be stored\r\n   * @param version - The version of the IndexedDB database (default: 1).\r\n   */\r\n  public constructor(dbname: string, osname: string, version = 1) {\r\n    this.dbname = dbname;\r\n    this.osname = osname;\r\n    this.version = version;\r\n  }\r\n  /**\r\n   * Adds a new element or elements to the IDBObjectStore with the provided object or array of objects.\r\n   * @param data - Data (a single object or an array of objects) to add to the IDBObjectStore.\r\n   * @returns A promise that resolves to an object indicating the success of the operation.\r\n   */\r\n  public async add(data: Record<string, any> | Array<Record<string, any>>): Promise<Record<string, any>> \r\n  {\r\n    try {\r\n      return this._getObjectStore(\"readwrite\").then((objectStore) => {\r\n        const handleData = (item: Record<string, any>) => {\r\n          const request = objectStore.add(item);\r\n          return new Promise((resolve, reject) => {\r\n            request.onsuccess = async (event) => {\r\n              if (event.target) {\r\n                const elementId = (event.target as any).result as number;\r\n                let elementObject = item;\r\n                elementObject[\"@id\"] = elementId;\r\n                objectStore.put(elementObject, elementId);\r\n                resolve({ success: true, elementObject });\r\n              }\r\n            };\r\n            request.onerror = (event: any) => {\r\n              reject(new Error(\"Failed to add file to IndexedDB: \" + event.target.error));\r\n            };\r\n          });\r\n        };\r\n\r\n        if (Array.isArray(data)) {\r\n          return Promise.all(\r\n            data.map((item: Record<string, any>) => handleData(item))\r\n          )\r\n            .then((results) => ({ success: true, elements: results }))\r\n            .catch((error) => ({ success: false, error: error.message }));\r\n        } else {\r\n          return handleData(data);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the form data at the specified index from the array of object data obtained from `getIndexedData`.\r\n   * @param i - The index of the form data to retrieve.\r\n   * @returns A promise that resolves to the form data at the specified index, or `undefined` if the index is out of range.\r\n   */\r\n  public readOne(i: number, type?: \"form-data\" | \"record\"): Promise<FormData | Record<string, any> | undefined> \r\n  {\r\n    try {\r\n      return new Promise(async (resolve, reject) => {\r\n        const objectStore = await this._getObjectStore(\"readonly\");\r\n        const request = objectStore.get(i);\r\n        request.onsuccess = async (event) => {\r\n          const result = (event.target as any).result as Record<string, any>;\r\n          if (result) {\r\n            const transformer = type === \"form-data\" ? new FormDataTransformer(result) : result;\r\n            resolve(type === \"form-data\" ? transformer.transform() : transformer);\r\n          } else {\r\n            resolve(undefined); // Key not found\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          reject(\r\n            new Error(\"Failed to get data from IndexedDB: \" + event.target.error)\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return undefined;\r\n    }\r\n  }\r\n  /**\r\n   * Finds the first record that matches the provided criteria.\r\n   * @param criteria - An object representing the key-value pairs to match against the records.\r\n   * @param type - Optional parameter to specify the return type: \"form-data\" or \"record\".\r\n   * @returns A promise that resolves to the first matching record or `undefined` if no match is found.\r\n   */\r\n  public async readOneBy(criteria: Record<string, any>, type?: \"form-data\" | \"record\"): Promise<FormData | Record<string, any> | undefined>\r\n  {\r\n    try {\r\n      const objectStore = await this._getObjectStore(\"readonly\");\r\n      const request = objectStore.getAll();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = async (event) => {\r\n          const results = (event.target as any).result as Array<Record<string, any>>;\r\n          const matchedResult = results.find((item) => {\r\n            return Object.keys(criteria).every(\r\n              (key) => criteria[key] === item[key]\r\n            );\r\n          });\r\n\r\n          if (matchedResult) {\r\n            const transformer =\r\n              type === \"form-data\"\r\n                ? new FormDataTransformer(matchedResult)\r\n                : matchedResult;\r\n            resolve(type === \"form-data\" ? transformer.transform() : transformer);\r\n          } else {\r\n            resolve(undefined); // No match found\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          reject(\r\n            new Error(\"Failed to get data from IndexedDB: \" + event.target.error)\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves all elements from the IDBObjectStore and returns them as an array.\r\n   * @returns A promise that resolves to an array containing all the elements from the IDBObjectStore.\r\n   */\r\n  public read(): Promise<Array<Record<string, any>>>\r\n  {\r\n    return new Promise(async (resolve, reject) => {\r\n      const objectStore = await this._getObjectStore(\"readonly\");\r\n      const elements: Array<Record<string, any>> = [];\r\n      const request = objectStore.openCursor();\r\n      request.onerror = (event: any) => {\r\n        reject(\"Failed to read indexed data: \" + event.target.error);\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const cursor: IDBCursor | any = event.target.result;\r\n        if (cursor) {\r\n          elements.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(elements);\r\n        }\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves all elements that match the specified criteria from the IDBObjectStore.\r\n   * @param criteria - An object representing the key-value pairs that the elements must match.\r\n   * @returns A promise that resolves to an array containing all matching elements from the IDBObjectStore.\r\n   */\r\n  public readBy(criteria: Record<string, any>): Promise<Array<Record<string, any>>>\r\n  {\r\n    return new Promise(async (resolve, reject) => {\r\n      const objectStore = await this._getObjectStore(\"readonly\");\r\n      const elements: Array<Record<string, any>> = [];\r\n      const request = objectStore.openCursor();\r\n      request.onerror = (event: any) => {\r\n        reject(\r\n          new Error(\"Erreur lors de la récupération des éléments: \" + event.target.error));\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const cursor: IDBCursorWithValue | null = event.target.result;\r\n        if (cursor) {\r\n          if (matchesCriteria(cursor.value, criteria)) {\r\n            elements.push(cursor.value);\r\n          }\r\n          cursor.continue();\r\n        } else {\r\n          resolve(elements);\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates an element in the database.\r\n   * @param id - The numeric ID of the element to be updated.\r\n   * @param data - The new data to be merged with the existing data.\r\n   * @returns A promise that resolves to a boolean indicating whether the update was successful (true) or the ID was not found (false).\r\n   */\r\n  public async update(id: number, data: Record<string, any>): Promise<boolean> {\r\n    try {\r\n      const objectStore = await this._getObjectStore(\"readwrite\");\r\n      const request = objectStore.get(id);\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = async (event) => {\r\n          const existingData = (event.target as any).result as Record<\r\n            string,\r\n            any\r\n          >;\r\n          if (existingData) {\r\n            const updatedData = { ...existingData, ...data };\r\n            const updateRequest = objectStore.put(updatedData, id);\r\n            updateRequest.onsuccess = () => {\r\n              resolve(true);\r\n            };\r\n            updateRequest.onerror = (error: any) => {\r\n              reject(\r\n                new Error(\r\n                  \"Failed to update data in IndexedDB: \" + error.target?.error\r\n                )\r\n              );\r\n            };\r\n          } else {\r\n            resolve(false);\r\n          }\r\n        };\r\n        request.onerror = (event: any) => {\r\n          reject(\r\n            new Error(\r\n              \"Failed to get data from IndexedDB: \" + event.target.error\r\n            )\r\n          );\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error accessing IndexedDB\", error);\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Deletes the object from the IDBObjectStore.\r\n   * @param id - The ID of the object to delete.\r\n   */\r\n  public async deleteOne(id: number, refactoringShortKeyString?: string | null): Promise<boolean> \r\n  {\r\n    return new Promise<boolean>(async (resolve, reject) => {\r\n      try {\r\n        const objectStore = await this._getObjectStore(\"readwrite\");\r\n        const request = objectStore.delete(id);\r\n        request.onsuccess = async () => {\r\n          if (refactoringShortKeyString) {\r\n            await this.refactorIndexes(refactoringShortKeyString);\r\n          }\r\n          resolve(true);\r\n        };\r\n        request.onerror = (event) => {\r\n          console.error(`Error removing file with id:${id}`, event);\r\n          reject(false);\r\n        };\r\n      } catch (error) {\r\n        console.error(`Error removing file with id:${id}: ${error}`);\r\n        reject(false);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Deletes the specified object store from the IndexedDB database.\r\n   * @returns A promise that resolves if the object store is successfully deleted, or rejects with an error if any error occurs during the operation.\r\n   */\r\n  public deleteOS(): Promise<boolean> \r\n  {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open(this.dbname, this.version);\r\n      request.onerror = () => {\r\n        console.error(\"Failed to open database.\");\r\n        resolve(false);\r\n      };\r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as any).result as IDBDatabase;\r\n        if (db.objectStoreNames.contains(this.osname)) {\r\n          try {\r\n            db.deleteObjectStore(this.osname);\r\n          } catch (error) {\r\n            console.error(`Failed to delete ObjectStore ${this.osname}: ${error}`);\r\n            resolve(false);\r\n          }\r\n        } else {\r\n          console.log(`ObjectStore ${this.osname} does not exist.`);\r\n          resolve(true);\r\n        }\r\n      };\r\n      request.onsuccess = () => {\r\n        resolve(true);\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Clears the entire IndexedDB database by deleting the database.\r\n   */\r\n  public async deleteAll(): Promise<boolean> {\r\n    try {\r\n      await this.openDB();\r\n      return new Promise<boolean>((resolve, reject) => {\r\n        const request = indexedDB.deleteDatabase(this.dbname);\r\n        request.onsuccess = () => resolve(true);\r\n        request.onerror = () => resolve(false);\r\n      });\r\n    } catch (error) {\r\n      console.error(`Error deleting database ${this.dbname}: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Opens or creates a new IndexedDB database with the specified name and version.\r\n   * @returns A promise that resolves to the opened or created IDBDatabase object.\r\n   */\r\n  private openDB(): Promise<IDBDatabase> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = window.indexedDB.open(this.dbname, this.version);\r\n      request.onerror = (event: any) => {\r\n        const { target } = event;\r\n        console.error(\"Failed to open database\", target?.error);\r\n        reject(target?.error);\r\n      };\r\n      request.onsuccess = (event: any) => {\r\n        const db: IDBDatabase = event.target?.result;\r\n        resolve(db);\r\n      };\r\n      request.onupgradeneeded = (event: any) => {\r\n        const db: IDBDatabase = event.target?.result;\r\n        db.createObjectStore(this.osname, { autoIncrement: true });\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Checks if database is empty.\r\n   * @returns A promise that resolves to `true` if database is empty, and `false` otherwise.\r\n   */\r\n  public async _isEmpty(): Promise<boolean> {\r\n    const objectStore = await this._getObjectStore(\"readonly\");\r\n    const countRequest = objectStore.count();\r\n    return new Promise((resolve, reject) => {\r\n      countRequest.onsuccess = () => {\r\n        resolve(countRequest.result === 0);\r\n      };\r\n      countRequest.onerror = () => {\r\n        reject(new Error(\"Failed to count items in IndexedDB\"));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves the length of the object store.\r\n   * @returns A promise that resolves with the length of the object store.\r\n   */\r\n  public async _length(): Promise<number> {\r\n    const objectStore = await this._getObjectStore(\"readonly\");\r\n    const countRequest = objectStore.count();\r\n    return new Promise((resolve, reject) => {\r\n      countRequest.onsuccess = (e) => {\r\n        resolve(countRequest.result);\r\n      };\r\n      countRequest.onerror = (err) => {\r\n        reject(console.error(\"Error\", err));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Retrieves the IDBObjectStore with the specified access mode from the opened database.\r\n   * @param access - The access mode for the transaction.\r\n   * @returns A promise that resolves to the IDBObjectStore with the specified access mode.\r\n   */\r\n  public async _getObjectStore(access: IDBTransactionMode): Promise<IDBObjectStore> \r\n  {\r\n    const db = await this.openDB();\r\n    const transaction = db.transaction([this.osname], access);\r\n    return transaction.objectStore(this.osname);\r\n  }\r\n  /**\r\n   * Refactors the indexes of the indexed data.\r\n   * @param refactoringShortKeyString - The string to be used for refactoring the indexes.\r\n   */\r\n  public async refactorIndexes(refactoringShortKeyString?: string)\r\n  {\r\n    const objectData = await this.read();\r\n    const isEmpty = await this._isEmpty();\r\n    let updatedObjectArray: Array<any> = [];\r\n    if (isEmpty) {\r\n      return null;\r\n    }\r\n    objectData.forEach(async (object: Record<string, any>, i: number) => {\r\n      const updatedObject = this.processObject(\r\n        object,i,\r\n        objectData.length,\r\n        refactoringShortKeyString\r\n      );\r\n      updatedObjectArray.push(updatedObject);\r\n    });\r\n    this.refactor(updatedObjectArray);\r\n  }\r\n  /**\r\n   * Replaces the indexed data in the object store.\r\n   * This method opens the indexedDB, clears the existing data in the object store, and adds the new data from the provided array.\r\n   * @param object - The array of data to replace the indexed data with.\r\n   */\r\n  private refactor(object: Array<any>) {\r\n    const openDBRequest = indexedDB.open(this.dbname, this.version);\r\n    openDBRequest.onsuccess = (event: any) => {\r\n      const IBDB = event.target.result;\r\n      const result = IBDB as IDBDatabase;\r\n      const transaction = result.transaction([this.osname], \"readwrite\");\r\n      const objetsStore = transaction.objectStore(this.osname);\r\n      const clear = objetsStore.clear();\r\n      clear.onsuccess = function () {\r\n        object.forEach(function (data: any) {\r\n          const addRequest = objetsStore.add(data);\r\n          addRequest.onsuccess = (event: any) => {\r\n            if (event.target) {\r\n              const elementId = event.target.result;\r\n              let elementObject = data as any;\r\n              elementObject[`@id`] = elementId;\r\n              objetsStore.put(elementObject, elementId);\r\n            }\r\n          };\r\n        });\r\n      };\r\n      clear.onerror = function (event: any) {\r\n        console.error(\r\n          \"Error deleting existing data :\",\r\n          event.target.error\r\n        );\r\n      };\r\n    };\r\n    openDBRequest.onerror = function (event: any) {\r\n      console.error(\r\n        \"Error opening database :\",\r\n        event.target.error\r\n      );\r\n    };\r\n  }\r\n  /**\r\n   * Processes an object to update its keys.\r\n   * @param object - The object to be processed.\r\n   * @param i - The index value used for updating the keys.\r\n   * @param length - The length of the object.\r\n   * @param refactoringShortKeyString - The string used for splitting the keys.\r\n   * @returns The processed object with updated keys.\r\n   */\r\n  private processObject(object: Record<string, any>,i: number,length: number,refactoringShortKeyString?: string\r\n  ): Record<string, any> {\r\n    const newObject: Record<any, any> = {};\r\n    let base64String: string, id: number, _token: string, tokenKey: string;\r\n    for (const key in object) {\r\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\r\n        const keyParts = refactoringShortKeyString\r\n          ? key.split(refactoringShortKeyString)\r\n          : null;\r\n        const keyPart = keyParts ? keyParts[1] : null;\r\n        _token = hasKeyWithNameSubstring(object, \"token\");\r\n        if (null !== _token) {\r\n          tokenKey = hasKeyWithNameSubstring(object, \"token\", true);\r\n        }\r\n        if (\"@base64String\" === key) {\r\n          base64String = object[key];\r\n        }\r\n        if (\"@id\" === key) {\r\n          id = parseInt(object[key]);\r\n        }\r\n        if (keyPart) {\r\n          const findchar = findChar(keyPart, length);\r\n          const char = findchar ?? \"0\";\r\n          const newKeyPart = keyPart.replace(`[${char}]`, `[${i.toString()}]`);\r\n          const newKey = `${keyParts[0]}${refactoringShortKeyString}${newKeyPart}`;\r\n          newObject[newKey] = object[key];\r\n        }\r\n      }\r\n    }\r\n    if (base64String) newObject[\"@base64String\"] = base64String;\r\n    newObject[\"@id\"] = id;\r\n    if (_token) newObject[`${tokenKey}`] = _token;\r\n    return newObject;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","matchesCriteria","element","criteria","keys","every","hasKeyWithNameSubstring","object","substring","getValue","includes","undefined","findChar","limit","returnBool","arguments","length","i","indexOf","toString","FormDataTransformer","data","_classCallCheck","this","_data","_createClass","formData","FormData","_typeof","append","error","console","_regeneratorRuntime","e","t","r","n","a","iterator","c","asyncIterator","u","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","args","apply","err","_defineProperties","target","props","descriptor","_toPropertyKey","toPrimitive","String","Number","_toPrimitive","TempData","dbname","osname","version","instance","Constructor","protoProps","staticProps","_refactorIndexes","_getObjectStore2","_length2","_isEmpty2","_deleteAll","_deleteOne","_update","_readOneBy","_add","_callee2","_context2","_getObjectStore","objectStore","handleData","item","request","add","onsuccess","_ref","_callee","event","elementId","elementObject","_context","result","put","success","_x2","onerror","Array","isArray","all","map","results","elements","message","t0","_x","_this","_ref2","_callee4","_context4","_ref3","_callee3","transformer","_context3","transform","_x5","_x3","_x4","_callee6","_context6","getAll","_ref4","_callee5","matchedResult","_context5","find","_x8","_x6","_x7","_this2","_ref5","_callee7","_context7","openCursor","cursor","_x9","_x10","_this3","_ref6","_callee8","_context8","_x11","_x12","_callee10","id","_context10","_ref7","_callee9","existingData","updatedData","updateRequest","_context9","_objectSpread","_error$target","_x15","_x13","_x14","_callee13","refactoringShortKeyString","_this4","_context13","_ref8","_callee12","_context12","_callee11","_context11","refactorIndexes","concat","_x18","_x19","_x16","_x17","_this5","window","indexedDB","open","onupgradeneeded","db","objectStoreNames","contains","deleteObjectStore","log","_callee14","_this6","_context14","openDB","deleteDatabase","_this7","_event$target","_event$target2","createObjectStore","autoIncrement","_callee15","countRequest","_context15","count","_callee16","_context16","_callee17","access","transaction","_context17","_x20","_callee19","objectData","isEmpty","updatedObjectArray","_this8","_context19","read","_isEmpty","_ref10","_callee18","updatedObject","_context18","processObject","_x22","_x23","refactor","_x21","_this9","openDBRequest","objetsStore","clear","base64String","_token","tokenKey","newObject","keyParts","split","keyPart","parseInt","findchar","char","newKeyPart","replace"],"sourceRoot":""}