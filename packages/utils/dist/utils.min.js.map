{"version":3,"file":"utils.min.js","mappings":"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","sources":["webpack://@easylibs/utils/webpack/universalModuleDefinition","webpack://@easylibs/utils/./src/utils.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(self, () => {\nreturn ","declare type RegexType = 'email' | 'phone-number' | 'number' | 'strong-password' | 'url' | 'default-text' | 'fr-text' | 'en-text' | 'tr-text';\r\nexport default class Utils{\r\n    /**\r\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n     * @param audioPath Le chemin de la source audio.\r\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n     * @returns L'élément audio créé.\r\n     */\r\n    public static setAudio(audioPath:string, classname=null) {\r\n        const audio = document.createElement('audio');\r\n        if(classname != null){audio.classList.add(classname);}\r\n        const source = document.createElement('source');\r\n        source.src = this.resolvePath(audioPath);\r\n        source.type = \"audio/mpeg\";\r\n        audio.appendChild(source);\r\n        return audio;\r\n    }\r\n    public static textToHTMLElement(textHtml:string, targetName=\"div\", children:boolean = false):Element|HTMLCollection|null\r\n    {\r\n        const target = document.createElement(`${targetName}`);\r\n        target.innerHTML = textHtml;\r\n        if(true === children){return target.children;}\r\n        return target.firstElementChild\r\n    }\r\n    /**\r\n     * retourne un élément du dom\r\n     */\r\n    public static $$(element:any){\r\n        if (element instanceof Element) {\r\n            return element;\r\n        }else if(typeof element === 'string') {\r\n            const collection = document.querySelectorAll(`${element}`);\r\n            const el = document.querySelector(`${element}`);\r\n            if (collection !== null && collection.length>1) {\r\n                return collection;\r\n            }\r\n            if(el !== null){\r\n                return el; \r\n            }\r\n        }else {throw new Error(\"Type of element is not supported\");}\r\n    }\r\n    /**\r\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n     * @param nodeList Un objet NodeList ou un élément HTML. \r\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n     * @returns \r\n     */\r\n    public static processNodes(nodeList: any, callback = (node: any, index?:number) => {}){\r\n        if(nodeList instanceof NodeList || Array.isArray(nodeList)) {\r\n        return Array.from(nodeList).forEach((node,i) => {\r\n            callback(node,i);\r\n        });\r\n        }\r\n        if(null !== nodeList && undefined !== nodeList)\r\n        {return callback(nodeList);}\r\n    }\r\n    \r\n\r\n    /**\r\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n     * @param type Le type d'expression régulière demandé.\r\n     * @returns L'expression régulière correspondante.\r\n     */\r\n    public static getRegexp(type: RegexType): RegExp {\r\n        switch (type) {\r\n            case 'email':\r\n              return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\r\n            case 'phone-number':\r\n              return new RegExp(/^(0|\\\\+[1-9]{1,3})[0-9 ]+$/);\r\n            case 'number':\r\n              return new RegExp(/^[0-9]+$/);\r\n            case 'strong-password':\r\n              return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\r\n            case 'url':\r\n              // return new RegExp(/^(ht|f)tp(s?)\\:\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*(:(0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\\\+&amp;%\\$#_]*)?$/);\r\n              return new RegExp('^(https?:\\\\/\\\\/)?'+ // protocole\r\n                        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|'+ // domaine\r\n                        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n                        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port et chemin\r\n                        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n                        '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n            case 'default-text':\r\n              return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\r\n            case 'fr-text':\r\n              return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\r\n            case 'en-text':\r\n              return  new RegExp(/^[a-zA-Z '-]{1,40}$/);\r\n            case 'tr-text':\r\n              return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\r\n            default:\r\n              throw new Error('Type d\\'expression régulière non pris en charge.');\r\n        }\r\n    }\r\n    /**\r\n     * Résout le chemin d'une ressource en fonction de l'environnement d'exécution.\r\n     * @param path Le chemin de la ressource.\r\n     * @returns Le chemin résolu de la ressource.\r\n     */\r\n    public static resolvePath(path:string){\r\n        const PROJECT_NAME = window.location.pathname.split(\"/\")[1];\r\n        const ORIGIN = window.location.origin;\r\n        const PORT = window.location.port;\r\n        const HOST = window.location.host;\r\n        let _stylesheetsoutdir_;\r\n\r\n        if (HOST == \"localhost\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${PROJECT_NAME}/${path}`;\r\n        } else if (HOST !== \"localhost\" && PORT !== \"\") {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        } else {\r\n            return _stylesheetsoutdir_ = ORIGIN + `/${path}`;\r\n        }\r\n    }\r\n    /**\r\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement. \r\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n     * @returns Un élément HTML représentant une zone interdite.\r\n     */\r\n    private static forbiddener(tag:string='td', backgroundColor?:string){\r\n        let forbiddenTag = document.createElement(tag)\r\n        forbiddenTag.setAttribute('class','forbidden')\r\n        const style = {\r\n            position:'absolute',\r\n            width: '100%',\r\n            height:'100%',\r\n            opacity: '.7',\r\n            zIndex: '10',\r\n            backgroundColor: backgroundColor ? backgroundColor : '#FFFFFF',\r\n        }\r\n        Object.assign(forbiddenTag.style, style)\r\n        return forbiddenTag as HTMLElement;\r\n    }\r\n    /**\r\n     * Réduit une chaîne de texte.\r\n     * @param text La chaîne de texte à réduire.\r\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n     * @returns La chaîne de texte réduite.\r\n     */\r\n    public static reduceText(text: string, maxLength: number = 14): string {\r\n        text = typeof text === \"string\" ? text.trim() : \"\";\r\n        if (text.length > maxLength) {\r\n          return `${text.substring(0, maxLength)}...`;\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * Changes the input text type to a number type and performs additional processing\r\n     * based on the specified parameters.\r\n     * \r\n     * @param attr - The CSS selector for the input elements to be processed.\r\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n     */\r\n    public static changeInputTextTypeToNumberType(attr: string,limit?: number | null,priceType: boolean = false,decimal?: number) {\r\n        this.processNodes(this.$$(attr), function (element) {\r\n          let input = element as HTMLInputElement;\r\n          if (input) {\r\n            input.addEventListener(\"input\", function () {\r\n              const regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\r\n              if (decimal) {\r\n                const getValue = input.value.replace(regExp, \"\");\r\n                input.value = `${parseFloat(getValue).toFixed(decimal)}`;\r\n              } else {\r\n                input.value = input.value.replace(regExp, \"\");\r\n              }\r\n              if (limit && parseInt(input.value) > limit) {\r\n                input.value = `${limit}`;\r\n              }\r\n            });\r\n          }\r\n        });\r\n    }\r\n    /**\r\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n     * and the background color for the forbidden tag.\r\n     * \r\n     * @param tag - The tag of the element to be disabled (default: \"td\").\r\n     * @param target - The target element to be disabled (default: undefined).\r\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n     */\r\n    public static disablor(tag = \"td\",target?: HTMLElement,trigger?: HTMLElement,backgroundColor?: string) {\r\n        const buttons = document.querySelectorAll(\r\n        \"[disablor],[self-disablor]\"\r\n        );\r\n        try {\r\n        if (!trigger && !buttons) {\r\n            throw new Error(\r\n            \"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n            );\r\n        }\r\n        this.processNodes(buttons, (button: HTMLElement) => {\r\n            button.addEventListener(\"click\", () => {\r\n            const self = button.hasAttribute(\"self-disablor\");\r\n            let item = self ? button : (button.closest(\"[disablor]\") as HTMLElement);\r\n    \r\n            if (!target && !item) {\r\n                throw new Error(\r\n                \"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n                );\r\n            }\r\n            if (item) {\r\n                item.style.position = \"relative\";\r\n                item.insertBefore(this.forbiddener(tag, backgroundColor), item.firstChild);\r\n                if (item instanceof HTMLButtonElement) {\r\n                item.setAttribute(\"disabled\", \"true\");\r\n                }\r\n            }\r\n            });\r\n        });\r\n        } catch (error) {\r\n            console.error(\"Une erreur s'est produit: \", error);\r\n        }\r\n    }\r\n    /**\r\n     * Adds an asterisk indicator to labels associated with required form fields.\r\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n     * of the 'required-field' attribute. The function utilizes the processNodes method\r\n     * to iterate through the matched labels and append the asterisk.\r\n     */\r\n    public static setAsteriskToRequiredField() {\r\n        const asterisk = `<svg class=\"required-svg\">\r\n        <use xlink:href=\"../asset/icon.svg#asterisk\"></use>\r\n        </svg>`;\r\n        const labels = document.querySelectorAll(\"label[required-field]\");\r\n        if (labels) {\r\n            this.processNodes(labels, (node: HTMLLabelElement) => {\r\n                const rang = document.createRange();\r\n                const fragment = rang.createContextualFragment(asterisk);\r\n                node.appendChild(fragment);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * This method checks if the object contains a key with the given substring.\r\n     * @param object The object to be searched.\r\n     * @param substring The substring to search for.\r\n     * @param getKey An optional parameter to determine the type of return value.\r\n     *               If true, the method will return the key as a string.\r\n     *               If false or not provided, the method will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static hasKeyWithNameSubstring(object: any,substring: string,getKey?: boolean) {\r\n        for (let key in object) {\r\n          if (key.includes(substring)) {\r\n            if (undefined === getKey || false === getKey) {\r\n              return object[key];\r\n            }\r\n            if (true === getKey) {\r\n              return key;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * This method searches for an object's property by its key or short key.\r\n     * @param object The object to be searched.\r\n     * @param keyOrShortKey The key or short key to search for.\r\n     * @param key An optional parameter to determine the type of return value.\r\n     *            If true, the function will return the key as a string.\r\n     *            If false or not provided, the function will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\r\n    public static findObjectDataByKeyName(object: any,keyOrShorKey: string,key?: boolean) {\r\n        Object.keys(object).forEach((key) => {\r\n          if (key.includes(keyOrShorKey)) {\r\n            return object[key];\r\n          }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    public static findChar(string: string, limit: number, returnBool:boolean = false) {\r\n        for (let i = 0; i <= limit; i++) {\r\n          const index = string.indexOf(i.toString());\r\n          if (index !== -1) {\r\n            return returnBool ? true : i.toString();\r\n          }\r\n        }\r\n        return returnBool ? false : null;\r\n      }\r\n      \r\n    public static findComputedStyle(\r\n        element: HTMLElement,\r\n        property: string | Array<string>\r\n      ) {\r\n        const styles = window.getComputedStyle(element);\r\n        const propertiesObject: any = {};\r\n        try {\r\n          if (!element) {\r\n            throw new Error(\"Element not found\");\r\n          }\r\n          if (!property) {\r\n            throw new Error(\"Property is required\");\r\n          }\r\n          if (Array.isArray(property) && property.length > 0) {\r\n            property.forEach((props) => {\r\n              propertiesObject[`${props}`] = styles.getPropertyValue(`${props}`);\r\n            });\r\n            return propertiesObject;\r\n          }\r\n          if (typeof property === \"string\") {\r\n            return styles.getPropertyValue(`${property}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n    }\r\n    /**\r\n     * A function to escape special characters in a string using the DOM API.\r\n     * \r\n     * @param str - The input string to be escaped.\r\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n     */\r\n    public static escape(str?: string): string {\r\n        if (!str) {\r\n          return \"\";\r\n        }\r\n        const div = document.createElement(\"div\");\r\n        div.appendChild(document.createTextNode(str));\r\n        return div.innerHTML;\r\n    }\r\n    /**\r\n     * This function takes an HTMLElement and a target string.\r\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n     * If no such element is found, it returns null.\r\n     * @param referent - The starting point of the search.\r\n     * @param target - The CSS selector used to find the desired element.\r\n     * @returns The first Element with a matching target, or null if no such element is found.\r\n     */\r\n    public static findHTMLElementBy(referent: HTMLElement,target: string): Element | null {\r\n        let currentElement = referent as Element | null;\r\n        if (currentElement) {\r\n          while ((currentElement = currentElement.previousElementSibling)) {\r\n            const charCounterSpan = currentElement.querySelector(target);\r\n            if (charCounterSpan) {\r\n              return charCounterSpan;\r\n            }\r\n          }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n     * If no attributes are provided, it returns an empty string.\r\n     * @param attributes - An object containing HTML attributes.\r\n     * @returns A string representing the attributes.\r\n     */\r\n    public static formatHTMLAttributes(attributes: any) {\r\n        let attrs = \"\";\r\n        if (attributes) {\r\n          for (const [key, value] of Object.entries(attributes)) {\r\n            if (key) {\r\n              attrs += `${key}='${value}'`;\r\n            }\r\n          }\r\n        }\r\n        return attrs.trim();\r\n    }\r\n      \r\n  \r\n}"],"names":["root","factory","exports","module","define","amd","self","setAudio","audioPath","classname","audio","document","createElement","classList","add","source","src","this","resolvePath","type","appendChild","textToHTMLElement","textHtml","targetName","children","target","innerHTML","firstElementChild","$$","element","Element","Error","collection","querySelectorAll","el","querySelector","length","processNodes","nodeList","callback","node","index","NodeList","Array","isArray","from","forEach","i","getRegexp","RegExp","path","PROJECT_NAME","window","location","pathname","split","ORIGIN","origin","HOST","port","host","forbiddener","tag","backgroundColor","forbiddenTag","setAttribute","style","position","width","height","opacity","zIndex","Object","assign","reduceText","text","maxLength","trim","substring","changeInputTextTypeToNumberType","attr","limit","priceType","decimal","input","addEventListener","regExp","getValue","value","replace","parseFloat","toFixed","parseInt","disablor","trigger","buttons","button","item","hasAttribute","closest","insertBefore","firstChild","HTMLButtonElement","error","console","setAsteriskToRequiredField","labels","fragment","createRange","createContextualFragment","hasKeyWithNameSubstring","object","getKey","key","includes","undefined","findObjectDataByKeyName","keyOrShorKey","keys","findChar","string","returnBool","indexOf","toString","findComputedStyle","property","styles","getComputedStyle","propertiesObject","props","getPropertyValue","escape","str","div","createTextNode","findHTMLElementBy","referent","currentElement","previousElementSibling","charCounterSpan","formatHTMLAttributes","attributes","attrs","entries"],"sourceRoot":""}