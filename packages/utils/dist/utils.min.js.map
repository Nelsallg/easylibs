{"version":3,"file":"utils.min.js","mappings":"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","sources":["webpack://@easylibs/utils/webpack/universalModuleDefinition","webpack://@easylibs/utils/webpack/bootstrap","webpack://@easylibs/utils/webpack/runtime/define property getters","webpack://@easylibs/utils/webpack/runtime/hasOwnProperty shorthand","webpack://@easylibs/utils/webpack/runtime/make namespace object","webpack://@easylibs/utils/./src/utils.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"utils\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"utils\"] = factory();\n\telse\n\t\troot[\"utils\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","declare type RegexType =\r\n  | \"email\"\r\n  | \"phone-number\"\r\n  | \"number\"\r\n  | \"strong-password\"\r\n  | \"default-text\"\r\n  | \"fr-text\"\r\n  | \"en-text\"\r\n  | \"tr-text\"\r\n  | \"url-protocol\"\r\n  | \"url-domain\"\r\n  | \"url-ip\"\r\n  | \"url-port\"\r\n  | \"url-path\"\r\n  | \"url-query\"\r\n  | \"url-fragment\";\r\nexport default class Utils {\r\n  /**\r\n   * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n   * @param audioPath Le chemin de la source audio.\r\n   * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n   * @returns L'élément audio créé.\r\n   */\r\n  public static setAudio(audioPath: string, classname = null) {\r\n    const audio = document.createElement(\"audio\");\r\n    if (classname != null) {\r\n      audio.classList.add(classname);\r\n    }\r\n    const source = document.createElement(\"source\");\r\n    source.src = audioPath;\r\n    source.type = \"audio/mpeg\";\r\n    audio.appendChild(source);\r\n    return audio;\r\n  }\r\n  /**\r\n   * Converts an HTML string into an HTML element or a collection of HTML elements.\r\n   *\r\n   * @param textHtml - The HTML string to convert.\r\n   * @param targetName - The tag name of the target HTML element to create.\r\n   * @param children - A boolean indicating whether to return all children of the target element.\r\n   * @returns - Returns the first child of the target element if `children` is `false`, otherwise returns a collection of the element's children. Returns `null` if there are no children.\r\n   *\r\n   * This method creates a new HTML element of the type specified by `targetName`, sets its inner HTML to `textHtml`, and returns either the first child of this element or all its children as an HTMLCollection, depending on the value of `children`.\r\n   * If the HTML content generates no children, the method returns `null`.\r\n   */\r\n  public static textToHTMLElement(\r\n    textHtml: string,\r\n    targetName = \"div\",\r\n    children: boolean = false\r\n  ): Element | HTMLCollection | null {\r\n    const target = document.createElement(`${targetName}`);\r\n    target.innerHTML = textHtml;\r\n    if (true === children) {\r\n      return target.children;\r\n    }\r\n    return target.firstElementChild;\r\n  }\r\n  /**\r\n   * retourne un élément du dom\r\n   */\r\n  public static $$(element: any) {\r\n    if (typeof element !== \"string\") {\r\n      return element;\r\n    } else if (typeof element === \"string\") {\r\n      const collection = document.querySelectorAll(`${element}`);\r\n      const el = document.querySelector(`${element}`);\r\n      if (collection !== null && collection.length > 1) {\r\n        return collection;\r\n      }\r\n      if (el !== null) {\r\n        return el;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n   * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n   * @param nodeList Un objet NodeList ou un élément HTML.\r\n   * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n   * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n   * @returns\r\n   */\r\n  public static processNodes(\r\n    nodeList: any,\r\n    callback = (node: any, index?: number) => {}\r\n  ) {\r\n    if (nodeList instanceof NodeList || Array.isArray(nodeList)) {\r\n      return Array.from(nodeList).forEach((node, i) => {\r\n        callback(node, i);\r\n      });\r\n    }\r\n    if (null !== nodeList && undefined !== nodeList) {\r\n      return callback(nodeList);\r\n    }\r\n  }\r\n  /**\r\n   * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n   * @param type Le type d'expression régulière demandé.\r\n   * @returns L'expression régulière correspondante.\r\n   */\r\n  public static getRegexp(type: RegexType): RegExp {\r\n    switch (type) {\r\n      case \"email\":\r\n        return new RegExp(\r\n          /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i\r\n        );\r\n      case \"phone-number\":\r\n        return new RegExp(/^(0|\\+[1-9][0-9]{0,2}) ?[0-9]+$/);\r\n      case \"number\":\r\n        return new RegExp(/^[-+]?[0-9]*\\.?[0-9]+$/);\r\n      case \"strong-password\":\r\n        return new RegExp(\r\n          /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/\r\n        );\r\n      case \"url-protocol\":\r\n        return new RegExp(/^(https?:\\/\\/)$/, \"i\");\r\n      case \"url-domain\":\r\n        return new RegExp(/^((([a-zA-Z0-9]{1,})[.-]?)+[a-zA-Z]{2,})$/, \"i\");\r\n      case \"url-ip\":\r\n        return new RegExp(\r\n          /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\r\n          \"i\"\r\n        );\r\n      case \"url-port\":\r\n        return new RegExp(\r\n          /^:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3})$/,\r\n          \"i\"\r\n        );\r\n      case \"url-path\":\r\n        return new RegExp(/^(\\.\\/)?[-a-zA-Z\\d%_.~+\\/]*$/, \"i\");\r\n      case \"url-query\":\r\n        return new RegExp(/^(\\?[;&a-zA-Z\\d%_.~+=-]*)$/, \"i\");\r\n      case \"url-fragment\":\r\n        return new RegExp(/^#[-a-zA-Z\\d%_.~+/=?&;:!*'()]*$/, \"i\");\r\n      case \"default-text\":\r\n        return new RegExp(\r\n          /^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/\r\n        );\r\n      case \"fr-text\":\r\n        return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\r\n      case \"en-text\":\r\n        return new RegExp(/^[a-zA-Z '-]{1,40}$/);\r\n      case \"tr-text\":\r\n        return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\r\n      default:\r\n        throw new Error(\"Type d'expression régulière non pris en charge.\");\r\n    }\r\n  }\r\n  /**\r\n   * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement.\r\n   * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n   * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n   * @returns Un élément HTML représentant une zone interdite.\r\n   */\r\n  private static forbiddener(tag: string = \"td\", backgroundColor?: string) {\r\n    let forbiddenTag = document.createElement(tag);\r\n    forbiddenTag.setAttribute(\"class\", \"forbidden\");\r\n    const style = {\r\n      position: \"absolute\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      opacity: \".7\",\r\n      zIndex: \"10\",\r\n      backgroundColor: backgroundColor ? backgroundColor : \"#FFFFFF\",\r\n    };\r\n    Object.assign(forbiddenTag.style, style);\r\n    return forbiddenTag as HTMLElement;\r\n  }\r\n  /**\r\n   * Réduit une chaîne de texte.\r\n   * @param text La chaîne de texte à réduire.\r\n   * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n   * @returns La chaîne de texte réduite.\r\n   */\r\n  public static truncateChars(text: string, maxLength: number = 14): string {\r\n    text = typeof text === \"string\" ? text.trim() : \"\";\r\n    if (text.length > maxLength) {\r\n      return `${text.substring(0, maxLength)}...`;\r\n    }\r\n    return text;\r\n  }\r\n  /**\r\n   * Changes the input text type to a number type and performs additional processing\r\n   * based on the specified parameters.\r\n   *\r\n   * @param attr - The CSS selector for the input elements to be processed.\r\n   * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n   * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n   * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n   */\r\n  public static changeInputTextTypeToNumberType(\r\n    attr: string,\r\n    limit?: number | null,\r\n    priceType: boolean = false,\r\n    decimal?: number\r\n  ) {\r\n    this.processNodes(this.$$(attr), function (element) {\r\n      let input = element as HTMLInputElement;\r\n      if (input) {\r\n        input.addEventListener(\"input\", function () {\r\n          const regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\r\n          if (decimal) {\r\n            const getValue = input.value.replace(regExp, \"\");\r\n            input.value = `${parseFloat(getValue).toFixed(decimal)}`;\r\n          } else {\r\n            input.value = input.value.replace(regExp, \"\");\r\n          }\r\n          if (limit && parseInt(input.value) > limit) {\r\n            input.value = `${limit}`;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n   * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n   * and the background color for the forbidden tag.\r\n   *\r\n   * @param tag - The tag of the element to be disabled (default: \"td\").\r\n   * @param target - The target element to be disabled (default: undefined).\r\n   * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n   * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n   */\r\n  public static disablor(\r\n    tag = \"td\",\r\n    target?: HTMLElement,\r\n    trigger?: HTMLElement,\r\n    backgroundColor?: string\r\n  ) {\r\n    const buttons = document.querySelectorAll(\"[disablor],[self-disablor]\");\r\n    try {\r\n      if (!trigger && !buttons) {\r\n        throw new Error(\r\n          \"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n        );\r\n      }\r\n      this.processNodes(buttons, (button: HTMLElement) => {\r\n        button.addEventListener(\"click\", () => {\r\n          const self = button.hasAttribute(\"self-disablor\");\r\n          let item = self\r\n            ? button\r\n            : (button.closest(\"[disablor]\") as HTMLElement);\r\n\r\n          if (!target && !item) {\r\n            throw new Error(\r\n              \"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\"\r\n            );\r\n          }\r\n          if (item) {\r\n            item.style.position = \"relative\";\r\n            item.insertBefore(\r\n              this.forbiddener(tag, backgroundColor),\r\n              item.firstChild\r\n            );\r\n            if (item instanceof HTMLButtonElement) {\r\n              item.setAttribute(\"disabled\", \"true\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Une erreur s'est produit: \", error);\r\n    }\r\n  }\r\n  /**\r\n   * Adds an asterisk indicator to labels associated with required form fields.\r\n   * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n   * of the 'required-field' attribute. The function utilizes the processNodes method\r\n   * to iterate through the matched labels and append the asterisk.\r\n   */\r\n  public static setAsteriskToRequiredField() \r\n  {\r\n    const setIcon = (svgString:string)=>{\r\n      const asterisk = this.textToHTMLElement(svgString) as HTMLElement;\r\n      const labels = document.querySelectorAll(\"label[required-field]\");\r\n      asterisk.style.color = \"#f89a9b\";\r\n      asterisk.style.width = \"10px\";\r\n      asterisk.style.height = \"10px\";\r\n      if (labels) {\r\n        this.processNodes(labels, (label: HTMLLabelElement) => {\r\n          const clonedAsterisk = asterisk.cloneNode(true);\r\n          label.appendChild(clonedAsterisk);\r\n        });\r\n      }\r\n    }\r\n    const cacheIcon = sessionStorage.getItem(\"asterisk\");\r\n    if(cacheIcon)return setIcon(cacheIcon);\r\n    const svgUrl = \"https://raw.githubusercontent.com/Nelsallg/easylibs/1.0.0/packages/utils/dist/assets/asterisk.svg\";\r\n    fetch(svgUrl)\r\n      .then((response) => response.text())\r\n      .then((svgString) => {\r\n        setIcon(svgString)\r\n        sessionStorage.setItem(\"asterisk\", svgString);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Erreur lors du chargement du fichier SVG:\", error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * This method checks if the object contains a key with the given substring.\r\n   * @param object The object to be searched.\r\n   * @param substring The substring to search for.\r\n   * @param getKey An optional parameter to determine the type of return value.\r\n   *               If true, the method will return the key as a string.\r\n   *               If false or not provided, the method will return the value corresponding to the key.\r\n   * @returns The value or key of the first matching property if found, otherwise false.\r\n   */\r\n  public static hasKeyWithNameSubstring(\r\n    object: any,\r\n    substring: string,\r\n    getKey?: boolean\r\n  ) {\r\n    for (let key in object) {\r\n      if (key.includes(substring)) {\r\n        if (undefined === getKey || false === getKey) {\r\n          return object[key];\r\n        }\r\n        if (true === getKey) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * This method searches for an object's property by its key or short key.\r\n   * @param object The object to be searched.\r\n   * @param keyOrShortKey The key or short key to search for.\r\n   * @param key An optional parameter to determine the type of return value.\r\n   *            If true, the function will return the key as a string.\r\n   *            If false or not provided, the function will return the value corresponding to the key.\r\n   * @returns The value or key of the first matching property if found, otherwise false.\r\n   */\r\n  public static findObjectDataByKeyName(\r\n    object: any,\r\n    keyOrShorKey: string,\r\n    key?: boolean\r\n  ) {\r\n    Object.keys(object).forEach((key) => {\r\n      if (key.includes(keyOrShorKey)) {\r\n        return object[key];\r\n      }\r\n    });\r\n    return false;\r\n  }\r\n\r\n  public static findChar(\r\n    string: string,\r\n    limit: number,\r\n    returnBool: boolean = false\r\n  ) {\r\n    for (let i = 0; i <= limit; i++) {\r\n      const index = string.indexOf(i.toString());\r\n      if (index !== -1) {\r\n        return returnBool ? true : i.toString();\r\n      }\r\n    }\r\n    return returnBool ? false : null;\r\n  }\r\n\r\n  public static findComputedStyle(\r\n    element: HTMLElement,\r\n    property: string | Array<string>\r\n  ): string {\r\n    const styles = window.getComputedStyle(element);\r\n    const propertiesObject: any = {};\r\n    try {\r\n      if (!element) {\r\n        throw new Error(\"Element not found\");\r\n      }\r\n      if (!property) {\r\n        throw new Error(\"Property is required\");\r\n      }\r\n      if (Array.isArray(property) && property.length > 0) {\r\n        property.forEach((props) => {\r\n          propertiesObject[`${props}`] = styles.getPropertyValue(`${props}`);\r\n        });\r\n        return propertiesObject;\r\n      }\r\n      if (typeof property === \"string\") {\r\n        return styles.getPropertyValue(`${property}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  /**\r\n   * A function to escape special characters in a string using the DOM API.\r\n   *\r\n   * @param str - The input string to be escaped.\r\n   * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n   */\r\n  public static escape(str?: string): string {\r\n    if (!str) {\r\n      return \"\";\r\n    }\r\n    const div = document.createElement(\"div\");\r\n    div.appendChild(document.createTextNode(str));\r\n    return div.innerHTML;\r\n  }\r\n  /**\r\n   * This function takes an HTMLElement and a target string.\r\n   * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n   * If no such element is found, it returns null.\r\n   * @param referent - The starting point of the search.\r\n   * @param target - The CSS selector used to find the desired element.\r\n   * @returns The first Element with a matching target, or null if no such element is found.\r\n   */\r\n  public static findHTMLElementBy(\r\n    referent: HTMLElement,\r\n    target: string\r\n  ): Element | null {\r\n    let currentElement = referent as Element | null;\r\n    if (currentElement) {\r\n      while ((currentElement = currentElement.previousElementSibling)) {\r\n        const charCounterSpan = currentElement.querySelector(target);\r\n        if (charCounterSpan) {\r\n          return charCounterSpan;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n   * If no attributes are provided, it returns an empty string.\r\n   * @param attributes - An object containing HTML attributes.\r\n   * @returns A string representing the attributes.\r\n   */\r\n  public static formatHTMLAttributes(attributes: any) {\r\n    let attrs = \"\";\r\n    if (attributes) {\r\n      for (const [key, value] of Object.entries(attributes)) {\r\n        if (key) {\r\n          attrs += `${key}='${value}'`;\r\n        }\r\n      }\r\n    }\r\n    return attrs.trim();\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utils","_classCallCheck","audioPath","classname","arguments","length","undefined","audio","document","createElement","classList","add","source","src","type","appendChild","textHtml","targetName","children","target","concat","innerHTML","firstElementChild","element","collection","querySelectorAll","el","querySelector","nodeList","callback","node","index","NodeList","Array","isArray","from","forEach","i","RegExp","Error","tag","backgroundColor","forbiddenTag","setAttribute","style","position","width","height","opacity","zIndex","assign","text","maxLength","trim","substring","attr","limit","priceType","decimal","this","processNodes","$$","input","addEventListener","regExp","getValue","replace","parseFloat","toFixed","parseInt","_this","trigger","buttons","button","item","hasAttribute","closest","insertBefore","forbiddener","firstChild","HTMLButtonElement","error","console","_this2","setIcon","svgString","asterisk","textToHTMLElement","labels","color","label","clonedAsterisk","cloneNode","cacheIcon","sessionStorage","getItem","fetch","then","response","setItem","object","getKey","includes","keyOrShorKey","keys","string","returnBool","indexOf","toString","property","styles","window","getComputedStyle","propertiesObject","props","getPropertyValue","str","div","createTextNode","referent","currentElement","previousElementSibling","charCounterSpan","attributes","attrs","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray"],"sourceRoot":""}