/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./packages/fetch-request/src/fetch-request.ts":
/*!*****************************************************!*\
  !*** ./packages/fetch-request/src/fetch-request.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\r\n * Type definition for HTTP methods.\r\n */\n/**\r\n * Type definition for request headers, represented as a record of string key-value pairs.\r\n */\n/**\r\n * Interface defining the options for a fetch request.\r\n * Includes optional configuration for HTTP method, headers, credentials, mode, cache, integrity, timeout, content type,\r\n * request data type, and response data type.\r\n */\n/**\r\n * Interface for callbacks that can be executed at different stages of the fetch request process.\r\n * Includes optional methods for actions post-fetch, pre-fetch, on success, and on error.\r\n */\n/**\r\n * Type definition for the main fetch request configuration.\r\n * Includes the request URI, optional data, submitter element, fetch options, and callbacks.\r\n */\n/**\r\n * FetchRequest class designed to simplify the process of making HTTP requests within web applications.\r\n * It encapsulates functionality for sending requests and handling callbacks before and after the request.\r\n */\nvar FetchRequest = exports[\"default\"] = /*#__PURE__*/function () {\n  /**\r\n   * @param options Configuration for the fetch request.\r\n   */\n  function FetchRequest(_options) {\n    var _this = this;\n    _classCallCheck(this, FetchRequest);\n    _defineProperty(this, \"count\", 0);\n    /**\r\n     * Asynchronous method that handles the form submission process.\r\n     * It optionally executes pre-fetch and post-fetch callbacks and makes the HTTP request.\r\n     */\n    _defineProperty(this, \"submitForm\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            if (!(_this.options.callbacks && _this.options.callbacks.onPreFetch)) {\n              _context.next = 4;\n              break;\n            }\n            _context.next = 4;\n            return _this.preFetch();\n          case 4:\n            _context.next = 6;\n            return _this.run();\n          case 6:\n            if (!(_this.options.callbacks && _this.options.callbacks.onPostFetch)) {\n              _context.next = 9;\n              break;\n            }\n            _context.next = 9;\n            return _this.postFetch(_this.response, _this.status);\n          case 9:\n            _context.next = 14;\n            break;\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            _this.handleError(_context.t0, _this.status, 'Error executing query : ');\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 11]]);\n    })));\n    /**\r\n     * Asynchronous method that performs the HTTP request using the Fetch API.\r\n     * It constructs the request based on the provided options and handles the response.\r\n     */\n    _defineProperty(this, \"run\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var response, _this$options$callbac, _this$options$callbac2, _this$options, uri, _data, _options2, finalUri, method, fetchOptions, _response, responseDataType;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            response = null;\n            _context2.prev = 1;\n            _this$options = _this.options, uri = _this$options.uri, _data = _this$options.data, _options2 = _this$options.options;\n            if (uri) {\n              _context2.next = 5;\n              break;\n            }\n            throw new Error(\"URI is required\");\n          case 5:\n            _this.uri = uri;\n            _this.data = _data;\n            finalUri = uri;\n            method = (_options2 === null || _options2 === void 0 ? void 0 : _options2.method) || 'GET';\n            if (method === \"GET\" && _data) {\n              finalUri = _this.buildGetRequestUrl(uri, _data);\n            } else if (_data && ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(method)) {\n              _this.body = _this.prepareRequestBody(_data);\n            }\n            fetchOptions = {\n              method: method,\n              headers: _options2 === null || _options2 === void 0 ? void 0 : _options2.headers,\n              body: _this.body,\n              credentials: _options2 === null || _options2 === void 0 ? void 0 : _options2.credentials,\n              mode: _options2 === null || _options2 === void 0 ? void 0 : _options2.mode,\n              cache: _options2 === null || _options2 === void 0 ? void 0 : _options2.cache,\n              integrity: _options2 === null || _options2 === void 0 ? void 0 : _options2.integrity\n            };\n            if ([\"GET\", \"HEAD\", \"OPTIONS\"].includes(method)) {\n              delete fetchOptions.body;\n            }\n            _context2.next = 14;\n            return _this.lazyFatching(finalUri, fetchOptions);\n          case 14:\n            _response = _context2.sent;\n            _this.status = _response.status;\n            if (!_options2) {\n              _context2.next = 29;\n              break;\n            }\n            responseDataType = _options2.responseDataType;\n            if (!responseDataType) {\n              _context2.next = 29;\n              break;\n            }\n            if (!(responseDataType === \"text\")) {\n              _context2.next = 25;\n              break;\n            }\n            _context2.next = 22;\n            return _response.text();\n          case 22:\n            _context2.t0 = _context2.sent;\n            _context2.next = 28;\n            break;\n          case 25:\n            _context2.next = 27;\n            return _response.json();\n          case 27:\n            _context2.t0 = _context2.sent;\n          case 28:\n            _this.response = _context2.t0;\n          case 29:\n            if ((_this$options$callbac = _this.options.callbacks) !== null && _this$options$callbac !== void 0 && _this$options$callbac.onSuccess && _response.ok) {\n              _this.options.callbacks.onSuccess(_this.response);\n            } else if ((_this$options$callbac2 = _this.options.callbacks) !== null && _this$options$callbac2 !== void 0 && _this$options$callbac2.onError && !_response.ok) {\n              _this.options.callbacks.onError(new Error(typeof _this.response === \"string\" ? _this.response : \"Fetch Request Error\"), _response.status);\n            }\n            _context2.next = 35;\n            break;\n          case 32:\n            _context2.prev = 32;\n            _context2.t1 = _context2[\"catch\"](1);\n            _this.handleError(_context2.t1, response ? response.status : 0);\n          case 35:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[1, 32]]);\n    })));\n    /**\r\n     * Executes the pre-fetch callback, allowing for data modification before the request is sent.\r\n     */\n    _defineProperty(this, \"preFetch\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var _data2;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(typeof _this.options.callbacks.onPreFetch === 'function')) {\n              _context3.next = 5;\n              break;\n            }\n            _context3.next = 3;\n            return _this.options.callbacks.onPreFetch(_this.options.data);\n          case 3:\n            _data2 = _context3.sent;\n            if (_data2) {\n              _this.options.data = _data2.hasOwnProperty('data') ? _data2.data : _data2;\n            }\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })));\n    /**\r\n     * Executes the post-fetch callback, allowing for actions to be taken after the request has been processed.\r\n     * @param response The response from the fetch request.\r\n     * @param status The HTTP status code of the response.\r\n     */\n    _defineProperty(this, \"postFetch\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(response, status) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (_this.options.submitter instanceof HTMLButtonElement) {\n                _this.options.submitter.removeAttribute('disabled');\n              }\n              return _context4.abrupt(\"return\", _this.options.callbacks.onPostFetch ? _this.options.callbacks.onPostFetch(response, status) : undefined);\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      return function (_x, _x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    this.options = _options;\n    this.attachSubmitterEvent();\n  }\n  /**\r\n   * Attaches a click event listener to the submitter element that triggers the form submission.\r\n   * If no submitter is provided, the form submission is triggered immediately.\r\n   */\n  return _createClass(FetchRequest, [{\n    key: \"attachSubmitterEvent\",\n    value: function attachSubmitterEvent() {\n      this.options.submitter ? this.options.submitter.addEventListener('click', this.submitForm) : this.submitForm();\n    }\n  }, {\n    key: \"lazyFatching\",\n    value: function () {\n      var _lazyFatching = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(uri, fetchOptions) {\n        var response, _options3, timeOut;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!this.options) {\n                _context6.next = 9;\n                break;\n              }\n              _options3 = this.options.options;\n              if (!(_options3 && _options3.timeOut)) {\n                _context6.next = 6;\n                break;\n              }\n              timeOut = _options3.timeOut;\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.next = 2;\n                      return fetch(uri, fetchOptions);\n                    case 2:\n                      response = _context5.sent;\n                    case 3:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _callee5);\n              })), timeOut);\n              return _context6.abrupt(\"return\", response);\n            case 6:\n              _context6.next = 8;\n              return fetch(uri, fetchOptions);\n            case 8:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function lazyFatching(_x3, _x4) {\n        return _lazyFatching.apply(this, arguments);\n      }\n      return lazyFatching;\n    }()\n  }, {\n    key: \"recursion\",\n    value:\n    /**\r\n     * Repeats the execution of the current query\r\n     * @param  data\r\n     */\n    function recursion(data) {\n      if (this.options.iteration) {\n        if (this.count < this.options.iteration) {\n          if (data) this.options.data = Object.assign(this.data, data);\n          this.run();\n          this.count++;\n        }\n      }\n    }\n    /**\r\n     * Constructs the URL for a GET request by appending query parameters.\r\n     * @param uri The base URI for the request.\r\n     * @param data The data to be sent as query parameters.\r\n     * @returns The final URI with query parameters.\r\n     */\n  }, {\n    key: \"buildGetRequestUrl\",\n    value: function buildGetRequestUrl(uri, data) {\n      var url = new URL(uri, window.location.origin);\n      var params = new URLSearchParams();\n      if (data instanceof FormData) {\n        var _iterator = _createForOfIteratorHelper(data.entries()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n            if (typeof value === 'string') {\n              params.append(key, value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            _key = _Object$entries$_i[0],\n            _value = _Object$entries$_i[1];\n          params.append(_key, _value);\n        }\n      }\n      url.search = params.toString();\n      return url.toString();\n    }\n    /**\r\n     * Prepares the request body based on the specified data type.\r\n     * @param data The data to be sent in the request body.\r\n     * @returns The prepared request body.\r\n     */\n  }, {\n    key: \"prepareRequestBody\",\n    value: function prepareRequestBody(data) {\n      var _this$options$options, _this$options$options2;\n      if (((_this$options$options = this.options.options) === null || _this$options$options === void 0 ? void 0 : _this$options$options.requestDataConvert) === \"form-data\" && !(data instanceof FormData)) {\n        return this.convertObjectToFormData(data);\n      } else if (((_this$options$options2 = this.options.options) === null || _this$options$options2 === void 0 ? void 0 : _this$options$options2.requestDataConvert) === \"record\") {\n        return JSON.stringify(data);\n      }\n      return data;\n    }\n    /**\r\n     * Converts an object to FormData.\r\n     * @param data The data object to convert.\r\n     * @returns The FormData representation of the data.\r\n     */\n  }, {\n    key: \"convertObjectToFormData\",\n    value: function convertObjectToFormData(data) {\n      var formData = new FormData();\n      Object.entries(data).forEach(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n        return formData.append(key, value);\n      });\n      return formData;\n    }\n    /**\r\n     * Handles errors that occur during the fetch request process.\r\n     * Logs the error and executes the onError callback if provided.\r\n     * @param error The error that occurred.\r\n     * @param status Optional HTTP status code related to the error.\r\n     * @param message Optional custom error message.\r\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(error, status) {\n      var _this$options$callbac3;\n      var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Fetch Request Error: ';\n      console.error(message, error);\n      if ((_this$options$callbac3 = this.options.callbacks) !== null && _this$options$callbac3 !== void 0 && _this$options$callbac3.onError) {\n        this.options.callbacks.onError(error, status || 0);\n      }\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/fetch-request/src/fetch-request.ts?");

/***/ }),

/***/ "./packages/file-uploader/src/file-uploader.ts":
/*!*****************************************************!*\
  !*** ./packages/file-uploader/src/file-uploader.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @easylibs/utils */ \"./packages/utils/dist/utils.js\"));\nvar _transformer = __webpack_require__(/*! @easylibs/transformer */ \"./packages/transformer/dist/transformer.js\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar FileUploader = exports[\"default\"] = /*#__PURE__*/function () {\n  /**\r\n   * @param input La balise input qui recevra l'image\r\n   * @param filePreviewer La balise dans laquelle l'image sera affiché\r\n   */\n  function FileUploader(input, filePreviewer) {\n    var autoRun = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var progressContainer = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, FileUploader);\n    this.input = input;\n    this.autoRun = autoRun;\n    this.progressContainer = progressContainer;\n    this.input = _utils[\"default\"].$$(input);\n    this.filePreviewer = filePreviewer instanceof Element ? filePreviewer : document.querySelector(\"\".concat(filePreviewer));\n    this.progressContainer = progressContainer instanceof HTMLElement ? progressContainer : document.querySelector(\"\".concat(progressContainer));\n  }\n  return _createClass(FileUploader, [{\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (files) {};\n      if (this.input && this.input instanceof HTMLInputElement) {\n        if (true === this.autoRun) {\n          this.input.addEventListener(\"change\", function () {\n            var input = _this.input;\n            return _this.defineUploadingType(input, callback);\n          });\n        }\n        if (false === this.autoRun) {\n          try {\n            var _input = this.input;\n            if (!_input) {\n              throw new Error(\"No Input Target\");\n            }\n            return this.defineUploadingType(_input, callback);\n          } catch (error) {\n            console.log(\"Error \".concat(error));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"defineUploadingType\",\n    value: function defineUploadingType(input) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (files) {};\n      if (input.files) {\n        var files = input.files;\n        if (files.length === 1) {\n          this.singleUploading(files[0], function (file) {\n            return callback(file);\n          });\n        }\n        if (files.length > 1) {\n          this.multipleUploading(files, function (_files) {\n            return callback(_files);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"singleUploading\",\n    value: function singleUploading(file, callback) {\n      var _this2 = this;\n      var _file = null;\n      var fileReader = new FileReader();\n      this.progress(file);\n      fileReader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var base64String;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              base64String = fileReader.result;\n              _context.t0 = file.name;\n              _context.t1 = base64String ? base64String.toString() : \"\";\n              _context.t2 = file.type;\n              _context.t3 = file.size;\n              _context.next = 7;\n              return file.arrayBuffer();\n            case 7:\n              _context.t4 = _context.sent;\n              _file = {\n                fullName: _context.t0,\n                base64String: _context.t1,\n                contentType: _context.t2,\n                size: _context.t3,\n                arrayBuffer: _context.t4\n              };\n              _utils[\"default\"].processNodes(_this2.filePreviewer, function (element) {\n                element.src = \"\".concat(base64String);\n              });\n              return _context.abrupt(\"return\", callback(_file));\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      fileReader.readAsDataURL(file);\n    }\n  }, {\n    key: \"multipleUploading\",\n    value: function multipleUploading(files, callback) {\n      var _this3 = this;\n      var _files = [];\n      var _loop = function _loop() {\n        var file = files[i];\n        _this3.progress(file);\n        if (file instanceof Blob) {\n          var reader = new FileReader();\n          reader.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            var base64String;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  base64String = reader.result;\n                  _context2.t0 = _files;\n                  _context2.t1 = file.name;\n                  _context2.t2 = base64String ? base64String.toString() : \"\";\n                  _context2.t3 = file.type;\n                  _context2.t4 = file.size;\n                  _context2.next = 8;\n                  return file.arrayBuffer();\n                case 8:\n                  _context2.t5 = _context2.sent;\n                  _context2.t6 = {\n                    fullName: _context2.t1,\n                    base64String: _context2.t2,\n                    contentType: _context2.t3,\n                    size: _context2.t4,\n                    arrayBuffer: _context2.t5\n                  };\n                  _context2.t0.push.call(_context2.t0, _context2.t6);\n                  if (_files.length === files.length) {\n                    callback(_files);\n                  }\n                case 12:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          reader.readAsDataURL(file);\n        }\n      };\n      for (var i = 0; i < files.length; i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"setFilePreview\",\n    value: function setFilePreview(base64String) {\n      var filePreviewer = this.filePreviewer;\n      if (filePreviewer instanceof HTMLImageElement) {\n        _utils[\"default\"].processNodes(filePreviewer, function (element) {\n          element.src = \"\".concat(base64String);\n        });\n      }\n    }\n  }, {\n    key: \"autoUploadFile\",\n    value: function autoUploadFile() {\n      var transformer = new _transformer.Transformer.FileTransformer();\n      var filesInput = document.querySelectorAll(\"input[type='file']\");\n      _utils[\"default\"].processNodes(filesInput, function (fileInput) {\n        var value = fileInput.dataset.value;\n        if (value && value !== \"\") {\n          var file = transformer.fromBase64String(value, null, null, false);\n          if (file) {\n            var newFileList = new DataTransfer();\n            newFileList.items.add(file);\n            Object.defineProperty(fileInput, 'files', {\n              value: newFileList.files,\n              writable: false\n            });\n            fileInput.removeAttribute('data-value');\n            var changeEvent = new Event('change');\n            fileInput.dispatchEvent(changeEvent);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"progress\",\n    value: function progress(file) {\n      try {\n        if (!file) {\n          return;\n        }\n        if (!this.progressContainer) {\n          return;\n        }\n        var progressBar = this.progressHTML();\n        if (this.progressContainer instanceof HTMLElement) this.progressContainer.appendChild(progressBar);\n        var xhr = new XMLHttpRequest();\n        xhr.upload.addEventListener('progress', function (e) {\n          console.log(e.lengthComputable);\n          if (e.lengthComputable) {\n            var percentComplete = e.loaded / e.total * 100;\n            progressBar.style.width = percentComplete + '%';\n            progressBar.innerHTML = percentComplete.toFixed(0) + '%';\n            console.log(percentComplete.toFixed(0) + '%');\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }, {\n    key: \"progressHTML\",\n    value: function progressHTML() {\n      var target = \"<div id=\\\"progress-container\\\">\\n        <div id=\\\"progress-bar\\\"></div>\\n    </div>\";\n      var element = _utils[\"default\"].textToHTMLElement(target);\n      element.style.position = 'absolute';\n      return element;\n    }\n  }, {\n    key: \"createInput\",\n    value: function createInput() {\n      var input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"file\");\n      input.setAttribute(\"multiple\", \"true\");\n      input.style.display = \"none\";\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/file-uploader/src/file-uploader.ts?");

/***/ }),

/***/ "./packages/progress-form/src/progress-form.ts":
/*!*****************************************************!*\
  !*** ./packages/progress-form/src/progress-form.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _cssStyle = __webpack_require__(/*! ./scripts/css-style */ \"./packages/progress-form/src/scripts/css-style.ts\");\nvar _focusInBlock = __webpack_require__(/*! ./scripts/focus-in-block */ \"./packages/progress-form/src/scripts/focus-in-block.ts\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar fieldSetElement = null;\n/**\r\n * ProgressForm represents a class for managing a progressive form.\r\n */\nvar ProgressForm = exports[\"default\"] = /*#__PURE__*/function () {\n  // Lazy running variables\n\n  // Lazy running variables\n  /**\r\n   * @param enableDefaultCssStyle Determines whether the default CSS style should be enabled. Default is true.\r\n   */\n  function ProgressForm() {\n    var enableDefaultCssStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    _classCallCheck(this, ProgressForm);\n    _defineProperty(this, \"fieldsetLength\", 0);\n    _defineProperty(this, \"progressingData\", {});\n    this.enableDefaultCssStyle = enableDefaultCssStyle;\n  }\n  /**\r\n   * Retrieves and initializes all data and variables for running\r\n   * @param params The parameters of the form.\r\n   * @returns \r\n   */\n  return _createClass(ProgressForm, [{\n    key: \"init\",\n    value: function init(params) {\n      var _params$fieldsetMargi;\n      this.params = params;\n      this.hasValidHTMLStructure(params.form);\n      var fieldSets = params.form.querySelectorAll('fieldset');\n      this.setTranslateX(params, fieldSets[0]);\n      var progressElement = document.querySelector('[__progress__]');\n      this.fieldsetMarginWidth = (_params$fieldsetMargi = params.fieldsetMargingWidth) !== null && _params$fieldsetMargi !== void 0 ? _params$fieldsetMargi : 60;\n      var nextIndex = 1;\n      var prevIndex = this.isLazyRun ? this.lazyFieldsetLength : fieldSets.length;\n      var prevTranslateX = 0;\n      this.fieldsetLength = this.lastIndex = this.isLazyRun ? this.lazyFieldsetLength : fieldSets.length;\n      this.currentIndex = 0;\n      var PROGRESS = this.PROGRESS;\n      return {\n        fieldSets: fieldSets,\n        nextIndex: nextIndex,\n        prevTranslateX: prevTranslateX,\n        PROGRESS: PROGRESS,\n        prevIndex: prevIndex,\n        progressElement: progressElement\n      };\n    }\n    /**\r\n     * Executes the progressive form.\r\n     * @param params The parameters of the form.\r\n     * @param styleOptions Style options for the form, fieldsets and fieldsets parent elements.\r\n    */\n  }, {\n    key: \"run\",\n    value: function run(params, styleOptions) {\n      var _this = this;\n      var preventProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$init = this.init(params),\n        fieldSets = _this$init.fieldSets,\n        nextIndex = _this$init.nextIndex,\n        prevTranslateX = _this$init.prevTranslateX,\n        PROGRESS = _this$init.PROGRESS,\n        prevIndex = _this$init.prevIndex,\n        progressElement = _this$init.progressElement;\n      if (fieldSets && fieldSets.length >= 1) {\n        var _params$targetMarginW;\n        var translateX = this.translateX - this.fieldsetMarginWidth / this.fieldsetLength;\n        var targetMarginWidth = (_params$targetMarginW = params.targetMarginWidth) !== null && _params$targetMarginW !== void 0 ? _params$targetMarginW : 0;\n        if (!this.isLazyRun && fieldSets.length > 1) {\n          fieldSets.forEach(function (fieldSet, i) {\n            var nextButton = fieldSet.querySelector(\"[__next__]\");\n            var prevButton = fieldSet.querySelector(\"[__prev__]\");\n            var nextTranslateX = translateX * nextIndex - targetMarginWidth;\n            prevTranslateX = translateX * nextIndex + Math.abs(translateX * 2);\n            var nextProgress = PROGRESS * (i + 2);\n            var prevProgress = i > 1 ? PROGRESS * i : PROGRESS;\n            fieldSetElement = fieldSet;\n            fieldSet.classList.add(\"fieldset\".concat(i));\n            if (i === 0) {\n              var fields = fieldSet.querySelectorAll(\"input:not([type='hidden'],[readonly]), textarea\");\n              fields[i].focus();\n              _this.compartmentalizeFocusInFieldset(fieldSetElement);\n            }\n            if (preventProgress === false || preventProgress === \"prev\") _this.next(nextIndex, nextTranslateX, nextButton, progressElement, nextProgress);\n            nextIndex++;\n            if (i === 0) {\n              (0, _focusInBlock.getFocusableElements)(fieldSetElement);\n            }\n            if (preventProgress === false || preventProgress === \"next\") _this.prev(prevIndex, prevTranslateX, prevButton, progressElement, prevProgress);\n            prevIndex--;\n          });\n        } else {\n          for (var i = 0; i < this.lazyFieldsetLength; i++) {\n            var fieldSet = i === 0 ? document.querySelector(\"fieldset\") : null;\n            var nextButton = fieldSet === null || fieldSet === void 0 ? void 0 : fieldSet.querySelector(\"[__next__]\");\n            var nextTranslateX = translateX * nextIndex - targetMarginWidth;\n            prevTranslateX = translateX * nextIndex + Math.abs(translateX * 2);\n            var nextProgress = PROGRESS * (i + 2);\n            var prevProgress = i > 1 ? PROGRESS * i : PROGRESS;\n            fieldSetElement = fieldSet;\n            if (fieldSet) {\n              fieldSet.classList.add(\"fieldset0\");\n              fieldSet.focus();\n              this.compartmentalizeFocusInFieldset(fieldSet);\n            }\n            this.PROGRESSING_DATA[\"fieldset\".concat(i)] = {\n              '@i': i,\n              '@translateX': i === 0 ? 0 : i === 1 ? translateX : nextTranslateX - translateX,\n              '@progress': PROGRESS * (i + 1),\n              '@target': fieldSetElement,\n              next: {\n                i: nextIndex,\n                button: nextButton,\n                translateX: nextTranslateX,\n                progress: nextProgress\n              },\n              prev: {\n                i: i - 1,\n                button: null,\n                translateX: prevTranslateX,\n                progress: prevProgress\n              }\n            };\n            nextIndex++;\n            this.currentIndex = i;\n          }\n        }\n      }\n      if (progressElement) {\n        progressElement.style.width = \"\".concat(PROGRESS, \"%\");\n      }\n      if (this.enableDefaultCssStyle) {\n        this.renderedStyle = (0, _cssStyle.cssStyle)(params, fieldSets, this.translateX, this.fieldsetLength, this.fieldsetMarginWidth, styleOptions);\n      }\n    }\n    /**\r\n     * \r\n     * @param fieldsetLength \r\n     * @param params The parameters of the form.\r\n     * @param styleOptions Style options for the form, fieldsets and fieldsets parent elements.\r\n     */\n  }, {\n    key: \"lazyRun\",\n    value: function lazyRun(fieldsetLength, params, styleOptions) {\n      this.isLazyRun = true;\n      this.lazyFieldsetLength = fieldsetLength;\n      this.run(params, styleOptions);\n    }\n    /**\r\n     * Handles the \"next\" button click event.\r\n     * @param nextButton The \"next\" button element.\r\n     * @param nextIndex The index of the next fieldset.\r\n     * @param nextTranslateX The translateX value for the next fieldset.\r\n     * @param progressElement The progress element.\r\n     * @param nextProgress The progress for the next fieldset.\r\n     */\n  }, {\n    key: \"next\",\n    value: function next(nextIndex, nextTranslateX, nextButton, progressElement, nextProgress) {\n      var _this2 = this;\n      var targets = this.fieldsetTargetArray;\n      var handleNext = function handleNext() {\n        var fieldSet = document.querySelector(\".fieldset\".concat(nextIndex - 1));\n        var isValidFieldset = _this2.isValidFieldset(fieldSet);\n        if (_this2.params.onPreNext) _this2.params.onPreNext(isValidFieldset);\n        if (isValidFieldset) {\n          fieldSetElement = document.querySelector(\".fieldset\".concat(nextIndex));\n          if (fieldSetElement) {\n            _this2.compartmentalizeFocusInFieldset(fieldSetElement);\n            (0, _focusInBlock.getFocusableElements)(fieldSetElement);\n          }\n          (0, _cssStyle.anime)({\n            targets: targets,\n            translateX: nextTranslateX\n          });\n          if (progressElement) {\n            progressElement.style.width = \"\".concat(nextProgress !== null && nextProgress !== void 0 ? nextProgress : 0, \"%\");\n          }\n          if (_this2.params.onPostNext) _this2.params.onPostNext();\n        }\n      };\n      try {\n        if (nextButton) {\n          nextButton.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n            handleNext();\n          });\n        } else {\n          if (!this.isLazyRun) {\n            throw Error(\"You must pass to lazy running or set next button element\");\n          }\n          handleNext();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    /**\r\n     * Handles the \"previous\" button click event.\r\n     * @param prevButton The \"previous\" button element.\r\n     * @param prevIndex The index of the previous fieldset.\r\n     * @param prevTranslateX The translateX value for the previous fieldset.\r\n     * @param progressElement The progress element.\r\n     * @param prevProgress The progress for the previous fieldset.\r\n    */\n  }, {\n    key: \"prev\",\n    value: function prev(prevIndex, prevTranslateX, prevButton, progressElement, prevProgress) {\n      var _this3 = this;\n      var targets = this.fieldsetTargetArray;\n      var handlePrev = function handlePrev() {\n        fieldSetElement = document.querySelector(\".fieldset\".concat(prevIndex));\n        if (fieldSetElement) {\n          _this3.compartmentalizeFocusInFieldset(fieldSetElement);\n          (0, _focusInBlock.getFocusableElements)(fieldSetElement);\n        }\n        (0, _cssStyle.anime)({\n          targets: targets,\n          translateX: prevTranslateX\n        });\n        if (progressElement) {\n          progressElement.style.width = \"\".concat(prevProgress !== null && prevProgress !== void 0 ? prevProgress : 0, \"%\");\n        }\n      };\n      try {\n        if (prevButton) {\n          prevButton.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n            handlePrev();\n          });\n        } else {\n          if (!this.isLazyRun) {\n            throw Error(\"You must pass to lazy running or set prev button element\");\n          }\n          handlePrev();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    /**\r\n     * Calculates the progress percentage of the form.\r\n     * @returns The progress percentage.\r\n    */\n  }, {\n    key: \"PROGRESS\",\n    get: function get() {\n      return 100 / this.fieldsetLength;\n    }\n    /**\r\n     * Retrieve progress data for each fieldset\r\n     */\n  }, {\n    key: \"PROGRESSING_DATA\",\n    get: function get() {\n      if (this.progressingData && Object.entries(this.progressingData).length > 0) {\n        if (this.currentIndex === 1) delete this.progressingData[\"fieldset0\"].prev;\n        if (this.currentIndex === this.lastIndex - 1) delete this.progressingData[\"fieldset\".concat(this.currentIndex)].next;\n      }\n      return this.progressingData;\n    }\n  }, {\n    key: \"RENDERED_STYLE\",\n    get: function get() {\n      return this.renderedStyle;\n    }\n    /**\r\n     * Compartmentalizes focus within a fieldset.\r\n     * @param fieldSet The fieldset to compartmentalize focus within.\r\n    */\n  }, {\n    key: \"compartmentalizeFocusInFieldset\",\n    value: function compartmentalizeFocusInFieldset(fieldSet) {\n      window.addEventListener('keydown', function (e) {\n        if (e.key === 'Tab' && fieldSet !== null) {\n          (0, _focusInBlock.focusInBlock)(e, fieldSet);\n        }\n      });\n    }\n    /**\r\n     * Checks if a fieldset is valid.\r\n     * @param fieldSet The fieldset to validate.\r\n     * @returns true if the fieldset is valid, otherwise false.\r\n    */\n  }, {\n    key: \"isValidFieldset\",\n    value: function isValidFieldset(fieldSet) {\n      if (fieldSet) {\n        var fields = Array.from(fieldSet.querySelectorAll('input, select, textarea'));\n        if (fields) {\n          for (var _i = 0, _arr = fields; _i < _arr.length; _i++) {\n            var field = _arr[_i];\n            if (!field.checkValidity()) {\n              field.reportValidity();\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    }\n    /**\r\n     * Generates an array of target selectors for fieldsets.\r\n     * @returns An array of target selectors.\r\n     */\n  }, {\n    key: \"fieldsetTargetArray\",\n    get: function get() {\n      var fieldsetTargetArray = [];\n      var length = this.lazyFieldsetLength ? this.lazyFieldsetLength : this.fieldsetLength;\n      if (length > 0) {\n        for (var i = 0; i < length; i++) {\n          fieldsetTargetArray.push(\".fieldset\".concat(i));\n        }\n      }\n      return fieldsetTargetArray;\n    }\n    /**\r\n     * Checks if the HTML structure of the form is valid.\r\n     * @param form The form to validate.\r\n     * @throws Error if the HTML structure is not valid.\r\n     */\n  }, {\n    key: \"hasValidHTMLStructure\",\n    value: function hasValidHTMLStructure(form) {\n      try {\n        if (!form) {\n          throw new Error(\"The form could not be retrieved\");\n        }\n        var fieldSetParent = form.querySelector(\"[fieldset__parent]\");\n        if (!fieldSetParent) {\n          throw new Error(\"The element with the attribute [fieldset__parent] not found in your form\");\n        }\n        var fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\");\n        if (!fieldsetContainer) {\n          throw new Error(\"The element with the attribute [fieldset__container] not found in your fieldset__parent\");\n        }\n        var fieldSets = fieldsetContainer.querySelectorAll('fieldset');\n        if (!fieldSets) {\n          throw new Error(\"Aucune section de formulaire trouvée.\");\n        }\n        var next_buttons = form.querySelectorAll(\"[__next__]\");\n        var prev_buttons = form.querySelectorAll(\"[__prev__]\");\n        if (!next_buttons) {\n          throw new Error('No \"next\" button found!');\n        }\n        if (!prev_buttons) {\n          throw new Error(\"No 'previous' button found!\");\n        }\n      } catch (error) {\n        throw error;\n      }\n    }\n    /**\r\n     * Defines the movement of each fieldset.\r\n     * @param params The parameters for setting translateX.\r\n     * @param fieldSet The fieldset element.\r\n    */\n  }, {\n    key: \"setTranslateX\",\n    value: function setTranslateX(params, fieldSet) {\n      if (!fieldSet) return;\n      this.translateX = params.translateX ? params.translateX : -fieldSet.offsetWidth;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/progress-form/src/progress-form.ts?");

/***/ }),

/***/ "./packages/progress-form/src/scripts/css-style.ts":
/*!*********************************************************!*\
  !*** ./packages/progress-form/src/scripts/css-style.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.anime = anime;\nexports.cssStyle = cssStyle;\nfunction cssStyle(params, fieldSets, translateX, fieldsetLength, fieldsetMarginWidth, styleOptions) {\n  try {\n    var fieldSetParent = params.form.querySelector(\"[fieldset__parent]\");\n    var fieldsetContainer = fieldSetParent.querySelector(\"[fieldset__container]\");\n    var fieldsetWidth = Math.abs(translateX);\n    var fieldsetContainerWidth = fieldsetLength * fieldsetWidth + fieldsetMarginWidth;\n    var defaultFieldSetParentStyle = {\n      height: \"100%\",\n      overflow: \"hidden\",\n      width: \"\".concat(fieldsetWidth, \"px\")\n    };\n    var defaultFormStyle = {\n      width: \"\".concat(fieldsetWidth, \"px\"),\n      height: \"100%\",\n      boxSizing: \"border-box\"\n    };\n    var defaultFieldsetContainerStyle = {\n      width: \"\".concat(fieldsetContainerWidth, \"px\"),\n      height: \"100%\",\n      overflow: \"hidden\",\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    };\n    var defaultFieldsetStyle = {\n      width: \"\".concat(fieldsetWidth, \"px\"),\n      transition: \"margin-left 0.4s ease-in-out\",\n      backgroundColor: \"#FFFFFF\",\n      justifyContent: \"space-between\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      padding: \"30px\",\n      border: \"none\",\n      boxShadow: \"0 0 5px rgba(255, 255, 255, 0.7137254902)\",\n      borderRadius: \"3px\"\n    };\n\n    // Fusionnez les styles par défaut avec les styles personnalisés\n    var formStyle = Object.assign({}, defaultFormStyle, styleOptions === null || styleOptions === void 0 ? void 0 : styleOptions.form);\n    var fieldSetParentStyle = Object.assign({}, defaultFieldSetParentStyle, styleOptions === null || styleOptions === void 0 ? void 0 : styleOptions.fieldsetParent);\n    var fieldsetContainerStyle = Object.assign({}, defaultFieldsetContainerStyle, styleOptions === null || styleOptions === void 0 ? void 0 : styleOptions.fieldsetContainer);\n    var fieldsetStyle = Object.assign({}, defaultFieldsetStyle, styleOptions === null || styleOptions === void 0 ? void 0 : styleOptions.fieldset);\n    Object.assign(params.form.style, formStyle);\n    Object.assign(fieldSetParent.style, fieldSetParentStyle);\n    Object.assign(fieldsetContainer.style, fieldsetContainerStyle);\n    fieldSets.forEach(function (fieldSet, index) {\n      Object.assign(fieldSet.style, fieldsetStyle);\n      fieldSet.classList.add(\"fieldset\".concat(index));\n    });\n    return {\n      fieldSetParentStyle: fieldSetParentStyle,\n      fieldsetContainerStyle: fieldsetContainerStyle,\n      formStyle: formStyle,\n      fieldsetStyle: fieldsetStyle\n    };\n  } catch (error) {\n    console.error(error);\n  }\n}\nvar lastTranslateXMap = new Map();\nfunction anime(options) {\n  options.targets.forEach(function (target) {\n    var element = typeof target === 'string' ? document.querySelector(target) : target;\n    if (element) {\n      var lastTranslateX = lastTranslateXMap.get(element) || 0;\n      var translateX = options.translateX;\n      var keyframes = [{\n        transform: \"translateX(\".concat(lastTranslateX, \"px)\")\n      }, {\n        transform: \"translateX(\".concat(translateX, \"px)\")\n      }];\n      var _options = {\n        duration: 1000,\n        fill: 'forwards',\n        // L'animation reste appliquée à la fin\n        easing: 'cubic-bezier(1, 0, 0, 1)' // Approximation de l'effet d'assouplissement easeInOutExpo\n      };\n      if (element.animate) {\n        element.animate(keyframes, _options);\n        lastTranslateXMap.set(element, translateX);\n      }\n    }\n  });\n}\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/progress-form/src/scripts/css-style.ts?");

/***/ }),

/***/ "./packages/progress-form/src/scripts/focus-in-block.ts":
/*!**************************************************************!*\
  !*** ./packages/progress-form/src/scripts/focus-in-block.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.focusInBlock = focusInBlock;\nexports.getFocusableElements = getFocusableElements;\n/**\r\n * Gère le focus clavier sur les éléments d'un bloc HTML spécifié.\r\n * @param key - L'événement clavier qui a déclenché la fonction.\r\n * @param block - L'élément HTML qui représente le bloc sur lequel on souhaite gérer le focus.\r\n */\nfunction focusInBlock(key, block) {\n  key.preventDefault();\n  var focusables = getFocusableElements(block);\n  var index = focusables.findIndex(function (f) {\n    return f === block.querySelector(':focus');\n  });\n  key.shiftKey === true ? index-- : index++;\n  if (index >= focusables.length) {\n    index = 0;\n  }\n  if (index < 0) {\n    index = focusables.length - 1;\n  }\n  var FIELD = focusables[index];\n  FIELD.focus();\n}\n/**\r\n * Récupère tous les éléments focusables dans un bloc HTML spécifié.\r\n * @param block - L'élément HTML qui représente le bloc contenant les éléments focusables.\r\n * @returns Un tableau d'éléments focusables présents dans le bloc.\r\n */\nfunction getFocusableElements(block) {\n  var focusableSelector = \"button, select, input, a, textarea\";\n  return Array.from(block.querySelectorAll(focusableSelector));\n}\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/progress-form/src/scripts/focus-in-block.ts?");

/***/ }),

/***/ "./packages/tempdata-backend/src/tempdata-backend.ts":
/*!***********************************************************!*\
  !*** ./packages/tempdata-backend/src/tempdata-backend.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _fetchRequest = _interopRequireDefault(__webpack_require__(/*! @easylibs/fetch-request */ \"./packages/fetch-request/dist/fetch-request.js\"));\nvar _transformer = __webpack_require__(/*! @easylibs/transformer */ \"./packages/transformer/dist/transformer.js\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar TempDataBackend = exports[\"default\"] = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param database - base de données\r\n   * @param uri - L'URL de destination où les données du formulaire seront envoyées.\r\n   */\n  function TempDataBackend(database, uri) {\n    _classCallCheck(this, TempDataBackend);\n    _defineProperty(this, \"_response\", null);\n    this.database = database;\n    this.uri = uri;\n  }\n  /**\r\n   * Persists data to the server.\r\n   *\r\n   * @param redirectURL - The URL to redirect to after the data is persisted.\r\n   * @param callback - The callback function to be called after the data is persisted.\r\n   * @returns A promise that resolves when the data is persisted.\r\n   */\n  return _createClass(TempDataBackend, [{\n    key: \"persist\",\n    value: (function () {\n      var _persist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(redirectURL) {\n        var _this = this;\n        var callback,\n          elements,\n          promises,\n          i,\n          formData,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              callback = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : function (result) {};\n              _context2.next = 3;\n              return this.database.read();\n            case 3:\n              elements = _context2.sent;\n              promises = [];\n              if (elements instanceof Array && elements.length > 0) {\n                for (i = 0; i < elements.length; i++) {\n                  (function (currentIndex) {\n                    promises.push(new Promise( /*#__PURE__*/function () {\n                      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {\n                        var data;\n                        return _regeneratorRuntime().wrap(function _callee$(_context) {\n                          while (1) switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return _this.database.readOne(currentIndex, \"record\");\n                            case 3:\n                              data = _context.sent;\n                              if (data) {\n                                delete data[\"@base64String\"];\n                                delete data[\"@id\"];\n                              }\n                              resolve(data);\n                              _context.next = 11;\n                              break;\n                            case 8:\n                              _context.prev = 8;\n                              _context.t0 = _context[\"catch\"](0);\n                              reject(\"Désolé une probleme est survenu: \" + _context.t0);\n                            case 11:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }, _callee, null, [[0, 8]]);\n                      }));\n                      return function (_x2, _x3) {\n                        return _ref.apply(this, arguments);\n                      };\n                    }()));\n                  })(i);\n                }\n              }\n              _context2.t0 = this;\n              _context2.next = 9;\n              return Promise.all(promises);\n            case 9:\n              _context2.t1 = _context2.sent;\n              formData = _context2.t0.normalizeArrayField.call(_context2.t0, _context2.t1);\n              new _fetchRequest[\"default\"]({\n                uri: this.uri,\n                data: formData,\n                options: {\n                  method: \"POST\",\n                  responseDataType: \"json\",\n                  requestDataConvert: \"form-data\"\n                },\n                callbacks: {\n                  onSuccess: function onSuccess(response) {\n                    _this._response = response;\n                    callback(_this._response);\n                    if (redirectURL) {\n                      return window.location.href = redirectURL || \"/\";\n                    }\n                  }\n                }\n              });\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function persist(_x) {\n        return _persist.apply(this, arguments);\n      }\n      return persist;\n    }()\n    /**\r\n     * Saves form data to the server.\r\n     *\r\n     * @param data - The data object containing the submiter, callback, redirectUrl, and loader properties.\r\n     * @param data.submiter - The submit button element.\r\n     * @param data.callback - The callback function to be called after the data is saved.\r\n     * @param data.redirectUrl - The URL to redirect to after the data is saved.\r\n     * @param data.loader - The loader HTML content to display while saving the data.\r\n     */\n    )\n  }, {\n    key: \"save\",\n    value: function save(data) {\n      var _ref2,\n        _this2 = this;\n      var form = (_ref2 = data.submiter.closest(\"form\")) !== null && _ref2 !== void 0 ? _ref2 : document.querySelector(\"form\");\n      data.submiter.addEventListener(\"click\", /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {\n          var isEmpty, innerSubmiter, formData;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault();\n                _context3.next = 3;\n                return _this2.database._isEmpty();\n              case 3:\n                isEmpty = _context3.sent;\n                if (!(true === isEmpty && !form.checkValidity())) {\n                  _context3.next = 6;\n                  break;\n                }\n                return _context3.abrupt(\"return\", form.reportValidity());\n              case 6:\n                innerSubmiter = _this2.escape(data.submiter.innerHTML);\n                if (data.loader) {\n                  if (typeof data.loader === 'string') {\n                    data.submiter.innerHTML = data.loader;\n                  } else {\n                    data.loader();\n                  }\n                }\n                if (!(true === isEmpty && form.checkValidity())) {\n                  _context3.next = 13;\n                  break;\n                }\n                formData = new FormData(form);\n                if (data.preFetchAction) {\n                  data.preFetchAction(formData);\n                }\n                new _fetchRequest[\"default\"]({\n                  uri: _this2.uri,\n                  data: formData,\n                  options: {\n                    method: \"POST\",\n                    responseDataType: \"json\",\n                    requestDataConvert: \"form-data\"\n                  },\n                  callbacks: {\n                    onSuccess: function onSuccess(response) {\n                      data.submiter.innerHTML = innerSubmiter;\n                      if (data.callback) data.callback(response);\n                      if (data.redirectUrl) {\n                        return window.location.href = data.redirectUrl;\n                      }\n                    }\n                  }\n                });\n                return _context3.abrupt(\"return\");\n              case 13:\n                form.setAttribute(\"novalidate\", \"\");\n                _context3.next = 16;\n                return _this2.persist(data.redirectUrl, function (response) {\n                  data.submiter.innerHTML = innerSubmiter;\n                  data.callback(response);\n                });\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        }));\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n    /**\r\n     * Normalizes an array field into a FormData object.\r\n     * This method takes an array of data objects and normalizes it into a FormData object. It handles files within the data objects by transforming them into Blobs using a BlobTransformer. The resulting FormData object is returned.\r\n     * @param datas - The array of data objects to be normalized.\r\n     * @returns The normalized FormData object.\r\n     */\n  }, {\n    key: \"normalizeArrayField\",\n    value: function normalizeArrayField(datas) {\n      var transformer = new _transformer.Transformer.BlobTransformer();\n      var index = 0;\n      return datas.reduce(function (result, data) {\n        var objectsFormData = Object.keys(data).reduce(function (formData, key) {\n          var files = data[key];\n          if (Array.isArray(files) && files.length > 0) {\n            files.forEach(function (file) {\n              formData.append(key, transformer.fromFile(file), file.name);\n            });\n          } else {\n            formData.set(key, data[key]);\n          }\n          return formData;\n        }, new FormData());\n        objectsFormData.forEach(function (value, key) {\n          result.append(key, value);\n        });\n        index++;\n        return result;\n      }, new FormData());\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(str) {\n      if (!str) {\n        return \"\";\n      }\n      var div = document.createElement(\"div\");\n      div.appendChild(document.createTextNode(str));\n      return div.innerHTML;\n    }\n    /**\r\n     * Retourne la réponse du serveur.\r\n     */\n  }, {\n    key: \"response\",\n    get: function get() {\n      return this._response;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/tempdata-backend/src/tempdata-backend.ts?");

/***/ }),

/***/ "./packages/tempdata/src/scripts/helpers.ts":
/*!**************************************************!*\
  !*** ./packages/tempdata/src/scripts/helpers.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.findChar = findChar;\nexports.hasKeyWithNameSubstring = hasKeyWithNameSubstring;\nexports.matchesCriteria = matchesCriteria;\n/**\r\n * Checks if an element matches all specified criteria.\r\n * \r\n * This function iterates over each key in the criteria object and checks if the element has a matching value for each key.\r\n * \r\n * @param element - The element to check, represented as a record of string keys to any values.\r\n * @param criteria - The criteria to match against, represented as a record of string keys to any values.\r\n * @returns A boolean value indicating whether the element matches all the criteria. Returns `true` if all criteria are matched, `false` otherwise.\r\n */\nfunction matchesCriteria(element, criteria) {\n  return Object.keys(criteria).every(function (key) {\n    return element[key] === criteria[key];\n  });\n}\n\n/**\r\n * Searches for a key within an object that includes a specified substring. Optionally, returns the key name instead of its value.\r\n * \r\n * @param object - The object to search through.\r\n * @param substring - The substring to look for within the object's keys.\r\n * @param getValue - Optional. If `true`, returns the key name that includes the substring. If `false` or omitted, returns the value of the first matching key.\r\n * @returns The value of the first key that includes the substring, the name of the first key that includes the substring if `getValue` is `true`, or `false` if no matching key is found.\r\n */\nfunction hasKeyWithNameSubstring(object, substring, getValue) {\n  for (var key in object) {\n    if (key.includes(substring)) {\n      if (undefined === getValue || false === getValue) {\n        return object[key];\n      }\n      if (true === getValue) {\n        return key;\n      }\n    }\n  }\n  return false;\n}\n/**\r\n * Searches for the first occurrence of a character within a string that represents a number up to a specified limit.\r\n * \r\n * This function iterates through numbers from 0 up to the specified limit and checks if the string contains that number as a character.\r\n * \r\n * @param value - The string to search within.\r\n * @param limit - The maximum number to check for within the string.\r\n * @param returnBool - Optional. If `true`, the function returns a boolean indicating whether any character was found. If `false` or omitted, returns the character itself.\r\n * @returns If `returnBool` is `true`, returns `true` if a matching character is found or `false` otherwise. If `returnBool` is `false`, returns the first found character as a string, or `null` if no character is found.\r\n */\nfunction findChar(value, limit) {\n  var returnBool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  for (var i = 0; i <= limit; i++) {\n    var index = value.indexOf(i.toString());\n    if (index !== -1) {\n      return returnBool ? true : i.toString();\n    }\n  }\n  return returnBool ? false : null;\n}\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/tempdata/src/scripts/helpers.ts?");

/***/ }),

/***/ "./packages/tempdata/src/scripts/transformer.ts":
/*!******************************************************!*\
  !*** ./packages/tempdata/src/scripts/transformer.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FormDataTransformer = exports.BlobTransformer = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar BlobTransformer = exports.BlobTransformer = /*#__PURE__*/function () {\n  function BlobTransformer() {\n    _classCallCheck(this, BlobTransformer);\n  }\n  return _createClass(BlobTransformer, [{\n    key: \"fromUint8Array\",\n    value:\n    /**\r\n     * Convertit un tableau Uint8Array en objet Blob.\r\n     * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\n    function fromUint8Array(uint8Array, contentType) {\n      var _contentType;\n      contentType = (_contentType = contentType) !== null && _contentType !== void 0 ? _contentType : \"\";\n      return new Blob([uint8Array], {\n        type: contentType\n      });\n    }\n    /**\r\n     * Crée un Blob à partir d'un objet File.\r\n     * @param file - Le fichier à convertir en Blob.\r\n     * @returns Le Blob résultant.\r\n     */\n  }, {\n    key: \"fromFile\",\n    value: function fromFile(file) {\n      return file.slice(0, file.size, file.type);\n    }\n    /**\r\n     * Crée un Blob à partir d'une chaîne encodée en base64.\r\n     * @param base64String - La chaîne encodée en base64.\r\n     * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n     * @returns Le Blob résultant.\r\n     */\n  }, {\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64String, contentType) {\n      contentType = contentType || \"\";\n      var byteCharacters = window.atob(base64String.split(\",\")[1]);\n      var byteNumbers = new Array(byteCharacters.length);\n      for (var i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n      }\n      var byteArray = new Uint8Array(byteNumbers);\n      return new Blob([byteArray], {\n        type: contentType\n      });\n    }\n  }]);\n}();\nvar FormDataTransformer = exports.FormDataTransformer = /*#__PURE__*/function () {\n  function FormDataTransformer(data) {\n    _classCallCheck(this, FormDataTransformer);\n    this.data = data;\n  }\n  /**\r\n   * Transforme les données en un objet FormData.\r\n   * @returns L'objet FormData résultant.\r\n   */\n  return _createClass(FormDataTransformer, [{\n    key: \"transform\",\n    value: function transform() {\n      var formData = new FormData();\n      if (_typeof(this.data) === \"object\") {\n        var _data = this.data;\n        try {\n          for (var key in this.data) {\n            if (this.data.hasOwnProperty(key)) {\n              formData.append(key, _data[key]);\n            }\n          }\n        } catch (error) {\n          console.error(\"Erreur détectée: \" + error);\n        }\n      }\n      return formData;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/tempdata/src/scripts/transformer.ts?");

/***/ }),

/***/ "./packages/tempdata/src/tempdata.ts":
/*!*******************************************!*\
  !*** ./packages/tempdata/src/tempdata.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar _helpers = __webpack_require__(/*! ./scripts/helpers */ \"./packages/tempdata/src/scripts/helpers.ts\");\nvar _transformer = __webpack_require__(/*! ./scripts/transformer */ \"./packages/tempdata/src/scripts/transformer.ts\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar TempData = exports[\"default\"] = /*#__PURE__*/function () {\n  /**\r\n   * @param dbname - The name of the IndexedDB database to open or create.\r\n   * @param osname - The name of the object (object store) which will contain the elements to be stored\r\n   * @param version - The version of the IndexedDB database (default: 1).\r\n   */\n  function TempData(dbname, osname) {\n    var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    _classCallCheck(this, TempData);\n    this.dbname = dbname;\n    this.osname = osname;\n    this.version = version;\n  }\n  /**\r\n   * Adds a new element or elements to the IDBObjectStore with the provided object or array of objects.\r\n   * @param data - Data (a single object or an array of objects) to add to the IDBObjectStore.\r\n   * @returns A promise that resolves to an object indicating the success of the operation.\r\n   */\n  return _createClass(TempData, [{\n    key: \"add\",\n    value: (function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, osname) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              return _context3.abrupt(\"return\", this._getObjectStore(\"readwrite\", osname).then( /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(objectStore) {\n                  var handleData, results;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        handleData = function handleData(item) {\n                          var request = objectStore.add(item);\n                          return new Promise(function (resolve, reject) {\n                            request.onsuccess = /*#__PURE__*/function () {\n                              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n                                var target, elementId, elementObject;\n                                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                                  while (1) switch (_context.prev = _context.next) {\n                                    case 0:\n                                      target = event.target;\n                                      if (target) {\n                                        elementId = target.result;\n                                        elementObject = item;\n                                        elementObject[\"@id\"] = elementId;\n                                        objectStore.put(elementObject, elementId);\n                                        resolve({\n                                          success: true,\n                                          elementObject: elementObject\n                                        });\n                                      }\n                                    case 2:\n                                    case \"end\":\n                                      return _context.stop();\n                                  }\n                                }, _callee);\n                              }));\n                              return function (_x4) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }();\n                            request.onerror = function (event) {\n                              var target = event.target;\n                              reject(new Error(\"Failed to add file to IndexedDB: \" + target.error.message));\n                            };\n                          });\n                        };\n                        if (!Array.isArray(data)) {\n                          _context2.next = 14;\n                          break;\n                        }\n                        _context2.prev = 2;\n                        _context2.next = 5;\n                        return Promise.all(data.map(function (item) {\n                          return handleData(item);\n                        }));\n                      case 5:\n                        results = _context2.sent;\n                        return _context2.abrupt(\"return\", {\n                          success: true,\n                          elements: results\n                        });\n                      case 9:\n                        _context2.prev = 9;\n                        _context2.t0 = _context2[\"catch\"](2);\n                        return _context2.abrupt(\"return\", {\n                          success: false,\n                          error: _context2.t0.message\n                        });\n                      case 12:\n                        _context2.next = 15;\n                        break;\n                      case 14:\n                        return _context2.abrupt(\"return\", handleData(data));\n                      case 15:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[2, 9]]);\n                }));\n                return function (_x3) {\n                  return _ref.apply(this, arguments);\n                };\n              }()));\n            case 4:\n              _context3.prev = 4;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(\"Error accessing IndexedDB\", _context3.t0);\n              return _context3.abrupt(\"return\", {\n                success: false\n              });\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 4]]);\n      }));\n      function add(_x, _x2) {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n    /**\r\n     * Retrieves the form data at the specified index from the array of object data obtained from `getIndexedData`.\r\n     * @param i - The index of the form data to retrieve.\r\n     * @returns A promise that resolves to the form data at the specified index, or `undefined` if the index is out of range.\r\n     */\n    )\n  }, {\n    key: \"readOne\",\n    value: function readOne(i, type, osname) {\n      var _this = this;\n      try {\n        return new Promise( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(resolve, reject) {\n            var objectStore, request;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return _this._getObjectStore(\"readonly\", osname);\n                case 2:\n                  objectStore = _context5.sent;\n                  request = objectStore.getAll();\n                  request.onsuccess = /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {\n                      var target, results, result, transformer;\n                      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                        while (1) switch (_context4.prev = _context4.next) {\n                          case 0:\n                            target = event.target;\n                            results = target.result;\n                            result = results[i];\n                            if (result) {\n                              transformer = type === \"form-data\" ? new _transformer.FormDataTransformer(result) : result;\n                              resolve(type === \"form-data\" ? transformer.transform() : transformer);\n                            } else {\n                              resolve(undefined);\n                            }\n                          case 4:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }, _callee4);\n                    }));\n                    return function (_x7) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }();\n                  request.onerror = function (event) {\n                    var target = event.target;\n                    reject(new Error(\"Failed to get data from IndexedDB: \" + target.error.message));\n                  };\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }));\n          return function (_x5, _x6) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      } catch (error) {\n        console.error(\"Error accessing IndexedDB\", error);\n        return undefined;\n      }\n    }\n    /**\r\n     * Finds the first record that matches the provided criteria.\r\n     * @param criteria - An object representing the key-value pairs to match against the records.\r\n     * @param type - Optional parameter to specify the return type: \"form-data\" or \"record\".\r\n     * @returns A promise that resolves to the first matching record or `undefined` if no match is found.\r\n     */\n  }, {\n    key: \"readOneBy\",\n    value: (function () {\n      var _readOneBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(criteria, type, osname) {\n        var objectStore, request;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return this._getObjectStore(\"readonly\", osname);\n            case 3:\n              objectStore = _context7.sent;\n              request = objectStore.getAll();\n              return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n                request.onsuccess = /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(event) {\n                    var target, results, matchedResult, transformer;\n                    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                      while (1) switch (_context6.prev = _context6.next) {\n                        case 0:\n                          target = event.target;\n                          results = target.result;\n                          matchedResult = results.find(function (item) {\n                            return Object.keys(criteria).every(function (key) {\n                              return criteria[key] === item[key];\n                            });\n                          });\n                          if (matchedResult) {\n                            transformer = type === \"form-data\" ? new _transformer.FormDataTransformer(matchedResult) : matchedResult;\n                            resolve(type === \"form-data\" ? transformer.transform() : transformer);\n                          } else {\n                            resolve(undefined); // No match found\n                          }\n                        case 4:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }, _callee6);\n                  }));\n                  return function (_x11) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }();\n                request.onerror = function (event) {\n                  var target = event.target;\n                  reject(new Error(\"Failed to get data from IndexedDB: \" + target.error.message));\n                };\n              }));\n            case 8:\n              _context7.prev = 8;\n              _context7.t0 = _context7[\"catch\"](0);\n              console.error(\"Error accessing IndexedDB\", _context7.t0);\n              return _context7.abrupt(\"return\", undefined);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 8]]);\n      }));\n      function readOneBy(_x8, _x9, _x10) {\n        return _readOneBy.apply(this, arguments);\n      }\n      return readOneBy;\n    }()\n    /**\r\n     * Retrieves all elements from the IDBObjectStore and returns them as an array.\r\n     * @returns A promise that resolves to an array containing all the elements from the IDBObjectStore.\r\n     */\n    )\n  }, {\n    key: \"read\",\n    value: function read(osname) {\n      var _this2 = this;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(resolve, reject) {\n          var objectStore, elements, request;\n          return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _this2._getObjectStore(\"readonly\", osname);\n              case 2:\n                objectStore = _context8.sent;\n                elements = [];\n                request = objectStore.openCursor();\n                request.onerror = function (event) {\n                  var target = event.target;\n                  reject(\"Failed to read indexed data: \" + target.error.message);\n                };\n                request.onsuccess = function (event) {\n                  var target = event.target;\n                  var cursor = target.result;\n                  if (cursor) {\n                    elements.push(cursor.value);\n                    cursor[\"continue\"]();\n                  } else {\n                    resolve(elements);\n                  }\n                };\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }, _callee8);\n        }));\n        return function (_x12, _x13) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    }\n    /**\r\n     * Retrieves all elements that match the specified criteria from the IDBObjectStore.\r\n     * @param criteria - An object representing the key-value pairs that the elements must match.\r\n     * @returns A promise that resolves to an array containing all matching elements from the IDBObjectStore.\r\n     */\n  }, {\n    key: \"readBy\",\n    value: function readBy(criteria, osname) {\n      var _this3 = this;\n      return new Promise( /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(resolve, reject) {\n          var objectStore, elements, request;\n          return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return _this3._getObjectStore(\"readonly\", osname);\n              case 2:\n                objectStore = _context9.sent;\n                elements = [];\n                request = objectStore.openCursor();\n                request.onerror = function (event) {\n                  var target = event.target;\n                  reject(new Error(\"Erreur lors de la récupération des éléments: \" + target.error.message));\n                };\n                request.onsuccess = function (event) {\n                  var target = event.target;\n                  var cursor = target.result;\n                  if (cursor) {\n                    if ((0, _helpers.matchesCriteria)(cursor.value, criteria)) {\n                      elements.push(cursor.value);\n                    }\n                    cursor[\"continue\"]();\n                  } else {\n                    resolve(elements);\n                  }\n                };\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }, _callee9);\n        }));\n        return function (_x14, _x15) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    }\n\n    /**\r\n     * Updates an element in the database.\r\n     * @param id - The numeric ID of the element to be updated.\r\n     * @param data - The new data to be merged with the existing data.\r\n     * @returns A promise that resolves to a boolean indicating whether the update was successful (true) or the ID was not found (false).\r\n     */\n  }, {\n    key: \"update\",\n    value: (function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(id, data, osname) {\n        var objectStore, request;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return this._getObjectStore(\"readwrite\", osname);\n            case 3:\n              objectStore = _context11.sent;\n              request = objectStore.get(id);\n              return _context11.abrupt(\"return\", new Promise(function (resolve, reject) {\n                request.onsuccess = /*#__PURE__*/function () {\n                  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(event) {\n                    var target, existingData, updatedData, updateRequest;\n                    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                      while (1) switch (_context10.prev = _context10.next) {\n                        case 0:\n                          target = event.target;\n                          existingData = target.result;\n                          if (existingData) {\n                            updatedData = _objectSpread(_objectSpread({}, existingData), data);\n                            updateRequest = objectStore.put(updatedData, id);\n                            updateRequest.onsuccess = function () {\n                              resolve(true);\n                            };\n                            updateRequest.onerror = function (error) {\n                              var _error$target;\n                              reject(new Error(\"Failed to update data in IndexedDB: \" + ((_error$target = error.target) === null || _error$target === void 0 ? void 0 : _error$target.error)));\n                            };\n                          } else {\n                            resolve(false);\n                          }\n                        case 3:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }, _callee10);\n                  }));\n                  return function (_x19) {\n                    return _ref8.apply(this, arguments);\n                  };\n                }();\n                request.onerror = function (event) {\n                  var target = event.target;\n                  reject(new Error(\"Failed to get data from IndexedDB: \" + target.error.message));\n                };\n              }));\n            case 8:\n              _context11.prev = 8;\n              _context11.t0 = _context11[\"catch\"](0);\n              console.error(\"Error accessing IndexedDB\", _context11.t0);\n              return _context11.abrupt(\"return\", false);\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 8]]);\n      }));\n      function update(_x16, _x17, _x18) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n    /**\r\n     * Deletes the object from the IDBObjectStore.\r\n     * @param id - The ID of the object to delete.\r\n     */\n    )\n  }, {\n    key: \"deleteOne\",\n    value: (function () {\n      var _deleteOne = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(id, refactoringShortKeyString, osname) {\n        var _this4 = this;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(resolve, reject) {\n                  var objectStore, request;\n                  return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                    while (1) switch (_context13.prev = _context13.next) {\n                      case 0:\n                        _context13.prev = 0;\n                        _context13.next = 3;\n                        return _this4._getObjectStore(\"readwrite\", osname);\n                      case 3:\n                        objectStore = _context13.sent;\n                        request = objectStore[\"delete\"](id);\n                        request.onsuccess = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n                          return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                            while (1) switch (_context12.prev = _context12.next) {\n                              case 0:\n                                if (!refactoringShortKeyString) {\n                                  _context12.next = 3;\n                                  break;\n                                }\n                                _context12.next = 3;\n                                return _this4.refactorIndexes(refactoringShortKeyString, osname);\n                              case 3:\n                                resolve(true);\n                              case 4:\n                              case \"end\":\n                                return _context12.stop();\n                            }\n                          }, _callee12);\n                        }));\n                        request.onerror = function (event) {\n                          console.error(\"Error removing file with id:\".concat(id), event);\n                          reject(false);\n                        };\n                        _context13.next = 13;\n                        break;\n                      case 9:\n                        _context13.prev = 9;\n                        _context13.t0 = _context13[\"catch\"](0);\n                        console.error(\"Error removing file with id:\".concat(id, \": \").concat(_context13.t0));\n                        reject(false);\n                      case 13:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }, _callee13, null, [[0, 9]]);\n                }));\n                return function (_x23, _x24) {\n                  return _ref9.apply(this, arguments);\n                };\n              }()));\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }));\n      function deleteOne(_x20, _x21, _x22) {\n        return _deleteOne.apply(this, arguments);\n      }\n      return deleteOne;\n    }()\n    /**\r\n     * Deletes the specified object store from the IndexedDB database.\r\n     * @returns A promise that resolves if the object store is successfully deleted, or rejects with an error if any error occurs during the operation.\r\n     */\n    )\n  }, {\n    key: \"deleteOS\",\n    value: function deleteOS(osname) {\n      var _this5 = this;\n      return new Promise(function (resolve, reject) {\n        var request = window.indexedDB.open(_this5.dbname, _this5.version);\n        request.onerror = function () {\n          console.error(\"Failed to open database.\");\n          resolve(false);\n        };\n        request.onupgradeneeded = function (event) {\n          var target = event.target;\n          var db = target.result;\n          if (db.objectStoreNames.contains(osname !== null && osname !== void 0 ? osname : _this5.osname)) {\n            try {\n              db.deleteObjectStore(osname !== null && osname !== void 0 ? osname : _this5.osname);\n            } catch (error) {\n              console.error(\"Failed to delete ObjectStore \".concat(osname !== null && osname !== void 0 ? osname : _this5.osname, \": \").concat(error));\n              resolve(false);\n            }\n          } else {\n            console.error(\"ObjectStore \".concat(osname !== null && osname !== void 0 ? osname : _this5.osname, \" does not exist.\"));\n            resolve(true);\n          }\n        };\n        request.onsuccess = function () {\n          resolve(true);\n        };\n      });\n    }\n    /**\r\n     * Clears the entire IndexedDB database by deleting the database.\r\n     */\n  }, {\n    key: \"deleteAll\",\n    value: (function () {\n      var _deleteAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(osname) {\n        var _this6 = this;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.prev = 0;\n              _context15.next = 3;\n              return this.openDB();\n            case 3:\n              return _context15.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var request = indexedDB.deleteDatabase(osname !== null && osname !== void 0 ? osname : _this6.dbname);\n                request.onsuccess = function () {\n                  return resolve(true);\n                };\n                request.onerror = function () {\n                  return resolve(false);\n                };\n              }));\n            case 6:\n              _context15.prev = 6;\n              _context15.t0 = _context15[\"catch\"](0);\n              console.error(\"Error deleting database \".concat(osname !== null && osname !== void 0 ? osname : this.dbname, \": \").concat(_context15.t0));\n              return _context15.abrupt(\"return\", false);\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this, [[0, 6]]);\n      }));\n      function deleteAll(_x25) {\n        return _deleteAll.apply(this, arguments);\n      }\n      return deleteAll;\n    }()\n    /**\r\n     * Opens or creates a new IndexedDB database with the specified name and version.\r\n     * @returns A promise that resolves to the opened or created IDBDatabase object.\r\n     */\n    )\n  }, {\n    key: \"openDB\",\n    value: function openDB(osname) {\n      var _this7 = this;\n      return new Promise(function (resolve, reject) {\n        var request = window.indexedDB.open(_this7.dbname, _this7.version);\n        request.onerror = function (event) {\n          var target = event.target;\n          console.error(\"Failed to open database\", target === null || target === void 0 ? void 0 : target.error);\n          reject(target === null || target === void 0 ? void 0 : target.error);\n        };\n        request.onsuccess = function (event) {\n          var target = event.target;\n          var db = target === null || target === void 0 ? void 0 : target.result;\n          resolve(db);\n        };\n        request.onupgradeneeded = function (event) {\n          var target = event.target;\n          var db = target === null || target === void 0 ? void 0 : target.result;\n          db.createObjectStore(osname !== null && osname !== void 0 ? osname : _this7.osname, {\n            autoIncrement: true\n          });\n        };\n      });\n    }\n    /**\r\n     * Checks if database is empty.\r\n     * @returns A promise that resolves to `true` if database is empty, and `false` otherwise.\r\n     */\n  }, {\n    key: \"_isEmpty\",\n    value: (function () {\n      var _isEmpty2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(osname) {\n        var objectStore, countRequest;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this._getObjectStore(\"readonly\", osname);\n            case 2:\n              objectStore = _context16.sent;\n              countRequest = objectStore.count();\n              return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                countRequest.onsuccess = function () {\n                  resolve(countRequest.result === 0);\n                };\n                countRequest.onerror = function () {\n                  reject(new Error(\"Failed to count items in IndexedDB\"));\n                };\n              }));\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function _isEmpty(_x26) {\n        return _isEmpty2.apply(this, arguments);\n      }\n      return _isEmpty;\n    }()\n    /**\r\n     * Retrieves the length of the object store.\r\n     * @returns A promise that resolves with the length of the object store.\r\n     */\n    )\n  }, {\n    key: \"_length\",\n    value: (function () {\n      var _length2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(osname) {\n        var objectStore, countRequest;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this._getObjectStore(\"readonly\", osname);\n            case 2:\n              objectStore = _context17.sent;\n              countRequest = objectStore.count();\n              return _context17.abrupt(\"return\", new Promise(function (resolve, reject) {\n                countRequest.onsuccess = function (e) {\n                  resolve(countRequest.result);\n                };\n                countRequest.onerror = function (err) {\n                  reject(console.error(\"Error\", err));\n                };\n              }));\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function _length(_x27) {\n        return _length2.apply(this, arguments);\n      }\n      return _length;\n    }()\n    /**\r\n     * Retrieves the IDBObjectStore with the specified access mode from the opened database.\r\n     * @param access - The access mode for the transaction.\r\n     * @returns A promise that resolves to the IDBObjectStore with the specified access mode.\r\n     */\n    )\n  }, {\n    key: \"_getObjectStore\",\n    value: (function () {\n      var _getObjectStore2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(access, osname) {\n        var db, transaction;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.openDB(osname);\n            case 2:\n              db = _context18.sent;\n              transaction = db.transaction([osname !== null && osname !== void 0 ? osname : this.osname], access);\n              return _context18.abrupt(\"return\", transaction.objectStore(osname !== null && osname !== void 0 ? osname : this.osname));\n            case 5:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function _getObjectStore(_x28, _x29) {\n        return _getObjectStore2.apply(this, arguments);\n      }\n      return _getObjectStore;\n    }()\n    /**\r\n     * Refactors the indexes of the indexed data.\r\n     * @param refactoringShortKeyString - The string to be used for refactoring the indexes.\r\n     */\n    )\n  }, {\n    key: \"refactorIndexes\",\n    value: (function () {\n      var _refactorIndexes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(refactoringShortKeyString, osname) {\n        var _this8 = this;\n        var objectData, isEmpty, updatedObjectArray;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.read();\n            case 2:\n              objectData = _context20.sent;\n              _context20.next = 5;\n              return this._isEmpty();\n            case 5:\n              isEmpty = _context20.sent;\n              updatedObjectArray = [];\n              if (!isEmpty) {\n                _context20.next = 9;\n                break;\n              }\n              return _context20.abrupt(\"return\", null);\n            case 9:\n              objectData.forEach( /*#__PURE__*/function () {\n                var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(object, i) {\n                  var updatedObject;\n                  return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n                    while (1) switch (_context19.prev = _context19.next) {\n                      case 0:\n                        updatedObject = _this8.processObject(object, i, objectData.length, refactoringShortKeyString);\n                        updatedObjectArray.push(updatedObject);\n                      case 2:\n                      case \"end\":\n                        return _context19.stop();\n                    }\n                  }, _callee19);\n                }));\n                return function (_x32, _x33) {\n                  return _ref11.apply(this, arguments);\n                };\n              }());\n              this.refactor(updatedObjectArray, osname);\n            case 11:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function refactorIndexes(_x30, _x31) {\n        return _refactorIndexes.apply(this, arguments);\n      }\n      return refactorIndexes;\n    }()\n    /**\r\n     * Replaces the indexed data in the object store.\r\n     * This method opens the indexedDB, clears the existing data in the object store, and adds the new data from the provided array.\r\n     * @param object - The array of data to replace the indexed data with.\r\n     */\n    )\n  }, {\n    key: \"refactor\",\n    value: function refactor(object, osname) {\n      var _this9 = this;\n      var openDBRequest = indexedDB.open(this.dbname, this.version);\n      openDBRequest.onsuccess = function (event) {\n        var target = event.target;\n        var result = target.result;\n        var transaction = result.transaction([osname !== null && osname !== void 0 ? osname : _this9.osname], \"readwrite\");\n        var objetsStore = transaction.objectStore(osname !== null && osname !== void 0 ? osname : _this9.osname);\n        var clear = objetsStore.clear();\n        clear.onsuccess = function () {\n          object.forEach(function (data) {\n            var addRequest = objetsStore.add(data);\n            addRequest.onsuccess = function (event) {\n              var target = event.target;\n              if (target) {\n                var elementId = target.result;\n                var elementObject = data;\n                elementObject[\"@id\"] = elementId;\n                objetsStore.put(elementObject, elementId);\n              }\n            };\n          });\n        };\n        clear.onerror = function (event) {\n          var target = event.target;\n          console.error(\"Error deleting existing data :\", target.error.message);\n        };\n      };\n      openDBRequest.onerror = function (event) {\n        var target = event.target;\n        console.error(\"Error opening database :\", target.error.message);\n      };\n    }\n    /**\r\n     * Processes an object to update its keys.\r\n     * @param object - The object to be processed.\r\n     * @param i - The index value used for updating the keys.\r\n     * @param length - The length of the object.\r\n     * @param refactoringShortKeyString - The string used for splitting the keys.\r\n     * @returns The processed object with updated keys.\r\n     */\n  }, {\n    key: \"processObject\",\n    value: function processObject(object, i, length, refactoringShortKeyString) {\n      var newObject = {};\n      var base64String, id, _token, tokenKey;\n      for (var key in object) {\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\n          var keyParts = refactoringShortKeyString ? key.split(refactoringShortKeyString) : null;\n          var keyPart = keyParts ? keyParts[1] : null;\n          _token = (0, _helpers.hasKeyWithNameSubstring)(object, \"token\");\n          if (null !== _token) {\n            tokenKey = (0, _helpers.hasKeyWithNameSubstring)(object, \"token\", true);\n          }\n          if (\"@base64String\" === key) {\n            base64String = object[key];\n          }\n          if (\"@id\" === key) {\n            id = parseInt(object[key]);\n          }\n          if (keyPart) {\n            var findchar = (0, _helpers.findChar)(keyPart, length);\n            var _char = findchar !== null && findchar !== void 0 ? findchar : \"0\";\n            var newKeyPart = keyPart.replace(\"[\".concat(_char, \"]\"), \"[\".concat(i.toString(), \"]\"));\n            var newKey = \"\".concat(keyParts[0]).concat(refactoringShortKeyString).concat(newKeyPart);\n            newObject[newKey] = object[key];\n          }\n        }\n      }\n      if (base64String) newObject[\"@base64String\"] = base64String;\n      newObject[\"@id\"] = id;\n      if (_token) newObject[\"\".concat(tokenKey)] = _token;\n      return newObject;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/tempdata/src/tempdata.ts?");

/***/ }),

/***/ "./packages/transformer/src/transformer.ts":
/*!*************************************************!*\
  !*** ./packages/transformer/src/transformer.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Transformer = void 0;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction getMimeType(base64String) {\n  var get = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"both\";\n  var extension = base64String.split(\",\")[0].split(\":\")[1].split(\";\")[0].split(\"/\")[1];\n  var fileType = base64String.split(\",\")[0].split(\":\")[1].split(\";\")[0].split(\"/\")[0];\n  if (\"type\" === get) {\n    return fileType;\n  }\n  if (\"extension\" === get) {\n    return extension;\n  }\n  return fileType + \"/\" + extension;\n}\nvar Transformer;\n(function (_Transformer) {\n  var Base64Transformer = /*#__PURE__*/function () {\n    function Base64Transformer() {\n      _classCallCheck(this, Base64Transformer);\n      _defineProperty(this, \"base64String\", \"\");\n    }\n    return _createClass(Base64Transformer, [{\n      key: \"toFile\",\n      value:\n      /**\r\n       * Convertit une chaîne base64 en objet File.\r\n       * @param base64String - La chaîne encodée en base64.\r\n       * @param fileName - (Optionnel) Le nom du fichier.\r\n       * @returns Le fichier résultant.\r\n       */\n      function toFile(base64String, fileName) {\n        this.base64String = base64String;\n        var byteCharacters = window.atob(base64String.split(\",\")[1]);\n        var byteArrays = [];\n        var _fileName = \"\";\n        for (var offset = 0; offset < byteCharacters.length; offset += 512) {\n          var slice = byteCharacters.slice(offset, offset + 512);\n          var byteNumbers = new Array(slice.length);\n          for (var i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n          }\n          var byteArray = new Uint8Array(byteNumbers);\n          byteArrays.push(byteArray);\n        }\n        var extension = getMimeType(base64String, \"extension\");\n        var fileType = getMimeType(base64String, \"type\");\n        if (fileName) {\n          _fileName = fileName;\n        } else {\n          _fileName = \"tranformed_file.\".concat(extension);\n        }\n        return new File(byteArrays, _fileName, {\n          type: \"\".concat(fileType, \"/\").concat(extension)\n        });\n      }\n      /**\r\n       * Convertit un objet File en chaîne base64.\r\n       * @param file - Le fichier à convertir en base64.\r\n       * @returns La chaîne base64 résultante (sous forme de promesse).\r\n       */\n    }, {\n      key: \"fromFile\",\n      value: function fromFile(file) {\n        return new Promise(function (resolve, reject) {\n          var reader = new FileReader();\n          reader.onloadend = function () {\n            resolve(reader.result);\n          };\n          reader.onerror = function (error) {\n            reject(error);\n          };\n          reader.readAsDataURL(file);\n        });\n      }\n      /**\r\n       * Convertit une chaîne base64 en tableau Uint8Array.\r\n       * @param base64String - La chaîne encodée en base64.\r\n       * @returns Le tableau Uint8Array résultant.\r\n       */\n    }, {\n      key: \"toUint8Array\",\n      value: function toUint8Array(base64String) {\n        var binaryString = window.atob(base64String.split(\",\")[1]);\n        var length = binaryString.length;\n        var bytes = new Uint8Array(length);\n        for (var i = 0; i < length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes;\n      }\n      /**\r\n       * Convertit un tableau Uint8Array en chaîne base64.\r\n       * @param uint8Array - Le tableau Uint8Array à convertir en base64.\r\n       * @returns La chaîne base64 résultante.\r\n       */\n    }, {\n      key: \"fromUint8Array\",\n      value: function fromUint8Array(uint8Array) {\n        var binaryString = \"\";\n        for (var i = 0; i < uint8Array.length; i++) {\n          binaryString += String.fromCharCode(uint8Array[i]);\n        }\n        return window.btoa(binaryString);\n      }\n      /**\r\n       * Convertit un objet Blob en chaîne base64 ou ArrayBuffer.\r\n       * @param blob - Le Blob à convertir.\r\n       * @returns La chaîne base64 ou ArrayBuffer résultante (sous forme de promesse).\r\n       */\n    }, {\n      key: \"fromBlob\",\n      value: (function () {\n        var _fromBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  var reader = new FileReader();\n                  reader.onloadend = function () {\n                    var result = reader.result;\n                    var base64String = result || \"\";\n                    resolve(base64String);\n                  };\n                  reader.readAsDataURL(blob);\n                }));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        function fromBlob(_x) {\n          return _fromBlob.apply(this, arguments);\n        }\n        return fromBlob;\n      }())\n    }]);\n  }();\n  _Transformer.Base64Transformer = Base64Transformer;\n  var BlobTransformer = /*#__PURE__*/function () {\n    function BlobTransformer() {\n      _classCallCheck(this, BlobTransformer);\n    }\n    return _createClass(BlobTransformer, [{\n      key: \"fromUint8Array\",\n      value:\n      /**\r\n       * Convertit un tableau Uint8Array en objet Blob.\r\n       * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n       * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n       * @returns Le Blob résultant.\r\n       */\n      function fromUint8Array(uint8Array, contentType) {\n        var _contentType;\n        contentType = (_contentType = contentType) !== null && _contentType !== void 0 ? _contentType : \"\";\n        return new Blob([uint8Array], {\n          type: contentType\n        });\n      }\n      /**\r\n       * Crée un Blob à partir d'un objet File.\r\n       * @param file - Le fichier à convertir en Blob.\r\n       * @returns Le Blob résultant.\r\n       */\n    }, {\n      key: \"fromFile\",\n      value: function fromFile(file) {\n        return file.slice(0, file.size, file.type);\n      }\n      /**\r\n       * Crée un Blob à partir d'une chaîne encodée en base64.\r\n       * @param base64String - La chaîne encodée en base64.\r\n       * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n       * @returns Le Blob résultant.\r\n       */\n    }, {\n      key: \"fromBase64String\",\n      value: function fromBase64String(base64String, contentType) {\n        contentType = contentType || \"\";\n        var byteCharacters = window.atob(base64String.split(\",\")[1]);\n        var byteNumbers = new Array(byteCharacters.length);\n        for (var i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        var byteArray = new Uint8Array(byteNumbers);\n        return new Blob([byteArray], {\n          type: contentType\n        });\n      }\n    }]);\n  }();\n  _Transformer.BlobTransformer = BlobTransformer;\n  var FileTransformer = /*#__PURE__*/function () {\n    function FileTransformer() {\n      _classCallCheck(this, FileTransformer);\n    }\n    return _createClass(FileTransformer, [{\n      key: \"toBase64\",\n      value:\n      /**\r\n       * Convertit un fichier en chaîne base64.\r\n       * @param file - Le fichier à convertir en base64.\r\n       * @returns La chaîne base64 résultante (sous forme de promesse).\r\n       */\n      function toBase64(file) {\n        return new Promise(function (resolve, reject) {\n          var reader = new FileReader();\n          reader.onloadend = function () {\n            resolve(reader.result);\n          };\n          reader.onerror = function (error) {\n            reject(error);\n          };\n          reader.readAsDataURL(file);\n        });\n      }\n      /**\r\n       * Convertit une chaîne base64 en objet File.\r\n       * @param base64String - La chaîne encodée en base64.\r\n       * @param contentType - (Optionnel) Le type de contenu du fichier.\r\n       * @param fileName - (Optionnel) Le nom du fichier.\r\n       * @param formatString - (Optionnel) Indique si la chaîne base64 est formatée.\r\n       * @returns Le fichier résultant.\r\n       */\n    }, {\n      key: \"fromBase64String\",\n      value: function fromBase64String(base64String, contentType, fileName) {\n        var formatString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        contentType = contentType || \"\";\n        var fileInfo = formatString ? base64String.split(\",\")[1] : base64String;\n        var byteCharacters = window.atob(fileInfo);\n        var byteNumbers = new Array(byteCharacters.length);\n        for (var i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        var byteArray = new Uint8Array(byteNumbers);\n        var blob = new Blob([byteArray], {\n          type: contentType\n        });\n        fileName = fileName || \"image\";\n        return new File([blob], fileName, {\n          type: contentType\n        });\n      }\n      /**\r\n       * Convertit un tableau Uint8Array en objet File.\r\n       * @param uint8Array - Le tableau Uint8Array.\r\n       * @param mimeType - Le type MIME du fichier.\r\n       * @param fileName - Le nom du fichier.\r\n       * @returns Le fichier résultant.\r\n       */\n    }, {\n      key: \"fromUint8Array\",\n      value: function fromUint8Array(uint8Array, mimeType, fileName) {\n        return new File(uint8Array, fileName, {\n          type: mimeType\n        });\n      }\n    }]);\n  }();\n  _Transformer.FileTransformer = FileTransformer;\n  var FormDataTransformer = /*#__PURE__*/function () {\n    function FormDataTransformer(data) {\n      _classCallCheck(this, FormDataTransformer);\n      this._data = data;\n    }\n    /**\r\n     * Transforme les données en un objet FormData.\r\n     * @returns L'objet FormData résultant.\r\n     */\n    return _createClass(FormDataTransformer, [{\n      key: \"transform\",\n      value: function transform() {\n        var formData = new FormData();\n        if (_typeof(this._data) === \"object\") {\n          var data = this._data;\n          try {\n            for (var key in this._data) {\n              if (this._data.hasOwnProperty(key)) {\n                formData.append(key, data[key]);\n              }\n            }\n          } catch (error) {\n            console.error(\"Erreur détectée: \" + error);\n          }\n        }\n        return formData;\n      }\n      /**\r\n       * Revertit un objet FormData en objet JavaScript.\r\n       * @returns L'objet JavaScript résultant.\r\n       */\n    }, {\n      key: \"reverse\",\n      value: function reverse() {\n        var elementObject = {};\n        if (this._data instanceof FormData) {\n          try {\n            var tempObject = {};\n            this._data.forEach(function (value, key) {\n              tempObject[key] = value;\n            });\n            elementObject = _objectSpread({}, tempObject);\n          } catch (error) {\n            console.error(\"Erreur détectée: \" + error);\n          }\n        }\n        return elementObject;\n      }\n      /**\r\n       * Option de transformation spécifique.\r\n       * @param option - L'option de transformation ('onlyobject', 'onlyformdata', 'auto').\r\n       * @returns L'objet ou le FormData résultant en fonction de l'option spécifiée.\r\n       */\n    }, {\n      key: \"option\",\n      value: function option(_option) {\n        if (_option === \"onlyobject\") {\n          if (this._data instanceof FormData) {\n            return this.reverse();\n          }\n          return this._data;\n        }\n        if (_option === \"onlyformdata\") {\n          if (this._data instanceof FormData) {\n            return this._data;\n          }\n          return this.transform();\n        }\n        if (_option === \"auto\") {\n          return this.auto();\n        }\n      }\n    }, {\n      key: \"auto\",\n      value: function auto() {\n        if (this._data instanceof FormData) {\n          return this.reverse();\n        } else {\n          return this.transform();\n        }\n      }\n    }]);\n  }();\n  _Transformer.FormDataTransformer = FormDataTransformer;\n})(Transformer || (exports.Transformer = Transformer = {}));\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/transformer/src/transformer.ts?");

/***/ }),

/***/ "./packages/utils/src/utils.ts":
/*!*************************************!*\
  !*** ./packages/utils/src/utils.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Utils = exports[\"default\"] = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n  return _createClass(Utils, null, [{\n    key: \"setAudio\",\n    value:\n    /**\r\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\r\n     * @param audioPath Le chemin de la source audio.\r\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\r\n     * @returns L'élément audio créé.\r\n     */\n    function setAudio(audioPath) {\n      var classname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var audio = document.createElement(\"audio\");\n      if (classname != null) {\n        audio.classList.add(classname);\n      }\n      var source = document.createElement(\"source\");\n      source.src = audioPath;\n      source.type = \"audio/mpeg\";\n      audio.appendChild(source);\n      return audio;\n    }\n    /**\r\n     * Converts an HTML string into an HTML element or a collection of HTML elements.\r\n     *\r\n     * @param textHtml - The HTML string to convert.\r\n     * @param targetName - The tag name of the target HTML element to create.\r\n     * @param children - A boolean indicating whether to return all children of the target element.\r\n     * @returns - Returns the first child of the target element if `children` is `false`, otherwise returns a collection of the element's children. Returns `null` if there are no children.\r\n     *\r\n     * This method creates a new HTML element of the type specified by `targetName`, sets its inner HTML to `textHtml`, and returns either the first child of this element or all its children as an HTMLCollection, depending on the value of `children`.\r\n     * If the HTML content generates no children, the method returns `null`.\r\n     */\n  }, {\n    key: \"textToHTMLElement\",\n    value: function textToHTMLElement(textHtml) {\n      var targetName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var target = document.createElement(\"\".concat(targetName));\n      target.innerHTML = textHtml;\n      if (true === children) {\n        return target.children;\n      }\n      return target.firstElementChild;\n    }\n    /**\r\n     * retourne un élément du dom\r\n     */\n  }, {\n    key: \"$$\",\n    value: function $$(element) {\n      if (typeof element !== \"string\") {\n        return element;\n      } else if (typeof element === \"string\") {\n        var collection = document.querySelectorAll(\"\".concat(element));\n        var el = document.querySelector(\"\".concat(element));\n        if (collection !== null && collection.length > 1) {\n          return collection;\n        }\n        if (el !== null) {\n          return el;\n        }\n      }\n    }\n    /**\r\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\r\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\r\n     * @param nodeList Un objet NodeList ou un élément HTML.\r\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\r\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\r\n     * @returns\r\n     */\n  }, {\n    key: \"processNodes\",\n    value: function processNodes(nodeList) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (node, index) {};\n      var once = arguments.length > 2 ? arguments[2] : undefined;\n      if (nodeList instanceof NodeList || Array.isArray(nodeList)) {\n        return Array.from(nodeList).forEach(function (node, i) {\n          if (once && i === 0) {\n            callback(node, 0);\n          }\n          if (!once) {\n            callback(node, i);\n          }\n        });\n      }\n      if (null !== nodeList && undefined !== nodeList) {\n        return callback(nodeList);\n      }\n    }\n    /**\r\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\r\n     * @param type Le type d'expression régulière demandé.\r\n     * @returns L'expression régulière correspondante.\r\n     */\n  }, {\n    key: \"getRegexp\",\n    value: function getRegexp(type) {\n      switch (type) {\n        case \"email\":\n          return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\n        case \"phone-number\":\n          return new RegExp(/^(0|\\+[1-9][0-9]{0,2}) ?[0-9]+$/);\n        case \"number\":\n          return new RegExp(/^[-+]?[0-9]*\\.?[0-9]+$/);\n        case \"strong-password\":\n          return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\n        case \"url-protocol\":\n          return new RegExp(/^(https?:\\/\\/)$/, \"i\");\n        case \"url-domain\":\n          return new RegExp(/^((([a-zA-Z0-9]{1,})[.-]?)+[a-zA-Z]{2,})$/, \"i\");\n        case \"url-ip\":\n          return new RegExp(/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, \"i\");\n        case \"url-port\":\n          return new RegExp(/^:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3})$/, \"i\");\n        case \"url-path\":\n          return new RegExp(/^(\\.\\/)?[-a-zA-Z\\d%_.~+\\/]*$/, \"i\");\n        case \"url-query\":\n          return new RegExp(/^(\\?[;&a-zA-Z\\d%_.~+=-]*)$/, \"i\");\n        case \"url-fragment\":\n          return new RegExp(/^#[-a-zA-Z\\d%_.~+/=?&;:!*'()]*$/, \"i\");\n        case \"default-text\":\n          return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\n        case \"fr-text\":\n          return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\n        case \"en-text\":\n          return new RegExp(/^[a-zA-Z '-]{1,40}$/);\n        case \"tr-text\":\n          return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\n        default:\n          throw new Error(\"Type d'expression régulière non pris en charge.\");\n      }\n    }\n    /**\r\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement.\r\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\r\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\r\n     * @returns Un élément HTML représentant une zone interdite.\r\n     */\n  }, {\n    key: \"forbiddener\",\n    value: function forbiddener() {\n      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"td\";\n      var backgroundColor = arguments.length > 1 ? arguments[1] : undefined;\n      var forbiddenTag = document.createElement(tag);\n      forbiddenTag.setAttribute(\"class\", \"forbidden\");\n      var style = {\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        opacity: \".7\",\n        zIndex: \"10\",\n        backgroundColor: backgroundColor ? backgroundColor : \"#FFFFFF\"\n      };\n      Object.assign(forbiddenTag.style, style);\n      return forbiddenTag;\n    }\n    /**\r\n     * Réduit une chaîne de texte.\r\n     * @param text La chaîne de texte à réduire.\r\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\r\n     * @returns La chaîne de texte réduite.\r\n     */\n  }, {\n    key: \"truncateChars\",\n    value: function truncateChars(text) {\n      var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 14;\n      text = typeof text === \"string\" ? text.trim() : \"\";\n      if (text.length > maxLength) {\n        return \"\".concat(text.substring(0, maxLength), \"...\");\n      }\n      return text;\n    }\n    /**\r\n     * Changes the input text type to a number type and performs additional processing\r\n     * based on the specified parameters.\r\n     *\r\n     * @param attr - The CSS selector for the input elements to be processed.\r\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\r\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\r\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\r\n     */\n  }, {\n    key: \"changeInputTextTypeToNumberType\",\n    value: function changeInputTextTypeToNumberType(attr, limit) {\n      var priceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var decimal = arguments.length > 3 ? arguments[3] : undefined;\n      this.processNodes(this.$$(attr), function (element) {\n        var input = element;\n        if (input) {\n          input.addEventListener(\"input\", function () {\n            var regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\n            if (decimal) {\n              var getValue = input.value.replace(regExp, \"\");\n              input.value = \"\".concat(parseFloat(getValue).toFixed(decimal));\n            } else {\n              input.value = input.value.replace(regExp, \"\");\n            }\n            if (limit && parseInt(input.value) > limit) {\n              input.value = \"\".concat(limit);\n            }\n          });\n        }\n      });\n    }\n    /**\r\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\r\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\r\n     * and the background color for the forbidden tag.\r\n     *\r\n     * @param tag - The tag of the element to be disabled (default: \"td\").\r\n     * @param target - The target element to be disabled (default: undefined).\r\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\r\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\r\n     */\n  }, {\n    key: \"disablor\",\n    value: function disablor() {\n      var _this = this;\n      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"td\";\n      var target = arguments.length > 1 ? arguments[1] : undefined;\n      var trigger = arguments.length > 2 ? arguments[2] : undefined;\n      var backgroundColor = arguments.length > 3 ? arguments[3] : undefined;\n      var buttons = document.querySelectorAll(\"[disablor],[self-disablor]\");\n      try {\n        if (!trigger && !buttons) {\n          throw new Error(\"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\");\n        }\n        this.processNodes(buttons, function (button) {\n          button.addEventListener(\"click\", function () {\n            var self = button.hasAttribute(\"self-disablor\");\n            var item = self ? button : button.closest(\"[disablor]\");\n            if (!target && !item) {\n              throw new Error(\"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\");\n            }\n            if (item) {\n              item.style.position = \"relative\";\n              item.insertBefore(_this.forbiddener(tag, backgroundColor), item.firstChild);\n              if (item instanceof HTMLButtonElement) {\n                item.setAttribute(\"disabled\", \"true\");\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.error(\"Une erreur s'est produit: \", error);\n      }\n    }\n    /**\r\n     * Adds an asterisk indicator to labels associated with required form fields.\r\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\r\n     * of the 'required-field' attribute. The function utilizes the processNodes method\r\n     * to iterate through the matched labels and append the asterisk.\r\n     */\n  }, {\n    key: \"setAsteriskToRequiredField\",\n    value: function setAsteriskToRequiredField() {\n      var styleId = 'custom-asterisk-style';\n      if (!document.getElementById(styleId)) {\n        var style = document.createElement('style');\n        style.id = styleId;\n        document.head.appendChild(style);\n        style.sheet.insertRule(\"\\n          label[required-field]::after {\\n            content: '*';\\n            color: #f89a9b;\\n            width: 10px;\\n            height: 10px;\\n          }\\n        \", 0);\n      }\n    }\n\n    /**\r\n     * This method checks if the object contains a key with the given substring.\r\n     * @param object The object to be searched.\r\n     * @param substring The substring to search for.\r\n     * @param getKey An optional parameter to determine the type of return value.\r\n     *               If true, the method will return the key as a string.\r\n     *               If false or not provided, the method will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\n  }, {\n    key: \"hasKeyWithNameSubstring\",\n    value: function hasKeyWithNameSubstring(object, substring, getKey) {\n      for (var key in object) {\n        if (key.includes(substring)) {\n          if (undefined === getKey || false === getKey) {\n            return object[key];\n          }\n          if (true === getKey) {\n            return key;\n          }\n        }\n      }\n      return false;\n    }\n    /**\r\n     * This method searches for an object's property by its key or short key.\r\n     * @param object The object to be searched.\r\n     * @param keyOrShortKey The key or short key to search for.\r\n     * @param key An optional parameter to determine the type of return value.\r\n     *            If true, the function will return the key as a string.\r\n     *            If false or not provided, the function will return the value corresponding to the key.\r\n     * @returns The value or key of the first matching property if found, otherwise false.\r\n     */\n  }, {\n    key: \"findObjectDataByKeyName\",\n    value: function findObjectDataByKeyName(object, keyOrShorKey, key) {\n      Object.keys(object).forEach(function (key) {\n        if (key.includes(keyOrShorKey)) {\n          return object[key];\n        }\n      });\n      return false;\n    }\n    /**\r\n    * Finds the first occurrence of a character in the given string up to the specified limit.\r\n    * \r\n    * @param string - The string to search.\r\n    * @param limit - The limit up to which to search for the character.\r\n    * @param returnBool - Optional. If true, returns a boolean indicating whether the character was found. If false or not provided, returns the character found or null if not found.\r\n    * @returns  Returns the character found, a boolean indicating whether the character was found (if `returnBool` is true), or null if the character was not found.\r\n    */\n  }, {\n    key: \"findChar\",\n    value: function findChar(string, limit) {\n      var returnBool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      for (var i = 0; i <= limit; i++) {\n        var index = string.indexOf(i.toString());\n        if (index !== -1) {\n          return returnBool ? true : i.toString();\n        }\n      }\n      return returnBool ? false : null;\n    }\n  }, {\n    key: \"findComputedStyle\",\n    value: function findComputedStyle(element, property) {\n      var styles = window.getComputedStyle(element);\n      var propertiesObject = {};\n      try {\n        if (!element) {\n          throw new Error(\"Element not found\");\n        }\n        if (!property) {\n          throw new Error(\"Property is required\");\n        }\n        if (Array.isArray(property) && property.length > 0) {\n          property.forEach(function (props) {\n            propertiesObject[\"\".concat(props)] = styles.getPropertyValue(\"\".concat(props));\n          });\n          return propertiesObject;\n        }\n        if (typeof property === \"string\") {\n          return styles.getPropertyValue(\"\".concat(property));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    /**\r\n     * A function to escape special characters in a string using the DOM API.\r\n     *\r\n     * @param str - The input string to be escaped.\r\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\r\n     */\n  }, {\n    key: \"escape\",\n    value: function escape(str) {\n      if (!str) {\n        return \"\";\n      }\n      var div = document.createElement(\"div\");\n      div.appendChild(document.createTextNode(str));\n      return div.innerHTML;\n    }\n    /**\r\n     * This function takes an HTMLElement and a target string.\r\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\r\n     * If no such element is found, it returns null.\r\n     * @param referent - The starting point of the search.\r\n     * @param target - The CSS selector used to find the desired element.\r\n     * @returns The first Element with a matching target, or null if no such element is found.\r\n     */\n  }, {\n    key: \"findHTMLElementBy\",\n    value: function findHTMLElementBy(referent, target) {\n      var currentElement = referent;\n      if (currentElement) {\n        while (currentElement = currentElement.previousElementSibling) {\n          var charCounterSpan = currentElement.querySelector(target);\n          if (charCounterSpan) {\n            return charCounterSpan;\n          }\n        }\n      }\n      return null;\n    }\n    /**\r\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\r\n     * If no attributes are provided, it returns an empty string.\r\n     * @param attributes - An object containing HTML attributes.\r\n     * @returns A string representing the attributes.\r\n     */\n  }, {\n    key: \"formatHTMLAttributes\",\n    value: function formatHTMLAttributes(attributes) {\n      var attrs = \"\";\n      if (attributes) {\n        for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          if (key) {\n            attrs += \"\".concat(key, \"='\").concat(value, \"'\");\n          }\n        }\n      }\n      return attrs.trim();\n    }\n    /**\r\n     * Cette fonction redimensionne automatiquement un élément \"select\"\r\n     * en fonction de la longueur du texte sélectionné\r\n     * @param select\r\n    */\n  }, {\n    key: \"autoResizeSelect\",\n    value: function autoResizeSelect(select) {\n      var field = this.$$(select);\n      if (field instanceof HTMLSelectElement) {\n        field.addEventListener('change', function (event) {\n          var tempSelect = document.createElement('select'),\n            tempOption = document.createElement('option');\n          if (null !== event.target && event.target instanceof HTMLSelectElement) {\n            tempOption.textContent = event.target.options[event.target.selectedIndex].text;\n            tempSelect.style.cssText += \"\\n                      visibility: hidden;\\n                      position: fixed;\\n                      \";\n            tempSelect.appendChild(tempOption);\n            event.target.after(tempSelect);\n            var tempSelectWidth = tempSelect.getBoundingClientRect().width;\n            console.log({\n              tempSelect: tempSelect\n            });\n            event.target.style.width = \"\".concat(tempSelectWidth, \"px\");\n            tempSelect.remove();\n          }\n        });\n        field.dispatchEvent(new Event('change'));\n      } else {\n        console.error(\"Le paramètre n'est pas un élément Select\");\n      }\n      ;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/utils/src/utils.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _fileUploader = _interopRequireDefault(__webpack_require__(/*! ../packages/file-uploader/src/file-uploader */ \"./packages/file-uploader/src/file-uploader.ts\"));\nvar _progressForm = _interopRequireDefault(__webpack_require__(/*! ../packages/progress-form/src/progress-form */ \"./packages/progress-form/src/progress-form.ts\"));\nvar _utils = _interopRequireDefault(__webpack_require__(/*! ../packages/utils/src/utils */ \"./packages/utils/src/utils.ts\"));\nvar _tempdata = _interopRequireDefault(__webpack_require__(/*! ../packages/tempdata/src/tempdata */ \"./packages/tempdata/src/tempdata.ts\"));\nvar _tempdataBackend = _interopRequireDefault(__webpack_require__(/*! ../packages/tempdata-backend/src/tempdata-backend */ \"./packages/tempdata-backend/src/tempdata-backend.ts\"));\nvar _transformer = __webpack_require__(/*! ../packages/transformer/src/transformer */ \"./packages/transformer/src/transformer.ts\");\nvar _fetchRequest = _interopRequireDefault(__webpack_require__(/*! ../packages/fetch-request/src/fetch-request */ \"./packages/fetch-request/src/fetch-request.ts\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n//Progress Form\nvar form = document.querySelector(\"form\");\nvar addbtn = document.querySelector('.add-btn');\nvar submiter = document.querySelector('#submiter');\n// console.log(form,addbtn)\nvar progress = new _progressForm[\"default\"]();\nif (form) progress.lazyRun(6, {\n  form: form\n}, {\n  fieldsetParent: {\n    width: \"null\"\n  },\n  fieldsetContainer: {\n    justifyContent: 'null' //Il est conseillé en lazy de desactiver ce justify content car à cause de ca longeur il disposera les autre fieldsest hors de l'ecrant\n  },\n  fieldset: {\n    width: \"650px\"\n  }\n});\nvar PROGRESSING_DATA = progress.PROGRESSING_DATA;\nvar nextButton = PROGRESSING_DATA['fieldset0'].next.button;\nvar nextIndex = PROGRESSING_DATA['fieldset0'].next.i;\nvar nextTranslateX = PROGRESSING_DATA['fieldset0'].next.translateX;\nvar prevIndex = PROGRESSING_DATA['fieldset1'].prev.i;\nvar prevTranslateX = PROGRESSING_DATA['fieldset1'].prev.translateX;\nvar templateString = \"<fieldset class=\\\"fieldset1\\\">\\n<label for=\\\"name\\\" required-field>Name:</label>\\n<input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name\\\">\\n<div class=\\\"button-container\\\">\\n  <button type=\\\"button\\\" __prev__>previous</button>\\n  <button type=\\\"button\\\" __next__>next</button>\\n</div>\\n</fieldset>\";\nnextButton.addEventListener('click', function () {\n  new _fetchRequest[\"default\"]({\n    uri: \"http://localhost:8000/src/backend.php\",\n    options: {\n      method: \"POST\",\n      responseDataType: \"text\"\n    },\n    callbacks: {\n      onSuccess: function onSuccess(response) {\n        var template = _utils[\"default\"].textToHTMLElement(templateString);\n        var fieldsetContainer = document.querySelector('[fieldset__container]');\n        var prevButton = template.querySelector(\"[__prev__]\");\n        Object.assign(template.style, progress.RENDERED_STYLE.fieldsetStyle);\n        fieldsetContainer.appendChild(template);\n        progress.prev(prevIndex, prevTranslateX, prevButton);\n        progress.next(nextIndex, nextTranslateX);\n      }\n    }\n  });\n});\n\n// File uploader\nvar input = document.querySelector(\"input[type='file']\");\nvar uploader = new _fileUploader[\"default\"](input);\nuploader.load(function (files) {\n  // console.log(files);\n});\n_utils[\"default\"].setAsteriskToRequiredField();\n\n// Temp data\nvar tempdata = new _tempdata[\"default\"](\"test\", \"users\");\ntempdata.read().then( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(datas) {\n    var self;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          self = new _fetchRequest[\"default\"]({\n            uri: \"http://localhost:8000/src/backend.php\",\n            data: datas[0],\n            iteration: 3,\n            callbacks: {\n              onPreFetch: function onPreFetch(data) {\n                // console.log(data)\n              },\n              onSuccess: function onSuccess(response) {\n                // self.recursion(datas[1])\n                // self.recursion(datas[2])\n                // self.recursion(datas[3])\n              }\n            }\n          });\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\naddbtn === null || addbtn === void 0 || addbtn.addEventListener('click', function () {\n  if (form) {\n    var formData = new FormData(form);\n    var transformer = new _transformer.Transformer.FormDataTransformer(formData);\n    tempdata.add(transformer.reverse());\n  }\n});\nsubmiter === null || submiter === void 0 ? void 0 : submiter.addEventListener('click', function (e) {\n  e.preventDefault();\n  var backend = new _tempdataBackend[\"default\"](tempdata, \"http://localhost:8000/src/backend.php\");\n  backend.persist();\n});\n\n// Flash\n\n// Flash.add({\n//   message:\"hey\",\n//   type:\"danger\",\n//   icon:true,\n//   closeButton:true\n// })\n\n//# sourceURL=webpack://@easylibs/easylibs/./src/index.ts?");

/***/ }),

/***/ "./packages/fetch-request/dist/fetch-request.js":
/*!******************************************************!*\
  !*** ./packages/fetch-request/dist/fetch-request.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * FetchRequest class designed to simplify the process of making HTTP requests within web applications.\n * It encapsulates functionality for sending requests and handling callbacks before and after the request.\n */\nvar FetchRequest = /*#__PURE__*/function () {\n  /**\n   * @param options Configuration for the fetch request.\n   */\n  function FetchRequest(options) {\n    var _this = this;\n    _classCallCheck(this, FetchRequest);\n    this.options = options;\n    /**\n     * Asynchronous method that handles the form submission process.\n     * It optionally executes pre-fetch and post-fetch callbacks and makes the HTTP request.\n     */\n    this.submitForm = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              if (!(this.options.callbacks && this.options.callbacks.onPreFetch)) {\n                _context.next = 4;\n                break;\n              }\n              _context.next = 4;\n              return this.preFetch();\n            case 4:\n              _context.next = 6;\n              return this.run();\n            case 6:\n              if (!(this.options.callbacks && this.options.callbacks.onPostFetch)) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 9;\n              return this.postFetch(this.response, this.status);\n            case 9:\n              _context.next = 14;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              this.handleError(_context.t0, undefined, 'Error executing query : ');\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n    };\n    /**\n     * Asynchronous method that performs the HTTP request using the Fetch API.\n     * It constructs the request based on the provided options and handles the response.\n     */\n    this.run = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, response, _this$options, uri, data, _options, finalUri, body, method, fetchOptions, responseDataType;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              response = null;\n              _context2.prev = 1;\n              _this$options = this.options, uri = _this$options.uri, data = _this$options.data, _options = _this$options.options;\n              if (uri) {\n                _context2.next = 5;\n                break;\n              }\n              throw new Error(\"URI is required\");\n            case 5:\n              finalUri = uri;\n              body = null;\n              method = (_options === null || _options === void 0 ? void 0 : _options.method) || 'GET';\n              if (method === \"GET\" && data) {\n                finalUri = this.buildGetRequestUrl(uri, data);\n              } else if (method !== \"GET\" && method !== \"HEAD\" && method !== \"OPTIONS\" && data) {\n                body = this.prepareRequestBody(data);\n              }\n              fetchOptions = {\n                method: method,\n                headers: _options === null || _options === void 0 ? void 0 : _options.headers,\n                body: body,\n                credentials: _options === null || _options === void 0 ? void 0 : _options.credentials,\n                mode: _options === null || _options === void 0 ? void 0 : _options.mode,\n                cache: _options === null || _options === void 0 ? void 0 : _options.cache,\n                integrity: _options === null || _options === void 0 ? void 0 : _options.integrity\n              };\n              if (method === \"GET\" || method === \"HEAD\" || method === \"OPTIONS\") {\n                delete fetchOptions.body;\n              }\n              _context2.next = 13;\n              return fetch(finalUri, fetchOptions);\n            case 13:\n              response = _context2.sent;\n              this.status = response.status;\n              if (!_options) {\n                _context2.next = 28;\n                break;\n              }\n              responseDataType = _options.responseDataType;\n              if (!responseDataType) {\n                _context2.next = 28;\n                break;\n              }\n              if (!(responseDataType === \"text\")) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 21;\n              return response.text();\n            case 21:\n              _context2.t0 = _context2.sent;\n              _context2.next = 27;\n              break;\n            case 24:\n              _context2.next = 26;\n              return response.json();\n            case 26:\n              _context2.t0 = _context2.sent;\n            case 27:\n              this.response = _context2.t0;\n            case 28:\n              if (((_a = this.options.callbacks) === null || _a === void 0 ? void 0 : _a.onSuccess) && response.ok) {\n                this.options.callbacks.onSuccess(this.response);\n              }\n              _context2.next = 34;\n              break;\n            case 31:\n              _context2.prev = 31;\n              _context2.t1 = _context2[\"catch\"](1);\n              this.handleError(_context2.t1, response ? response.status : 0);\n            case 34:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[1, 31]]);\n      }));\n    };\n    /**\n     * Executes the pre-fetch callback, allowing for data modification before the request is sent.\n     */\n    this.preFetch = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(typeof this.options.callbacks.onPreFetch === 'function')) {\n                _context3.next = 5;\n                break;\n              }\n              _context3.next = 3;\n              return this.options.callbacks.onPreFetch(this.options.data);\n            case 3:\n              data = _context3.sent;\n              if (data) {\n                this.options.data = data.hasOwnProperty('data') ? data.data : data;\n              }\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    };\n    /**\n     * Executes the post-fetch callback, allowing for actions to be taken after the request has been processed.\n     * @param response The response from the fetch request.\n     * @param status The HTTP status code of the response.\n     */\n    this.postFetch = function (response, status) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.options.submitter instanceof HTMLButtonElement) {\n                this.options.submitter.removeAttribute('disabled');\n              }\n              return _context4.abrupt(\"return\", this.options.callbacks.onPostFetch ? this.options.callbacks.onPostFetch(response, status) : undefined);\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    };\n    this.attachSubmitterEvent();\n  }\n  /**\n   * Attaches a click event listener to the submitter element that triggers the form submission.\n   * If no submitter is provided, the form submission is triggered immediately.\n   */\n  return _createClass(FetchRequest, [{\n    key: \"attachSubmitterEvent\",\n    value: function attachSubmitterEvent() {\n      this.options.submitter ? this.options.submitter.addEventListener('click', this.submitForm) : this.submitForm();\n    }\n    /**\n     * Constructs the URL for a GET request by appending query parameters.\n     * @param uri The base URI for the request.\n     * @param data The data to be sent as query parameters.\n     * @returns The final URI with query parameters.\n     */\n  }, {\n    key: \"buildGetRequestUrl\",\n    value: function buildGetRequestUrl(uri, data) {\n      var url = new URL(uri, window.location.origin);\n      var params = new URLSearchParams();\n      if (data instanceof FormData) {\n        var _iterator = _createForOfIteratorHelper(data.entries()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n            if (typeof value === 'string') {\n              params.append(key, value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            _key = _Object$entries$_i[0],\n            _value = _Object$entries$_i[1];\n          params.append(_key, _value);\n        }\n      }\n      url.search = params.toString();\n      return url.toString();\n    }\n    /**\n     * Prepares the request body based on the specified data type.\n     * @param data The data to be sent in the request body.\n     * @returns The prepared request body.\n     */\n  }, {\n    key: \"prepareRequestBody\",\n    value: function prepareRequestBody(data) {\n      var _a, _b;\n      if (((_a = this.options.options) === null || _a === void 0 ? void 0 : _a.requestDataConvert) === \"form-data\" && !(data instanceof FormData)) {\n        return this.convertObjectToFormData(data);\n      } else if (((_b = this.options.options) === null || _b === void 0 ? void 0 : _b.requestDataConvert) === \"record\") {\n        return JSON.stringify(data);\n      }\n      return data;\n    }\n    /**\n     * Converts an object to FormData.\n     * @param data The data object to convert.\n     * @returns The FormData representation of the data.\n     */\n  }, {\n    key: \"convertObjectToFormData\",\n    value: function convertObjectToFormData(data) {\n      var formData = new FormData();\n      Object.entries(data).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return formData.append(key, value);\n      });\n      return formData;\n    }\n    /**\n     * Handles errors that occur during the fetch request process.\n     * Logs the error and executes the onError callback if provided.\n     * @param error The error that occurred.\n     * @param status Optional HTTP status code related to the error.\n     * @param message Optional custom error message.\n     */\n  }, {\n    key: \"handleError\",\n    value: function handleError(error, status) {\n      var message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Fetch Request Error: ';\n      var _a;\n      console.error(message, error);\n      if ((_a = this.options.callbacks) === null || _a === void 0 ? void 0 : _a.onError) {\n        this.options.callbacks.onError(error, status || 0);\n      }\n    }\n  }]);\n}();\nexports[\"default\"] = FetchRequest;\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/fetch-request/dist/fetch-request.js?");

/***/ }),

/***/ "./packages/transformer/dist/transformer.js":
/*!**************************************************!*\
  !*** ./packages/transformer/dist/transformer.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? 0 : _typeof(exports)) === 'object' && ( false ? 0 : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(self, function () {\n  return /******/function () {\n    // webpackBootstrap\n    /******/\n    \"use strict\";\n\n    /******/\n    var __webpack_modules__ = {\n      /***/\"./src/transformer.ts\": (\n      /*!****************************!*\\\r\n        !*** ./src/transformer.ts ***!\r\n        \\****************************/\n      /***/\n      function srcTransformerTs(__unused_webpack_module, exports) {\n        var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Transformer = void 0;\n        function getMimeType(base64String) {\n          var get = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"both\";\n          var extension = base64String.split(\",\")[0].split(\":\")[1].split(\";\")[0].split(\"/\")[1];\n          var fileType = base64String.split(\",\")[0].split(\":\")[1].split(\";\")[0].split(\"/\")[0];\n          if (\"type\" === get) {\n            return fileType;\n          }\n          if (\"extension\" === get) {\n            return extension;\n          }\n          return fileType + \"/\" + extension;\n        }\n        var Transformer;\n        (function (Transformer) {\n          var Base64Transformer = /*#__PURE__*/function () {\n            function Base64Transformer() {\n              _classCallCheck(this, Base64Transformer);\n              this.base64String = \"\";\n            }\n            /**\r\n             * Convertit une chaîne base64 en objet File.\r\n             * @param base64String - La chaîne encodée en base64.\r\n             * @param fileName - (Optionnel) Le nom du fichier.\r\n             * @returns Le fichier résultant.\r\n             */\n            return _createClass(Base64Transformer, [{\n              key: \"toFile\",\n              value: function toFile(base64String, fileName) {\n                this.base64String = base64String;\n                var byteCharacters = window.atob(base64String.split(\",\")[1]);\n                var byteArrays = [];\n                var _fileName = \"\";\n                for (var offset = 0; offset < byteCharacters.length; offset += 512) {\n                  var slice = byteCharacters.slice(offset, offset + 512);\n                  var byteNumbers = new Array(slice.length);\n                  for (var i = 0; i < slice.length; i++) {\n                    byteNumbers[i] = slice.charCodeAt(i);\n                  }\n                  var byteArray = new Uint8Array(byteNumbers);\n                  byteArrays.push(byteArray);\n                }\n                var extension = getMimeType(base64String, \"extension\");\n                var fileType = getMimeType(base64String, \"type\");\n                if (fileName) {\n                  _fileName = fileName;\n                } else {\n                  _fileName = \"tranformed_file.\".concat(extension);\n                }\n                return new File(byteArrays, _fileName, {\n                  type: \"\".concat(fileType, \"/\").concat(extension)\n                });\n              }\n              /**\r\n               * Convertit un objet File en chaîne base64.\r\n               * @param file - Le fichier à convertir en base64.\r\n               * @returns La chaîne base64 résultante (sous forme de promesse).\r\n               */\n            }, {\n              key: \"fromFile\",\n              value: function fromFile(file) {\n                return new Promise(function (resolve, reject) {\n                  var reader = new FileReader();\n                  reader.onloadend = function () {\n                    resolve(reader.result);\n                  };\n                  reader.onerror = function (error) {\n                    reject(error);\n                  };\n                  reader.readAsDataURL(file);\n                });\n              }\n              /**\r\n               * Convertit une chaîne base64 en tableau Uint8Array.\r\n               * @param base64String - La chaîne encodée en base64.\r\n               * @returns Le tableau Uint8Array résultant.\r\n               */\n            }, {\n              key: \"toUint8Array\",\n              value: function toUint8Array(base64String) {\n                var binaryString = window.atob(base64String.split(\",\")[1]);\n                var length = binaryString.length;\n                var bytes = new Uint8Array(length);\n                for (var i = 0; i < length; i++) {\n                  bytes[i] = binaryString.charCodeAt(i);\n                }\n                return bytes;\n              }\n              /**\r\n               * Convertit un tableau Uint8Array en chaîne base64.\r\n               * @param uint8Array - Le tableau Uint8Array à convertir en base64.\r\n               * @returns La chaîne base64 résultante.\r\n               */\n            }, {\n              key: \"fromUint8Array\",\n              value: function fromUint8Array(uint8Array) {\n                var binaryString = \"\";\n                for (var i = 0; i < uint8Array.length; i++) {\n                  binaryString += String.fromCharCode(uint8Array[i]);\n                }\n                return window.btoa(binaryString);\n              }\n              /**\r\n               * Convertit un objet Blob en chaîne base64 ou ArrayBuffer.\r\n               * @param blob - Le Blob à convertir.\r\n               * @returns La chaîne base64 ou ArrayBuffer résultante (sous forme de promesse).\r\n               */\n            }, {\n              key: \"fromBlob\",\n              value: function fromBlob(blob) {\n                return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", new Promise(function (resolve) {\n                          var reader = new FileReader();\n                          reader.onloadend = function () {\n                            var result = reader.result;\n                            var base64String = result || \"\";\n                            resolve(base64String);\n                          };\n                          reader.readAsDataURL(blob);\n                        }));\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n              }\n            }]);\n          }();\n          Transformer.Base64Transformer = Base64Transformer;\n          var BlobTransformer = /*#__PURE__*/function () {\n            function BlobTransformer() {\n              _classCallCheck(this, BlobTransformer);\n            }\n            return _createClass(BlobTransformer, [{\n              key: \"fromUint8Array\",\n              value:\n              /**\r\n               * Convertit un tableau Uint8Array en objet Blob.\r\n               * @param uint8Array - Le tableau Uint8Array à convertir en Blob.\r\n               * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n               * @returns Le Blob résultant.\r\n               */\n              function fromUint8Array(uint8Array, contentType) {\n                contentType = contentType !== null && contentType !== void 0 ? contentType : \"\";\n                return new Blob([uint8Array], {\n                  type: contentType\n                });\n              }\n              /**\r\n               * Crée un Blob à partir d'un objet File.\r\n               * @param file - Le fichier à convertir en Blob.\r\n               * @returns Le Blob résultant.\r\n               */\n            }, {\n              key: \"fromFile\",\n              value: function fromFile(file) {\n                return file.slice(0, file.size, file.type);\n              }\n              /**\r\n               * Crée un Blob à partir d'une chaîne encodée en base64.\r\n               * @param base64String - La chaîne encodée en base64.\r\n               * @param contentType - (Optionnel) Le type de contenu du Blob.\r\n               * @returns Le Blob résultant.\r\n               */\n            }, {\n              key: \"fromBase64String\",\n              value: function fromBase64String(base64String, contentType) {\n                contentType = contentType || \"\";\n                var byteCharacters = window.atob(base64String.split(\",\")[1]);\n                var byteNumbers = new Array(byteCharacters.length);\n                for (var i = 0; i < byteCharacters.length; i++) {\n                  byteNumbers[i] = byteCharacters.charCodeAt(i);\n                }\n                var byteArray = new Uint8Array(byteNumbers);\n                return new Blob([byteArray], {\n                  type: contentType\n                });\n              }\n            }]);\n          }();\n          Transformer.BlobTransformer = BlobTransformer;\n          var FileTransformer = /*#__PURE__*/function () {\n            function FileTransformer() {\n              _classCallCheck(this, FileTransformer);\n            }\n            return _createClass(FileTransformer, [{\n              key: \"toBase64\",\n              value:\n              /**\r\n               * Convertit un fichier en chaîne base64.\r\n               * @param file - Le fichier à convertir en base64.\r\n               * @returns La chaîne base64 résultante (sous forme de promesse).\r\n               */\n              function toBase64(file) {\n                return new Promise(function (resolve, reject) {\n                  var reader = new FileReader();\n                  reader.onloadend = function () {\n                    resolve(reader.result);\n                  };\n                  reader.onerror = function (error) {\n                    reject(error);\n                  };\n                  reader.readAsDataURL(file);\n                });\n              }\n              /**\r\n               * Convertit une chaîne base64 en objet File.\r\n               * @param base64String - La chaîne encodée en base64.\r\n               * @param contentType - (Optionnel) Le type de contenu du fichier.\r\n               * @param fileName - (Optionnel) Le nom du fichier.\r\n               * @param formatString - (Optionnel) Indique si la chaîne base64 est formatée.\r\n               * @returns Le fichier résultant.\r\n               */\n            }, {\n              key: \"fromBase64String\",\n              value: function fromBase64String(base64String, contentType, fileName) {\n                var formatString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n                contentType = contentType || \"\";\n                var fileInfo = formatString ? base64String.split(\",\")[1] : base64String;\n                var byteCharacters = window.atob(fileInfo);\n                var byteNumbers = new Array(byteCharacters.length);\n                for (var i = 0; i < byteCharacters.length; i++) {\n                  byteNumbers[i] = byteCharacters.charCodeAt(i);\n                }\n                var byteArray = new Uint8Array(byteNumbers);\n                var blob = new Blob([byteArray], {\n                  type: contentType\n                });\n                fileName = fileName || \"image\";\n                return new File([blob], fileName, {\n                  type: contentType\n                });\n              }\n              /**\r\n               * Convertit un tableau Uint8Array en objet File.\r\n               * @param uint8Array - Le tableau Uint8Array.\r\n               * @param mimeType - Le type MIME du fichier.\r\n               * @param fileName - Le nom du fichier.\r\n               * @returns Le fichier résultant.\r\n               */\n            }, {\n              key: \"fromUint8Array\",\n              value: function fromUint8Array(uint8Array, mimeType, fileName) {\n                return new File(uint8Array, fileName, {\n                  type: mimeType\n                });\n              }\n            }]);\n          }();\n          Transformer.FileTransformer = FileTransformer;\n          var FormDataTransformer = /*#__PURE__*/function () {\n            function FormDataTransformer(data) {\n              _classCallCheck(this, FormDataTransformer);\n              this._data = data;\n            }\n            /**\r\n             * Transforme les données en un objet FormData.\r\n             * @returns L'objet FormData résultant.\r\n             */\n            return _createClass(FormDataTransformer, [{\n              key: \"transform\",\n              value: function transform() {\n                var formData = new FormData();\n                if (_typeof(this._data) === \"object\") {\n                  var data = this._data;\n                  try {\n                    for (var key in this._data) {\n                      if (this._data.hasOwnProperty(key)) {\n                        formData.append(key, data[key]);\n                      }\n                    }\n                  } catch (error) {\n                    console.error(\"Erreur détectée: \" + error);\n                  }\n                }\n                return formData;\n              }\n              /**\r\n               * Revertit un objet FormData en objet JavaScript.\r\n               * @returns L'objet JavaScript résultant.\r\n               */\n            }, {\n              key: \"reverse\",\n              value: function reverse() {\n                var elementObject = {};\n                if (this._data instanceof FormData) {\n                  try {\n                    var tempObject = {};\n                    this._data.forEach(function (value, key) {\n                      tempObject[key] = value;\n                    });\n                    elementObject = Object.assign({}, tempObject);\n                  } catch (error) {\n                    console.error(\"Erreur détectée: \" + error);\n                  }\n                }\n                return elementObject;\n              }\n              /**\r\n               * Option de transformation spécifique.\r\n               * @param option - L'option de transformation ('onlyobject', 'onlyformdata', 'auto').\r\n               * @returns L'objet ou le FormData résultant en fonction de l'option spécifiée.\r\n               */\n            }, {\n              key: \"option\",\n              value: function option(_option) {\n                if (_option === \"onlyobject\") {\n                  if (this._data instanceof FormData) {\n                    return this.reverse();\n                  }\n                  return this._data;\n                }\n                if (_option === \"onlyformdata\") {\n                  if (this._data instanceof FormData) {\n                    return this._data;\n                  }\n                  return this.transform();\n                }\n                if (_option === \"auto\") {\n                  return this.auto();\n                }\n              }\n            }, {\n              key: \"auto\",\n              value: function auto() {\n                if (this._data instanceof FormData) {\n                  return this.reverse();\n                } else {\n                  return this.transform();\n                }\n              }\n            }]);\n          }();\n          Transformer.FormDataTransformer = FormDataTransformer;\n        })(Transformer || (exports.Transformer = Transformer = {}));\n\n        /***/\n      })\n\n      /******/\n    };\n    /************************************************************************/\n    /******/\n    /******/ // startup\n    /******/ // Load entry module and return exports\n    /******/ // This entry module is referenced by other modules so it can't be inlined\n    /******/\n    var __nested_webpack_exports__ = {};\n    /******/\n    __webpack_modules__[\"./src/transformer.ts\"](0, __nested_webpack_exports__);\n    /******/\n    /******/\n    return __nested_webpack_exports__;\n    /******/\n  }();\n});\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/transformer/dist/transformer.js?");

/***/ }),

/***/ "./packages/utils/dist/utils.js":
/*!**************************************!*\
  !*** ./packages/utils/dist/utils.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n  return _createClass(Utils, null, [{\n    key: \"setAudio\",\n    value:\n    /**\n     * Crée un élément audio avec la source audio spécifiée par le chemin audioPath.\n     * @param audioPath Le chemin de la source audio.\n     * @param classname La classe CSS à ajouter à l'élément audio (optionnel).\n     * @returns L'élément audio créé.\n     */\n    function setAudio(audioPath) {\n      var classname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var audio = document.createElement(\"audio\");\n      if (classname != null) {\n        audio.classList.add(classname);\n      }\n      var source = document.createElement(\"source\");\n      source.src = audioPath;\n      source.type = \"audio/mpeg\";\n      audio.appendChild(source);\n      return audio;\n    }\n    /**\n     * Converts an HTML string into an HTML element or a collection of HTML elements.\n     *\n     * @param textHtml - The HTML string to convert.\n     * @param targetName - The tag name of the target HTML element to create.\n     * @param children - A boolean indicating whether to return all children of the target element.\n     * @returns - Returns the first child of the target element if `children` is `false`, otherwise returns a collection of the element's children. Returns `null` if there are no children.\n     *\n     * This method creates a new HTML element of the type specified by `targetName`, sets its inner HTML to `textHtml`, and returns either the first child of this element or all its children as an HTMLCollection, depending on the value of `children`.\n     * If the HTML content generates no children, the method returns `null`.\n     */\n  }, {\n    key: \"textToHTMLElement\",\n    value: function textToHTMLElement(textHtml) {\n      var targetName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var target = document.createElement(\"\".concat(targetName));\n      target.innerHTML = textHtml;\n      if (true === children) {\n        return target.children;\n      }\n      return target.firstElementChild;\n    }\n    /**\n     * retourne un élément du dom\n     */\n  }, {\n    key: \"$$\",\n    value: function $$(element) {\n      if (typeof element !== \"string\") {\n        return element;\n      } else if (typeof element === \"string\") {\n        var collection = document.querySelectorAll(\"\".concat(element));\n        var el = document.querySelector(\"\".concat(element));\n        if (collection !== null && collection.length > 1) {\n          return collection;\n        }\n        if (el !== null) {\n          return el;\n        }\n      }\n    }\n    /**\n     * Cette fonction permet de convertir un objet NodeList en un tableau d'éléments HTML (HTMLElement)\n     * et d'exécuter une fonction de rappel sur chaque élément du tableau.\n     * @param nodeList Un objet NodeList ou un élément HTML.\n     * Si c'est un NodeList, il sera converti en tableau d'éléments HTML.\n     * @param callback Une fonction de rappel à exécuter sur chaque élément du tableau.\n     * @returns\n     */\n  }, {\n    key: \"processNodes\",\n    value: function processNodes(nodeList) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (node, index) {};\n      if (nodeList instanceof NodeList || Array.isArray(nodeList)) {\n        return Array.from(nodeList).forEach(function (node, i) {\n          callback(node, i);\n        });\n      }\n      if (null !== nodeList && undefined !== nodeList) {\n        return callback(nodeList);\n      }\n    }\n    /**\n     * Méthode qui renvoie une expression régulière en fonction du type demandé.\n     * @param type Le type d'expression régulière demandé.\n     * @returns L'expression régulière correspondante.\n     */\n  }, {\n    key: \"getRegexp\",\n    value: function getRegexp(type) {\n      switch (type) {\n        case \"email\":\n          return new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/i);\n        case \"phone-number\":\n          return new RegExp(/^(0|\\+[1-9][0-9]{0,2}) ?[0-9]+$/);\n        case \"number\":\n          return new RegExp(/^[-+]?[0-9]*\\.?[0-9]+$/);\n        case \"strong-password\":\n          return new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/);\n        case \"url-protocol\":\n          return new RegExp(/^(https?:\\/\\/)$/, \"i\");\n        case \"url-domain\":\n          return new RegExp(/^((([a-zA-Z0-9]{1,})[.-]?)+[a-zA-Z]{2,})$/, \"i\");\n        case \"url-ip\":\n          return new RegExp(/^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/, \"i\");\n        case \"url-port\":\n          return new RegExp(/^:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3})$/, \"i\");\n        case \"url-path\":\n          return new RegExp(/^(\\.\\/)?[-a-zA-Z\\d%_.~+\\/]*$/, \"i\");\n        case \"url-query\":\n          return new RegExp(/^(\\?[;&a-zA-Z\\d%_.~+=-]*)$/, \"i\");\n        case \"url-fragment\":\n          return new RegExp(/^#[-a-zA-Z\\d%_.~+/=?&;:!*'()]*$/, \"i\");\n        case \"default-text\":\n          return new RegExp(/^[a-zA-Z -'áàâäãåçéèêëğíìîïıñóòôöõúùûüşýÿæœÁÀÂÄÃÅÇÉÈÊËĞÍÌÎÏIÑÓÒÔÖÕÚÙÛÜŞÝŸÆŒ]+$/);\n        case \"fr-text\":\n          return new RegExp(/^[A-Za-z' - àâçéèêëûæœÀÂÉÈÊËÆŒ]+$/);\n        case \"en-text\":\n          return new RegExp(/^[a-zA-Z '-]{1,40}$/);\n        case \"tr-text\":\n          return new RegExp(/^[A-Za-z çğıöüşæœÇĞIÖÜŞ]+$/);\n        default:\n          throw new Error(\"Type d'expression régulière non pris en charge.\");\n      }\n    }\n    /**\n     * Crée une couche superfielle au dessus d'un élément html afin d'empecher tout évènement.\n     * @param tag Le nom de la balise HTML à utiliser comme couche (par défaut : 'td', idéal pour les tableau html).\n     * @param backgroundColor La couleur d'arrière-plan de la zone interdite (par défaut : '#FFFFFF').\n     * @returns Un élément HTML représentant une zone interdite.\n     */\n  }, {\n    key: \"forbiddener\",\n    value: function forbiddener() {\n      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"td\";\n      var backgroundColor = arguments.length > 1 ? arguments[1] : undefined;\n      var forbiddenTag = document.createElement(tag);\n      forbiddenTag.setAttribute(\"class\", \"forbidden\");\n      var style = {\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\",\n        opacity: \".7\",\n        zIndex: \"10\",\n        backgroundColor: backgroundColor ? backgroundColor : \"#FFFFFF\"\n      };\n      Object.assign(forbiddenTag.style, style);\n      return forbiddenTag;\n    }\n    /**\n     * Réduit une chaîne de texte.\n     * @param text La chaîne de texte à réduire.\n     * @param maxLength La longueur maximale de la chaîne résultante (par défaut : 14).\n     * @returns La chaîne de texte réduite.\n     */\n  }, {\n    key: \"truncateChars\",\n    value: function truncateChars(text) {\n      var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 14;\n      text = typeof text === \"string\" ? text.trim() : \"\";\n      if (text.length > maxLength) {\n        return \"\".concat(text.substring(0, maxLength), \"...\");\n      }\n      return text;\n    }\n    /**\n     * Changes the input text type to a number type and performs additional processing\n     * based on the specified parameters.\n     *\n     * @param attr - The CSS selector for the input elements to be processed.\n     * @param limit - (Optional) The maximum allowed value. If provided, input values exceeding this limit will be set to the limit.\n     * @param priceType - (Optional) A boolean flag indicating whether the input represents a price. If true, the input is expected to be a number with an optional decimal part.\n     * @param decimal - (Optional) The number of decimal places to round to. If provided, the input values will be rounded to the specified decimal places.\n     */\n  }, {\n    key: \"changeInputTextTypeToNumberType\",\n    value: function changeInputTextTypeToNumberType(attr, limit) {\n      var priceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var decimal = arguments.length > 3 ? arguments[3] : undefined;\n      this.processNodes(this.$$(attr), function (element) {\n        var input = element;\n        if (input) {\n          input.addEventListener(\"input\", function () {\n            var regExp = priceType ? /^[0-9]+([.,][0-9]+)?$/ : /[^\\d]/g;\n            if (decimal) {\n              var getValue = input.value.replace(regExp, \"\");\n              input.value = \"\".concat(parseFloat(getValue).toFixed(decimal));\n            } else {\n              input.value = input.value.replace(regExp, \"\");\n            }\n            if (limit && parseInt(input.value) > limit) {\n              input.value = \"\".concat(limit);\n            }\n          });\n        }\n      });\n    }\n    /**\n     * The function is used to disable specific elements (by default td tags) inside a table when a certain button is clicked.\n     * It accepts several parameters: the tag to be disabled, the target element to be disabled, the trigger element (button),\n     * and the background color for the forbidden tag.\n     *\n     * @param tag - The tag of the element to be disabled (default: \"td\").\n     * @param target - The target element to be disabled (default: undefined).\n     * @param trigger - The trigger element (button) to activate the function (default: undefined).\n     * @param backgroundColor - The background color for the forbidden tag (default: undefined).\n     */\n  }, {\n    key: \"disablor\",\n    value: function disablor() {\n      var _this = this;\n      var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"td\";\n      var target = arguments.length > 1 ? arguments[1] : undefined;\n      var trigger = arguments.length > 2 ? arguments[2] : undefined;\n      var backgroundColor = arguments.length > 3 ? arguments[3] : undefined;\n      var buttons = document.querySelectorAll(\"[disablor],[self-disablor]\");\n      try {\n        if (!trigger && !buttons) {\n          throw new Error(\"Aucun bouton avec l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\");\n        }\n        this.processNodes(buttons, function (button) {\n          button.addEventListener(\"click\", function () {\n            var self = button.hasAttribute(\"self-disablor\");\n            var item = self ? button : button.closest(\"[disablor]\");\n            if (!target && !item) {\n              throw new Error(\"Aucun élément à désactiver contenant l'attribut <disablor> n'est détecté, vous pouvez le passer manuellement\");\n            }\n            if (item) {\n              item.style.position = \"relative\";\n              item.insertBefore(_this.forbiddener(tag, backgroundColor), item.firstChild);\n              if (item instanceof HTMLButtonElement) {\n                item.setAttribute(\"disabled\", \"true\");\n              }\n            }\n          });\n        });\n      } catch (error) {\n        console.error(\"Une erreur s'est produit: \", error);\n      }\n    }\n    /**\n     * Adds an asterisk indicator to labels associated with required form fields.\n     * The asterisk is inserted as an SVG element, and labels are selected based on the presence\n     * of the 'required-field' attribute. The function utilizes the processNodes method\n     * to iterate through the matched labels and append the asterisk.\n     */\n  }, {\n    key: \"setAsteriskToRequiredField\",\n    value: function setAsteriskToRequiredField() {\n      var styleId = 'custom-asterisk-style';\n      if (!document.getElementById(styleId)) {\n        var style = document.createElement('style');\n        style.id = styleId;\n        document.head.appendChild(style);\n        style.sheet.insertRule(\"\\n          label[required-field]::after {\\n            content: '*';\\n            color: #f89a9b;\\n            width: 10px;\\n            height: 10px;\\n          }\\n        \", 0);\n      }\n      var labels = document.querySelectorAll(\"label[required-field]\");\n      labels.forEach(function (label) {\n        label.style.display = \"flex\";\n        label.style.alignItems = \"center\";\n      });\n    }\n    /**\n     * This method checks if the object contains a key with the given substring.\n     * @param object The object to be searched.\n     * @param substring The substring to search for.\n     * @param getKey An optional parameter to determine the type of return value.\n     *               If true, the method will return the key as a string.\n     *               If false or not provided, the method will return the value corresponding to the key.\n     * @returns The value or key of the first matching property if found, otherwise false.\n     */\n  }, {\n    key: \"hasKeyWithNameSubstring\",\n    value: function hasKeyWithNameSubstring(object, substring, getKey) {\n      for (var key in object) {\n        if (key.includes(substring)) {\n          if (undefined === getKey || false === getKey) {\n            return object[key];\n          }\n          if (true === getKey) {\n            return key;\n          }\n        }\n      }\n      return false;\n    }\n    /**\n     * This method searches for an object's property by its key or short key.\n     * @param object The object to be searched.\n     * @param keyOrShortKey The key or short key to search for.\n     * @param key An optional parameter to determine the type of return value.\n     *            If true, the function will return the key as a string.\n     *            If false or not provided, the function will return the value corresponding to the key.\n     * @returns The value or key of the first matching property if found, otherwise false.\n     */\n  }, {\n    key: \"findObjectDataByKeyName\",\n    value: function findObjectDataByKeyName(object, keyOrShorKey, key) {\n      Object.keys(object).forEach(function (key) {\n        if (key.includes(keyOrShorKey)) {\n          return object[key];\n        }\n      });\n      return false;\n    }\n    /**\n    * Finds the first occurrence of a character in the given string up to the specified limit.\n    *\n    * @param string - The string to search.\n    * @param limit - The limit up to which to search for the character.\n    * @param returnBool - Optional. If true, returns a boolean indicating whether the character was found. If false or not provided, returns the character found or null if not found.\n    * @returns  Returns the character found, a boolean indicating whether the character was found (if `returnBool` is true), or null if the character was not found.\n    */\n  }, {\n    key: \"findChar\",\n    value: function findChar(string, limit) {\n      var returnBool = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      for (var i = 0; i <= limit; i++) {\n        var index = string.indexOf(i.toString());\n        if (index !== -1) {\n          return returnBool ? true : i.toString();\n        }\n      }\n      return returnBool ? false : null;\n    }\n  }, {\n    key: \"findComputedStyle\",\n    value: function findComputedStyle(element, property) {\n      var styles = window.getComputedStyle(element);\n      var propertiesObject = {};\n      try {\n        if (!element) {\n          throw new Error(\"Element not found\");\n        }\n        if (!property) {\n          throw new Error(\"Property is required\");\n        }\n        if (Array.isArray(property) && property.length > 0) {\n          property.forEach(function (props) {\n            propertiesObject[\"\".concat(props)] = styles.getPropertyValue(\"\".concat(props));\n          });\n          return propertiesObject;\n        }\n        if (typeof property === \"string\") {\n          return styles.getPropertyValue(\"\".concat(property));\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    /**\n     * A function to escape special characters in a string using the DOM API.\n     *\n     * @param str - The input string to be escaped.\n     * @returns - The escaped string with special characters replaced with their HTML entity equivalents.\n     */\n  }, {\n    key: \"escape\",\n    value: function escape(str) {\n      if (!str) {\n        return \"\";\n      }\n      var div = document.createElement(\"div\");\n      div.appendChild(document.createTextNode(str));\n      return div.innerHTML;\n    }\n    /**\n     * This function takes an HTMLElement and a target string.\n     * It returns the first Element with a matching target that is a sibling of the referent element or any of its previous siblings.\n     * If no such element is found, it returns null.\n     * @param referent - The starting point of the search.\n     * @param target - The CSS selector used to find the desired element.\n     * @returns The first Element with a matching target, or null if no such element is found.\n     */\n  }, {\n    key: \"findHTMLElementBy\",\n    value: function findHTMLElementBy(referent, target) {\n      var currentElement = referent;\n      if (currentElement) {\n        while (currentElement = currentElement.previousElementSibling) {\n          var charCounterSpan = currentElement.querySelector(target);\n          if (charCounterSpan) {\n            return charCounterSpan;\n          }\n        }\n      }\n      return null;\n    }\n    /**\n     * This function takes an object containing HTML attributes and returns a string representing the attributes.\n     * If no attributes are provided, it returns an empty string.\n     * @param attributes - An object containing HTML attributes.\n     * @returns A string representing the attributes.\n     */\n  }, {\n    key: \"formatHTMLAttributes\",\n    value: function formatHTMLAttributes(attributes) {\n      var attrs = \"\";\n      if (attributes) {\n        for (var _i = 0, _Object$entries = Object.entries(attributes); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          if (key) {\n            attrs += \"\".concat(key, \"='\").concat(value, \"'\");\n          }\n        }\n      }\n      return attrs.trim();\n    }\n    /**\n     * Cette fonction redimensionne automatiquement un élément \"select\"\n     * en fonction de la longueur du texte sélectionné\n     * @param select\n    */\n  }, {\n    key: \"autoResizeSelect\",\n    value: function autoResizeSelect(select) {\n      var field = this.$$(select);\n      if (field instanceof HTMLSelectElement) {\n        field.addEventListener('change', function (event) {\n          var tempSelect = document.createElement('select'),\n            tempOption = document.createElement('option');\n          if (null !== event.target && event.target instanceof HTMLSelectElement) {\n            tempOption.textContent = event.target.options[event.target.selectedIndex].text;\n            tempSelect.style.cssText += \"\\n                      visibility: hidden;\\n                      position: fixed;\\n                      \";\n            tempSelect.appendChild(tempOption);\n            event.target.after(tempSelect);\n            var tempSelectWidth = tempSelect.getBoundingClientRect().width;\n            console.log({\n              tempSelect: tempSelect\n            });\n            event.target.style.width = \"\".concat(tempSelectWidth, \"px\");\n            tempSelect.remove();\n          }\n        });\n        field.dispatchEvent(new Event('change'));\n      } else {\n        console.error(\"Le paramètre n'est pas un élément Select\");\n      }\n      ;\n    }\n  }]);\n}();\nexports[\"default\"] = Utils;\n\n//# sourceURL=webpack://@easylibs/easylibs/./packages/utils/dist/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});